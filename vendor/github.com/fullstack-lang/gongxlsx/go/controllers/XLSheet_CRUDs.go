// generated by stacks/gong/go/models/controller_file.go
package controllers

import (
	"log"
	"net/http"
	"time"

	"github.com/fullstack-lang/gongxlsx/go/models"
	"github.com/fullstack-lang/gongxlsx/go/orm"

	"github.com/gin-gonic/gin"
)

// declaration in order to justify use of the models import
var __XLSheet__dummysDeclaration__ models.XLSheet
var __XLSheet_time__dummyDeclaration time.Duration

// An XLSheetID parameter model.
//
// This is used for operations that want the ID of an order in the path
// swagger:parameters getXLSheet updateXLSheet deleteXLSheet
type XLSheetID struct {
	// The ID of the order
	//
	// in: path
	// required: true
	ID int64
}

// XLSheetInput is a schema that can validate the userâ€™s
// input to prevent us from getting invalid data
// swagger:parameters postXLSheet updateXLSheet
type XLSheetInput struct {
	// The XLSheet to submit or modify
	// in: body
	XLSheet *orm.XLSheetAPI
}

// GetXLSheets
//
// swagger:route GET /xlsheets xlsheets getXLSheets
//
// Get all xlsheets
//
// Responses:
//    default: genericError
//        200: xlsheetDBsResponse
func GetXLSheets(c *gin.Context) {
	db := orm.BackRepo.BackRepoXLSheet.GetDB()

	// source slice
	var xlsheetDBs []orm.XLSheetDB
	query := db.Find(&xlsheetDBs)
	if query.Error != nil {
		var returnError GenericError
		returnError.Body.Code = http.StatusBadRequest
		returnError.Body.Message = query.Error.Error()
		log.Println(query.Error.Error())
		c.JSON(http.StatusBadRequest, returnError.Body)
		return
	}

	// slice that will be transmitted to the front
	xlsheetAPIs := make([]orm.XLSheetAPI, 0)

	// for each xlsheet, update fields from the database nullable fields
	for idx := range xlsheetDBs {
		xlsheetDB := &xlsheetDBs[idx]
		_ = xlsheetDB
		var xlsheetAPI orm.XLSheetAPI

		// insertion point for updating fields
		xlsheetAPI.ID = xlsheetDB.ID
		xlsheetDB.CopyBasicFieldsToXLSheet(&xlsheetAPI.XLSheet)
		xlsheetAPI.XLSheetPointersEnconding = xlsheetDB.XLSheetPointersEnconding
		xlsheetAPIs = append(xlsheetAPIs, xlsheetAPI)
	}

	c.JSON(http.StatusOK, xlsheetAPIs)
}

// PostXLSheet
//
// swagger:route POST /xlsheets xlsheets postXLSheet
//
// Creates a xlsheet
//     Consumes:
//     - application/json
//
//     Produces:
//     - application/json
//
//     Responses:
//       200: xlsheetDBResponse
func PostXLSheet(c *gin.Context) {
	db := orm.BackRepo.BackRepoXLSheet.GetDB()

	// Validate input
	var input orm.XLSheetAPI

	err := c.ShouldBindJSON(&input)
	if err != nil {
		var returnError GenericError
		returnError.Body.Code = http.StatusBadRequest
		returnError.Body.Message = err.Error()
		log.Println(err.Error())
		c.JSON(http.StatusBadRequest, returnError.Body)
		return
	}

	// Create xlsheet
	xlsheetDB := orm.XLSheetDB{}
	xlsheetDB.XLSheetPointersEnconding = input.XLSheetPointersEnconding
	xlsheetDB.CopyBasicFieldsFromXLSheet(&input.XLSheet)

	query := db.Create(&xlsheetDB)
	if query.Error != nil {
		var returnError GenericError
		returnError.Body.Code = http.StatusBadRequest
		returnError.Body.Message = query.Error.Error()
		log.Println(query.Error.Error())
		c.JSON(http.StatusBadRequest, returnError.Body)
		return
	}

	// a POST is equivalent to a back repo commit increase
	// (this will be improved with implementation of unit of work design pattern)
	orm.BackRepo.IncrementPushFromFrontNb()

	c.JSON(http.StatusOK, xlsheetDB)
}

// GetXLSheet
//
// swagger:route GET /xlsheets/{ID} xlsheets getXLSheet
//
// Gets the details for a xlsheet.
//
// Responses:
//    default: genericError
//        200: xlsheetDBResponse
func GetXLSheet(c *gin.Context) {
	db := orm.BackRepo.BackRepoXLSheet.GetDB()

	// Get xlsheetDB in DB
	var xlsheetDB orm.XLSheetDB
	if err := db.First(&xlsheetDB, c.Param("id")).Error; err != nil {
		var returnError GenericError
		returnError.Body.Code = http.StatusBadRequest
		returnError.Body.Message = err.Error()
		log.Println(err.Error())
		c.JSON(http.StatusBadRequest, returnError.Body)
		return
	}

	var xlsheetAPI orm.XLSheetAPI
	xlsheetAPI.ID = xlsheetDB.ID
	xlsheetAPI.XLSheetPointersEnconding = xlsheetDB.XLSheetPointersEnconding
	xlsheetDB.CopyBasicFieldsToXLSheet(&xlsheetAPI.XLSheet)

	c.JSON(http.StatusOK, xlsheetAPI)
}

// UpdateXLSheet
//
// swagger:route PATCH /xlsheets/{ID} xlsheets updateXLSheet
//
// Update a xlsheet
//
// Responses:
//    default: genericError
//        200: xlsheetDBResponse
func UpdateXLSheet(c *gin.Context) {
	db := orm.BackRepo.BackRepoXLSheet.GetDB()

	// Get model if exist
	var xlsheetDB orm.XLSheetDB

	// fetch the xlsheet
	query := db.First(&xlsheetDB, c.Param("id"))

	if query.Error != nil {
		var returnError GenericError
		returnError.Body.Code = http.StatusBadRequest
		returnError.Body.Message = query.Error.Error()
		log.Println(query.Error.Error())
		c.JSON(http.StatusBadRequest, returnError.Body)
		return
	}

	// Validate input
	var input orm.XLSheetAPI
	if err := c.ShouldBindJSON(&input); err != nil {
		log.Println(err.Error())
		c.JSON(http.StatusBadRequest, gin.H{"error": err.Error()})
		return
	}

	// update
	xlsheetDB.CopyBasicFieldsFromXLSheet(&input.XLSheet)
	xlsheetDB.XLSheetPointersEnconding = input.XLSheetPointersEnconding

	query = db.Model(&xlsheetDB).Updates(xlsheetDB)
	if query.Error != nil {
		var returnError GenericError
		returnError.Body.Code = http.StatusBadRequest
		returnError.Body.Message = query.Error.Error()
		log.Println(query.Error.Error())
		c.JSON(http.StatusBadRequest, returnError.Body)
		return
	}

	// an UPDATE generates a back repo commit increase
	// (this will be improved with implementation of unit of work design pattern)
	orm.BackRepo.IncrementPushFromFrontNb()

	// return status OK with the marshalling of the the xlsheetDB
	c.JSON(http.StatusOK, xlsheetDB)
}

// DeleteXLSheet
//
// swagger:route DELETE /xlsheets/{ID} xlsheets deleteXLSheet
//
// Delete a xlsheet
//
// Responses:
//    default: genericError
func DeleteXLSheet(c *gin.Context) {
	db := orm.BackRepo.BackRepoXLSheet.GetDB()

	// Get model if exist
	var xlsheetDB orm.XLSheetDB
	if err := db.First(&xlsheetDB, c.Param("id")).Error; err != nil {
		var returnError GenericError
		returnError.Body.Code = http.StatusBadRequest
		returnError.Body.Message = err.Error()
		log.Println(err.Error())
		c.JSON(http.StatusBadRequest, returnError.Body)
		return
	}

	// with gorm.Model field, default delete is a soft delete. Unscoped() force delete
	db.Unscoped().Delete(&xlsheetDB)

	// a DELETE generates a back repo commit increase
	// (this will be improved with implementation of unit of work design pattern)
	orm.BackRepo.IncrementPushFromFrontNb()

	c.JSON(http.StatusOK, gin.H{"data": true})
}
