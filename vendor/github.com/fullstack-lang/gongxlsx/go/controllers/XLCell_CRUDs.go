// generated by stacks/gong/go/models/controller_file.go
package controllers

import (
	"log"
	"net/http"
	"time"

	"github.com/fullstack-lang/gongxlsx/go/models"
	"github.com/fullstack-lang/gongxlsx/go/orm"

	"github.com/gin-gonic/gin"
)

// declaration in order to justify use of the models import
var __XLCell__dummysDeclaration__ models.XLCell
var __XLCell_time__dummyDeclaration time.Duration

// An XLCellID parameter model.
//
// This is used for operations that want the ID of an order in the path
// swagger:parameters getXLCell updateXLCell deleteXLCell
type XLCellID struct {
	// The ID of the order
	//
	// in: path
	// required: true
	ID int64
}

// XLCellInput is a schema that can validate the userâ€™s
// input to prevent us from getting invalid data
// swagger:parameters postXLCell updateXLCell
type XLCellInput struct {
	// The XLCell to submit or modify
	// in: body
	XLCell *orm.XLCellAPI
}

// GetXLCells
//
// swagger:route GET /xlcells xlcells getXLCells
//
// Get all xlcells
//
// Responses:
//    default: genericError
//        200: xlcellDBsResponse
func GetXLCells(c *gin.Context) {
	db := orm.BackRepo.BackRepoXLCell.GetDB()

	// source slice
	var xlcellDBs []orm.XLCellDB
	query := db.Find(&xlcellDBs)
	if query.Error != nil {
		var returnError GenericError
		returnError.Body.Code = http.StatusBadRequest
		returnError.Body.Message = query.Error.Error()
		log.Println(query.Error.Error())
		c.JSON(http.StatusBadRequest, returnError.Body)
		return
	}

	// slice that will be transmitted to the front
	xlcellAPIs := make([]orm.XLCellAPI, 0)

	// for each xlcell, update fields from the database nullable fields
	for idx := range xlcellDBs {
		xlcellDB := &xlcellDBs[idx]
		_ = xlcellDB
		var xlcellAPI orm.XLCellAPI

		// insertion point for updating fields
		xlcellAPI.ID = xlcellDB.ID
		xlcellDB.CopyBasicFieldsToXLCell(&xlcellAPI.XLCell)
		xlcellAPI.XLCellPointersEnconding = xlcellDB.XLCellPointersEnconding
		xlcellAPIs = append(xlcellAPIs, xlcellAPI)
	}

	c.JSON(http.StatusOK, xlcellAPIs)
}

// PostXLCell
//
// swagger:route POST /xlcells xlcells postXLCell
//
// Creates a xlcell
//     Consumes:
//     - application/json
//
//     Produces:
//     - application/json
//
//     Responses:
//       200: xlcellDBResponse
func PostXLCell(c *gin.Context) {
	db := orm.BackRepo.BackRepoXLCell.GetDB()

	// Validate input
	var input orm.XLCellAPI

	err := c.ShouldBindJSON(&input)
	if err != nil {
		var returnError GenericError
		returnError.Body.Code = http.StatusBadRequest
		returnError.Body.Message = err.Error()
		log.Println(err.Error())
		c.JSON(http.StatusBadRequest, returnError.Body)
		return
	}

	// Create xlcell
	xlcellDB := orm.XLCellDB{}
	xlcellDB.XLCellPointersEnconding = input.XLCellPointersEnconding
	xlcellDB.CopyBasicFieldsFromXLCell(&input.XLCell)

	query := db.Create(&xlcellDB)
	if query.Error != nil {
		var returnError GenericError
		returnError.Body.Code = http.StatusBadRequest
		returnError.Body.Message = query.Error.Error()
		log.Println(query.Error.Error())
		c.JSON(http.StatusBadRequest, returnError.Body)
		return
	}

	// a POST is equivalent to a back repo commit increase
	// (this will be improved with implementation of unit of work design pattern)
	orm.BackRepo.IncrementPushFromFrontNb()

	c.JSON(http.StatusOK, xlcellDB)
}

// GetXLCell
//
// swagger:route GET /xlcells/{ID} xlcells getXLCell
//
// Gets the details for a xlcell.
//
// Responses:
//    default: genericError
//        200: xlcellDBResponse
func GetXLCell(c *gin.Context) {
	db := orm.BackRepo.BackRepoXLCell.GetDB()

	// Get xlcellDB in DB
	var xlcellDB orm.XLCellDB
	if err := db.First(&xlcellDB, c.Param("id")).Error; err != nil {
		var returnError GenericError
		returnError.Body.Code = http.StatusBadRequest
		returnError.Body.Message = err.Error()
		log.Println(err.Error())
		c.JSON(http.StatusBadRequest, returnError.Body)
		return
	}

	var xlcellAPI orm.XLCellAPI
	xlcellAPI.ID = xlcellDB.ID
	xlcellAPI.XLCellPointersEnconding = xlcellDB.XLCellPointersEnconding
	xlcellDB.CopyBasicFieldsToXLCell(&xlcellAPI.XLCell)

	c.JSON(http.StatusOK, xlcellAPI)
}

// UpdateXLCell
//
// swagger:route PATCH /xlcells/{ID} xlcells updateXLCell
//
// Update a xlcell
//
// Responses:
//    default: genericError
//        200: xlcellDBResponse
func UpdateXLCell(c *gin.Context) {
	db := orm.BackRepo.BackRepoXLCell.GetDB()

	// Get model if exist
	var xlcellDB orm.XLCellDB

	// fetch the xlcell
	query := db.First(&xlcellDB, c.Param("id"))

	if query.Error != nil {
		var returnError GenericError
		returnError.Body.Code = http.StatusBadRequest
		returnError.Body.Message = query.Error.Error()
		log.Println(query.Error.Error())
		c.JSON(http.StatusBadRequest, returnError.Body)
		return
	}

	// Validate input
	var input orm.XLCellAPI
	if err := c.ShouldBindJSON(&input); err != nil {
		log.Println(err.Error())
		c.JSON(http.StatusBadRequest, gin.H{"error": err.Error()})
		return
	}

	// update
	xlcellDB.CopyBasicFieldsFromXLCell(&input.XLCell)
	xlcellDB.XLCellPointersEnconding = input.XLCellPointersEnconding

	query = db.Model(&xlcellDB).Updates(xlcellDB)
	if query.Error != nil {
		var returnError GenericError
		returnError.Body.Code = http.StatusBadRequest
		returnError.Body.Message = query.Error.Error()
		log.Println(query.Error.Error())
		c.JSON(http.StatusBadRequest, returnError.Body)
		return
	}

	// an UPDATE generates a back repo commit increase
	// (this will be improved with implementation of unit of work design pattern)
	orm.BackRepo.IncrementPushFromFrontNb()

	// return status OK with the marshalling of the the xlcellDB
	c.JSON(http.StatusOK, xlcellDB)
}

// DeleteXLCell
//
// swagger:route DELETE /xlcells/{ID} xlcells deleteXLCell
//
// Delete a xlcell
//
// Responses:
//    default: genericError
func DeleteXLCell(c *gin.Context) {
	db := orm.BackRepo.BackRepoXLCell.GetDB()

	// Get model if exist
	var xlcellDB orm.XLCellDB
	if err := db.First(&xlcellDB, c.Param("id")).Error; err != nil {
		var returnError GenericError
		returnError.Body.Code = http.StatusBadRequest
		returnError.Body.Message = err.Error()
		log.Println(err.Error())
		c.JSON(http.StatusBadRequest, returnError.Body)
		return
	}

	// with gorm.Model field, default delete is a soft delete. Unscoped() force delete
	db.Unscoped().Delete(&xlcellDB)

	// a DELETE generates a back repo commit increase
	// (this will be improved with implementation of unit of work design pattern)
	orm.BackRepo.IncrementPushFromFrontNb()

	c.JSON(http.StatusOK, gin.H{"data": true})
}
