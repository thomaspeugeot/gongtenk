// generated by stacks/gong/go/models/controller_file.go
package controllers

import (
	"log"
	"net/http"
	"time"

	"github.com/fullstack-lang/gongleaflet/go/models"
	"github.com/fullstack-lang/gongleaflet/go/orm"

	"github.com/gin-gonic/gin"
)

// declaration in order to justify use of the models import
var __MapOptions__dummysDeclaration__ models.MapOptions
var __MapOptions_time__dummyDeclaration time.Duration

// An MapOptionsID parameter model.
//
// This is used for operations that want the ID of an order in the path
// swagger:parameters getMapOptions updateMapOptions deleteMapOptions
type MapOptionsID struct {
	// The ID of the order
	//
	// in: path
	// required: true
	ID int64
}

// MapOptionsInput is a schema that can validate the userâ€™s
// input to prevent us from getting invalid data
// swagger:parameters postMapOptions updateMapOptions
type MapOptionsInput struct {
	// The MapOptions to submit or modify
	// in: body
	MapOptions *orm.MapOptionsAPI
}

// GetMapOptionss
//
// swagger:route GET /mapoptionss mapoptionss getMapOptionss
//
// Get all mapoptionss
//
// Responses:
//    default: genericError
//        200: mapoptionsDBsResponse
func GetMapOptionss(c *gin.Context) {
	db := orm.BackRepo.BackRepoMapOptions.GetDB()

	// source slice
	var mapoptionsDBs []orm.MapOptionsDB
	query := db.Find(&mapoptionsDBs)
	if query.Error != nil {
		var returnError GenericError
		returnError.Body.Code = http.StatusBadRequest
		returnError.Body.Message = query.Error.Error()
		log.Println(query.Error.Error())
		c.JSON(http.StatusBadRequest, returnError.Body)
		return
	}

	// slice that will be transmitted to the front
	mapoptionsAPIs := make([]orm.MapOptionsAPI, 0)

	// for each mapoptions, update fields from the database nullable fields
	for idx := range mapoptionsDBs {
		mapoptionsDB := &mapoptionsDBs[idx]
		_ = mapoptionsDB
		var mapoptionsAPI orm.MapOptionsAPI

		// insertion point for updating fields
		mapoptionsAPI.ID = mapoptionsDB.ID
		mapoptionsDB.CopyBasicFieldsToMapOptions(&mapoptionsAPI.MapOptions)
		mapoptionsAPI.MapOptionsPointersEnconding = mapoptionsDB.MapOptionsPointersEnconding
		mapoptionsAPIs = append(mapoptionsAPIs, mapoptionsAPI)
	}

	c.JSON(http.StatusOK, mapoptionsAPIs)
}

// PostMapOptions
//
// swagger:route POST /mapoptionss mapoptionss postMapOptions
//
// Creates a mapoptions
//     Consumes:
//     - application/json
//
//     Produces:
//     - application/json
//
//     Responses:
//       200: mapoptionsDBResponse
func PostMapOptions(c *gin.Context) {
	db := orm.BackRepo.BackRepoMapOptions.GetDB()

	// Validate input
	var input orm.MapOptionsAPI

	err := c.ShouldBindJSON(&input)
	if err != nil {
		var returnError GenericError
		returnError.Body.Code = http.StatusBadRequest
		returnError.Body.Message = err.Error()
		log.Println(err.Error())
		c.JSON(http.StatusBadRequest, returnError.Body)
		return
	}

	// Create mapoptions
	mapoptionsDB := orm.MapOptionsDB{}
	mapoptionsDB.MapOptionsPointersEnconding = input.MapOptionsPointersEnconding
	mapoptionsDB.CopyBasicFieldsFromMapOptions(&input.MapOptions)

	query := db.Create(&mapoptionsDB)
	if query.Error != nil {
		var returnError GenericError
		returnError.Body.Code = http.StatusBadRequest
		returnError.Body.Message = query.Error.Error()
		log.Println(query.Error.Error())
		c.JSON(http.StatusBadRequest, returnError.Body)
		return
	}

	// a POST is equivalent to a back repo commit increase
	// (this will be improved with implementation of unit of work design pattern)
	orm.BackRepo.IncrementPushFromFrontNb()

	c.JSON(http.StatusOK, mapoptionsDB)
}

// GetMapOptions
//
// swagger:route GET /mapoptionss/{ID} mapoptionss getMapOptions
//
// Gets the details for a mapoptions.
//
// Responses:
//    default: genericError
//        200: mapoptionsDBResponse
func GetMapOptions(c *gin.Context) {
	db := orm.BackRepo.BackRepoMapOptions.GetDB()

	// Get mapoptionsDB in DB
	var mapoptionsDB orm.MapOptionsDB
	if err := db.First(&mapoptionsDB, c.Param("id")).Error; err != nil {
		var returnError GenericError
		returnError.Body.Code = http.StatusBadRequest
		returnError.Body.Message = err.Error()
		log.Println(err.Error())
		c.JSON(http.StatusBadRequest, returnError.Body)
		return
	}

	var mapoptionsAPI orm.MapOptionsAPI
	mapoptionsAPI.ID = mapoptionsDB.ID
	mapoptionsAPI.MapOptionsPointersEnconding = mapoptionsDB.MapOptionsPointersEnconding
	mapoptionsDB.CopyBasicFieldsToMapOptions(&mapoptionsAPI.MapOptions)

	c.JSON(http.StatusOK, mapoptionsAPI)
}

// UpdateMapOptions
//
// swagger:route PATCH /mapoptionss/{ID} mapoptionss updateMapOptions
//
// Update a mapoptions
//
// Responses:
//    default: genericError
//        200: mapoptionsDBResponse
func UpdateMapOptions(c *gin.Context) {
	db := orm.BackRepo.BackRepoMapOptions.GetDB()

	// Get model if exist
	var mapoptionsDB orm.MapOptionsDB

	// fetch the mapoptions
	query := db.First(&mapoptionsDB, c.Param("id"))

	if query.Error != nil {
		var returnError GenericError
		returnError.Body.Code = http.StatusBadRequest
		returnError.Body.Message = query.Error.Error()
		log.Println(query.Error.Error())
		c.JSON(http.StatusBadRequest, returnError.Body)
		return
	}

	// Validate input
	var input orm.MapOptionsAPI
	if err := c.ShouldBindJSON(&input); err != nil {
		log.Println(err.Error())
		c.JSON(http.StatusBadRequest, gin.H{"error": err.Error()})
		return
	}

	// update
	mapoptionsDB.CopyBasicFieldsFromMapOptions(&input.MapOptions)
	mapoptionsDB.MapOptionsPointersEnconding = input.MapOptionsPointersEnconding

	query = db.Model(&mapoptionsDB).Updates(mapoptionsDB)
	if query.Error != nil {
		var returnError GenericError
		returnError.Body.Code = http.StatusBadRequest
		returnError.Body.Message = query.Error.Error()
		log.Println(query.Error.Error())
		c.JSON(http.StatusBadRequest, returnError.Body)
		return
	}

	// an UPDATE generates a back repo commit increase
	// (this will be improved with implementation of unit of work design pattern)
	orm.BackRepo.IncrementPushFromFrontNb()

	// return status OK with the marshalling of the the mapoptionsDB
	c.JSON(http.StatusOK, mapoptionsDB)
}

// DeleteMapOptions
//
// swagger:route DELETE /mapoptionss/{ID} mapoptionss deleteMapOptions
//
// Delete a mapoptions
//
// Responses:
//    default: genericError
func DeleteMapOptions(c *gin.Context) {
	db := orm.BackRepo.BackRepoMapOptions.GetDB()

	// Get model if exist
	var mapoptionsDB orm.MapOptionsDB
	if err := db.First(&mapoptionsDB, c.Param("id")).Error; err != nil {
		var returnError GenericError
		returnError.Body.Code = http.StatusBadRequest
		returnError.Body.Message = err.Error()
		log.Println(err.Error())
		c.JSON(http.StatusBadRequest, returnError.Body)
		return
	}

	// with gorm.Model field, default delete is a soft delete. Unscoped() force delete
	db.Unscoped().Delete(&mapoptionsDB)

	// a DELETE generates a back repo commit increase
	// (this will be improved with implementation of unit of work design pattern)
	orm.BackRepo.IncrementPushFromFrontNb()

	c.JSON(http.StatusOK, gin.H{"data": true})
}
