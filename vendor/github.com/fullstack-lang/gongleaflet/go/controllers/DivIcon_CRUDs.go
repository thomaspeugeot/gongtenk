// generated by stacks/gong/go/models/controller_file.go
package controllers

import (
	"log"
	"net/http"
	"time"

	"github.com/fullstack-lang/gongleaflet/go/models"
	"github.com/fullstack-lang/gongleaflet/go/orm"

	"github.com/gin-gonic/gin"
)

// declaration in order to justify use of the models import
var __DivIcon__dummysDeclaration__ models.DivIcon
var __DivIcon_time__dummyDeclaration time.Duration

// An DivIconID parameter model.
//
// This is used for operations that want the ID of an order in the path
// swagger:parameters getDivIcon updateDivIcon deleteDivIcon
type DivIconID struct {
	// The ID of the order
	//
	// in: path
	// required: true
	ID int64
}

// DivIconInput is a schema that can validate the userâ€™s
// input to prevent us from getting invalid data
// swagger:parameters postDivIcon updateDivIcon
type DivIconInput struct {
	// The DivIcon to submit or modify
	// in: body
	DivIcon *orm.DivIconAPI
}

// GetDivIcons
//
// swagger:route GET /divicons divicons getDivIcons
//
// Get all divicons
//
// Responses:
//    default: genericError
//        200: diviconDBsResponse
func GetDivIcons(c *gin.Context) {
	db := orm.BackRepo.BackRepoDivIcon.GetDB()

	// source slice
	var diviconDBs []orm.DivIconDB
	query := db.Find(&diviconDBs)
	if query.Error != nil {
		var returnError GenericError
		returnError.Body.Code = http.StatusBadRequest
		returnError.Body.Message = query.Error.Error()
		log.Println(query.Error.Error())
		c.JSON(http.StatusBadRequest, returnError.Body)
		return
	}

	// slice that will be transmitted to the front
	diviconAPIs := make([]orm.DivIconAPI, 0)

	// for each divicon, update fields from the database nullable fields
	for idx := range diviconDBs {
		diviconDB := &diviconDBs[idx]
		_ = diviconDB
		var diviconAPI orm.DivIconAPI

		// insertion point for updating fields
		diviconAPI.ID = diviconDB.ID
		diviconDB.CopyBasicFieldsToDivIcon(&diviconAPI.DivIcon)
		diviconAPI.DivIconPointersEnconding = diviconDB.DivIconPointersEnconding
		diviconAPIs = append(diviconAPIs, diviconAPI)
	}

	c.JSON(http.StatusOK, diviconAPIs)
}

// PostDivIcon
//
// swagger:route POST /divicons divicons postDivIcon
//
// Creates a divicon
//     Consumes:
//     - application/json
//
//     Produces:
//     - application/json
//
//     Responses:
//       200: diviconDBResponse
func PostDivIcon(c *gin.Context) {
	db := orm.BackRepo.BackRepoDivIcon.GetDB()

	// Validate input
	var input orm.DivIconAPI

	err := c.ShouldBindJSON(&input)
	if err != nil {
		var returnError GenericError
		returnError.Body.Code = http.StatusBadRequest
		returnError.Body.Message = err.Error()
		log.Println(err.Error())
		c.JSON(http.StatusBadRequest, returnError.Body)
		return
	}

	// Create divicon
	diviconDB := orm.DivIconDB{}
	diviconDB.DivIconPointersEnconding = input.DivIconPointersEnconding
	diviconDB.CopyBasicFieldsFromDivIcon(&input.DivIcon)

	query := db.Create(&diviconDB)
	if query.Error != nil {
		var returnError GenericError
		returnError.Body.Code = http.StatusBadRequest
		returnError.Body.Message = query.Error.Error()
		log.Println(query.Error.Error())
		c.JSON(http.StatusBadRequest, returnError.Body)
		return
	}

	// a POST is equivalent to a back repo commit increase
	// (this will be improved with implementation of unit of work design pattern)
	orm.BackRepo.IncrementPushFromFrontNb()

	c.JSON(http.StatusOK, diviconDB)
}

// GetDivIcon
//
// swagger:route GET /divicons/{ID} divicons getDivIcon
//
// Gets the details for a divicon.
//
// Responses:
//    default: genericError
//        200: diviconDBResponse
func GetDivIcon(c *gin.Context) {
	db := orm.BackRepo.BackRepoDivIcon.GetDB()

	// Get diviconDB in DB
	var diviconDB orm.DivIconDB
	if err := db.First(&diviconDB, c.Param("id")).Error; err != nil {
		var returnError GenericError
		returnError.Body.Code = http.StatusBadRequest
		returnError.Body.Message = err.Error()
		log.Println(err.Error())
		c.JSON(http.StatusBadRequest, returnError.Body)
		return
	}

	var diviconAPI orm.DivIconAPI
	diviconAPI.ID = diviconDB.ID
	diviconAPI.DivIconPointersEnconding = diviconDB.DivIconPointersEnconding
	diviconDB.CopyBasicFieldsToDivIcon(&diviconAPI.DivIcon)

	c.JSON(http.StatusOK, diviconAPI)
}

// UpdateDivIcon
//
// swagger:route PATCH /divicons/{ID} divicons updateDivIcon
//
// Update a divicon
//
// Responses:
//    default: genericError
//        200: diviconDBResponse
func UpdateDivIcon(c *gin.Context) {
	db := orm.BackRepo.BackRepoDivIcon.GetDB()

	// Get model if exist
	var diviconDB orm.DivIconDB

	// fetch the divicon
	query := db.First(&diviconDB, c.Param("id"))

	if query.Error != nil {
		var returnError GenericError
		returnError.Body.Code = http.StatusBadRequest
		returnError.Body.Message = query.Error.Error()
		log.Println(query.Error.Error())
		c.JSON(http.StatusBadRequest, returnError.Body)
		return
	}

	// Validate input
	var input orm.DivIconAPI
	if err := c.ShouldBindJSON(&input); err != nil {
		log.Println(err.Error())
		c.JSON(http.StatusBadRequest, gin.H{"error": err.Error()})
		return
	}

	// update
	diviconDB.CopyBasicFieldsFromDivIcon(&input.DivIcon)
	diviconDB.DivIconPointersEnconding = input.DivIconPointersEnconding

	query = db.Model(&diviconDB).Updates(diviconDB)
	if query.Error != nil {
		var returnError GenericError
		returnError.Body.Code = http.StatusBadRequest
		returnError.Body.Message = query.Error.Error()
		log.Println(query.Error.Error())
		c.JSON(http.StatusBadRequest, returnError.Body)
		return
	}

	// an UPDATE generates a back repo commit increase
	// (this will be improved with implementation of unit of work design pattern)
	orm.BackRepo.IncrementPushFromFrontNb()

	// return status OK with the marshalling of the the diviconDB
	c.JSON(http.StatusOK, diviconDB)
}

// DeleteDivIcon
//
// swagger:route DELETE /divicons/{ID} divicons deleteDivIcon
//
// Delete a divicon
//
// Responses:
//    default: genericError
func DeleteDivIcon(c *gin.Context) {
	db := orm.BackRepo.BackRepoDivIcon.GetDB()

	// Get model if exist
	var diviconDB orm.DivIconDB
	if err := db.First(&diviconDB, c.Param("id")).Error; err != nil {
		var returnError GenericError
		returnError.Body.Code = http.StatusBadRequest
		returnError.Body.Message = err.Error()
		log.Println(err.Error())
		c.JSON(http.StatusBadRequest, returnError.Body)
		return
	}

	// with gorm.Model field, default delete is a soft delete. Unscoped() force delete
	db.Unscoped().Delete(&diviconDB)

	// a DELETE generates a back repo commit increase
	// (this will be improved with implementation of unit of work design pattern)
	orm.BackRepo.IncrementPushFromFrontNb()

	c.JSON(http.StatusOK, gin.H{"data": true})
}
