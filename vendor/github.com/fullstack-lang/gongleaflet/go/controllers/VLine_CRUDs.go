// generated by stacks/gong/go/models/controller_file.go
package controllers

import (
	"log"
	"net/http"
	"time"

	"github.com/fullstack-lang/gongleaflet/go/models"
	"github.com/fullstack-lang/gongleaflet/go/orm"

	"github.com/gin-gonic/gin"
)

// declaration in order to justify use of the models import
var __VLine__dummysDeclaration__ models.VLine
var __VLine_time__dummyDeclaration time.Duration

// An VLineID parameter model.
//
// This is used for operations that want the ID of an order in the path
// swagger:parameters getVLine updateVLine deleteVLine
type VLineID struct {
	// The ID of the order
	//
	// in: path
	// required: true
	ID int64
}

// VLineInput is a schema that can validate the userâ€™s
// input to prevent us from getting invalid data
// swagger:parameters postVLine updateVLine
type VLineInput struct {
	// The VLine to submit or modify
	// in: body
	VLine *orm.VLineAPI
}

// GetVLines
//
// swagger:route GET /vlines vlines getVLines
//
// Get all vlines
//
// Responses:
//    default: genericError
//        200: vlineDBsResponse
func GetVLines(c *gin.Context) {
	db := orm.BackRepo.BackRepoVLine.GetDB()

	// source slice
	var vlineDBs []orm.VLineDB
	query := db.Find(&vlineDBs)
	if query.Error != nil {
		var returnError GenericError
		returnError.Body.Code = http.StatusBadRequest
		returnError.Body.Message = query.Error.Error()
		log.Println(query.Error.Error())
		c.JSON(http.StatusBadRequest, returnError.Body)
		return
	}

	// slice that will be transmitted to the front
	vlineAPIs := make([]orm.VLineAPI, 0)

	// for each vline, update fields from the database nullable fields
	for idx := range vlineDBs {
		vlineDB := &vlineDBs[idx]
		_ = vlineDB
		var vlineAPI orm.VLineAPI

		// insertion point for updating fields
		vlineAPI.ID = vlineDB.ID
		vlineDB.CopyBasicFieldsToVLine(&vlineAPI.VLine)
		vlineAPI.VLinePointersEnconding = vlineDB.VLinePointersEnconding
		vlineAPIs = append(vlineAPIs, vlineAPI)
	}

	c.JSON(http.StatusOK, vlineAPIs)
}

// PostVLine
//
// swagger:route POST /vlines vlines postVLine
//
// Creates a vline
//     Consumes:
//     - application/json
//
//     Produces:
//     - application/json
//
//     Responses:
//       200: vlineDBResponse
func PostVLine(c *gin.Context) {
	db := orm.BackRepo.BackRepoVLine.GetDB()

	// Validate input
	var input orm.VLineAPI

	err := c.ShouldBindJSON(&input)
	if err != nil {
		var returnError GenericError
		returnError.Body.Code = http.StatusBadRequest
		returnError.Body.Message = err.Error()
		log.Println(err.Error())
		c.JSON(http.StatusBadRequest, returnError.Body)
		return
	}

	// Create vline
	vlineDB := orm.VLineDB{}
	vlineDB.VLinePointersEnconding = input.VLinePointersEnconding
	vlineDB.CopyBasicFieldsFromVLine(&input.VLine)

	query := db.Create(&vlineDB)
	if query.Error != nil {
		var returnError GenericError
		returnError.Body.Code = http.StatusBadRequest
		returnError.Body.Message = query.Error.Error()
		log.Println(query.Error.Error())
		c.JSON(http.StatusBadRequest, returnError.Body)
		return
	}

	// a POST is equivalent to a back repo commit increase
	// (this will be improved with implementation of unit of work design pattern)
	orm.BackRepo.IncrementPushFromFrontNb()

	c.JSON(http.StatusOK, vlineDB)
}

// GetVLine
//
// swagger:route GET /vlines/{ID} vlines getVLine
//
// Gets the details for a vline.
//
// Responses:
//    default: genericError
//        200: vlineDBResponse
func GetVLine(c *gin.Context) {
	db := orm.BackRepo.BackRepoVLine.GetDB()

	// Get vlineDB in DB
	var vlineDB orm.VLineDB
	if err := db.First(&vlineDB, c.Param("id")).Error; err != nil {
		var returnError GenericError
		returnError.Body.Code = http.StatusBadRequest
		returnError.Body.Message = err.Error()
		log.Println(err.Error())
		c.JSON(http.StatusBadRequest, returnError.Body)
		return
	}

	var vlineAPI orm.VLineAPI
	vlineAPI.ID = vlineDB.ID
	vlineAPI.VLinePointersEnconding = vlineDB.VLinePointersEnconding
	vlineDB.CopyBasicFieldsToVLine(&vlineAPI.VLine)

	c.JSON(http.StatusOK, vlineAPI)
}

// UpdateVLine
//
// swagger:route PATCH /vlines/{ID} vlines updateVLine
//
// Update a vline
//
// Responses:
//    default: genericError
//        200: vlineDBResponse
func UpdateVLine(c *gin.Context) {
	db := orm.BackRepo.BackRepoVLine.GetDB()

	// Get model if exist
	var vlineDB orm.VLineDB

	// fetch the vline
	query := db.First(&vlineDB, c.Param("id"))

	if query.Error != nil {
		var returnError GenericError
		returnError.Body.Code = http.StatusBadRequest
		returnError.Body.Message = query.Error.Error()
		log.Println(query.Error.Error())
		c.JSON(http.StatusBadRequest, returnError.Body)
		return
	}

	// Validate input
	var input orm.VLineAPI
	if err := c.ShouldBindJSON(&input); err != nil {
		log.Println(err.Error())
		c.JSON(http.StatusBadRequest, gin.H{"error": err.Error()})
		return
	}

	// update
	vlineDB.CopyBasicFieldsFromVLine(&input.VLine)
	vlineDB.VLinePointersEnconding = input.VLinePointersEnconding

	query = db.Model(&vlineDB).Updates(vlineDB)
	if query.Error != nil {
		var returnError GenericError
		returnError.Body.Code = http.StatusBadRequest
		returnError.Body.Message = query.Error.Error()
		log.Println(query.Error.Error())
		c.JSON(http.StatusBadRequest, returnError.Body)
		return
	}

	// an UPDATE generates a back repo commit increase
	// (this will be improved with implementation of unit of work design pattern)
	orm.BackRepo.IncrementPushFromFrontNb()

	// return status OK with the marshalling of the the vlineDB
	c.JSON(http.StatusOK, vlineDB)
}

// DeleteVLine
//
// swagger:route DELETE /vlines/{ID} vlines deleteVLine
//
// Delete a vline
//
// Responses:
//    default: genericError
func DeleteVLine(c *gin.Context) {
	db := orm.BackRepo.BackRepoVLine.GetDB()

	// Get model if exist
	var vlineDB orm.VLineDB
	if err := db.First(&vlineDB, c.Param("id")).Error; err != nil {
		var returnError GenericError
		returnError.Body.Code = http.StatusBadRequest
		returnError.Body.Message = err.Error()
		log.Println(err.Error())
		c.JSON(http.StatusBadRequest, returnError.Body)
		return
	}

	// with gorm.Model field, default delete is a soft delete. Unscoped() force delete
	db.Unscoped().Delete(&vlineDB)

	// a DELETE generates a back repo commit increase
	// (this will be improved with implementation of unit of work design pattern)
	orm.BackRepo.IncrementPushFromFrontNb()

	c.JSON(http.StatusOK, gin.H{"data": true})
}
