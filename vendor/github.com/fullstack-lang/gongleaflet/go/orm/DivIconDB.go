// generated by stacks/gong/go/models/orm_file_per_struct_back_repo.go
package orm

import (
	"database/sql"
	"encoding/json"
	"errors"
	"fmt"
	"io/ioutil"
	"log"
	"os"
	"path/filepath"
	"sort"
	"time"

	"gorm.io/gorm"

	"github.com/tealeg/xlsx/v3"

	"github.com/fullstack-lang/gongleaflet/go/models"
)

// dummy variable to have the import declaration wihthout compile failure (even if no code needing this import is generated)
var dummy_DivIcon_sql sql.NullBool
var dummy_DivIcon_time time.Duration
var dummy_DivIcon_sort sort.Float64Slice

// DivIconAPI is the input in POST API
//
// for POST, API, one needs the fields of the model as well as the fields
// from associations ("Has One" and "Has Many") that are generated to
// fullfill the ORM requirements for associations
//
// swagger:model diviconAPI
type DivIconAPI struct {
	gorm.Model

	models.DivIcon

	// encoding of pointers
	DivIconPointersEnconding
}

// DivIconPointersEnconding encodes pointers to Struct and
// reverse pointers of slice of poitners to Struct
type DivIconPointersEnconding struct {
	// insertion for pointer fields encoding declaration
}

// DivIconDB describes a divicon in the database
//
// It incorporates the GORM ID, basic fields from the model (because they can be serialized),
// the encoded version of pointers
//
// swagger:model diviconDB
type DivIconDB struct {
	gorm.Model

	// insertion for basic fields declaration

	// Declation for basic field diviconDB.Name {{BasicKind}} (to be completed)
	Name_Data sql.NullString

	// Declation for basic field diviconDB.SVG {{BasicKind}} (to be completed)
	SVG_Data sql.NullString
	// encoding of pointers
	DivIconPointersEnconding
}

// DivIconDBs arrays diviconDBs
// swagger:response diviconDBsResponse
type DivIconDBs []DivIconDB

// DivIconDBResponse provides response
// swagger:response diviconDBResponse
type DivIconDBResponse struct {
	DivIconDB
}

// DivIconWOP is a DivIcon without pointers (WOP is an acronym for "Without Pointers")
// it holds the same basic fields but pointers are encoded into uint
type DivIconWOP struct {
	ID int `xlsx:"0"`

	// insertion for WOP basic fields

	Name string `xlsx:"1"`

	SVG string `xlsx:"2"`
	// insertion for WOP pointer fields
}

var DivIcon_Fields = []string{
	// insertion for WOP basic fields
	"ID",
	"Name",
	"SVG",
}

type BackRepoDivIconStruct struct {
	// stores DivIconDB according to their gorm ID
	Map_DivIconDBID_DivIconDB *map[uint]*DivIconDB

	// stores DivIconDB ID according to DivIcon address
	Map_DivIconPtr_DivIconDBID *map[*models.DivIcon]uint

	// stores DivIcon according to their gorm ID
	Map_DivIconDBID_DivIconPtr *map[uint]*models.DivIcon

	db *gorm.DB
}

func (backRepoDivIcon *BackRepoDivIconStruct) GetDB() *gorm.DB {
	return backRepoDivIcon.db
}

// GetDivIconDBFromDivIconPtr is a handy function to access the back repo instance from the stage instance
func (backRepoDivIcon *BackRepoDivIconStruct) GetDivIconDBFromDivIconPtr(divicon *models.DivIcon) (diviconDB *DivIconDB) {
	id := (*backRepoDivIcon.Map_DivIconPtr_DivIconDBID)[divicon]
	diviconDB = (*backRepoDivIcon.Map_DivIconDBID_DivIconDB)[id]
	return
}

// BackRepoDivIcon.Init set up the BackRepo of the DivIcon
func (backRepoDivIcon *BackRepoDivIconStruct) Init(db *gorm.DB) (Error error) {

	if backRepoDivIcon.Map_DivIconDBID_DivIconPtr != nil {
		err := errors.New("In Init, backRepoDivIcon.Map_DivIconDBID_DivIconPtr should be nil")
		return err
	}

	if backRepoDivIcon.Map_DivIconDBID_DivIconDB != nil {
		err := errors.New("In Init, backRepoDivIcon.Map_DivIconDBID_DivIconDB should be nil")
		return err
	}

	if backRepoDivIcon.Map_DivIconPtr_DivIconDBID != nil {
		err := errors.New("In Init, backRepoDivIcon.Map_DivIconPtr_DivIconDBID should be nil")
		return err
	}

	tmp := make(map[uint]*models.DivIcon, 0)
	backRepoDivIcon.Map_DivIconDBID_DivIconPtr = &tmp

	tmpDB := make(map[uint]*DivIconDB, 0)
	backRepoDivIcon.Map_DivIconDBID_DivIconDB = &tmpDB

	tmpID := make(map[*models.DivIcon]uint, 0)
	backRepoDivIcon.Map_DivIconPtr_DivIconDBID = &tmpID

	backRepoDivIcon.db = db
	return
}

// BackRepoDivIcon.CommitPhaseOne commits all staged instances of DivIcon to the BackRepo
// Phase One is the creation of instance in the database if it is not yet done to get the unique ID for each staged instance
func (backRepoDivIcon *BackRepoDivIconStruct) CommitPhaseOne(stage *models.StageStruct) (Error error) {

	for divicon := range stage.DivIcons {
		backRepoDivIcon.CommitPhaseOneInstance(divicon)
	}

	// parse all backRepo instance and checks wether some instance have been unstaged
	// in this case, remove them from the back repo
	for id, divicon := range *backRepoDivIcon.Map_DivIconDBID_DivIconPtr {
		if _, ok := stage.DivIcons[divicon]; !ok {
			backRepoDivIcon.CommitDeleteInstance(id)
		}
	}

	return
}

// BackRepoDivIcon.CommitDeleteInstance commits deletion of DivIcon to the BackRepo
func (backRepoDivIcon *BackRepoDivIconStruct) CommitDeleteInstance(id uint) (Error error) {

	divicon := (*backRepoDivIcon.Map_DivIconDBID_DivIconPtr)[id]

	// divicon is not staged anymore, remove diviconDB
	diviconDB := (*backRepoDivIcon.Map_DivIconDBID_DivIconDB)[id]
	query := backRepoDivIcon.db.Unscoped().Delete(&diviconDB)
	if query.Error != nil {
		return query.Error
	}

	// update stores
	delete((*backRepoDivIcon.Map_DivIconPtr_DivIconDBID), divicon)
	delete((*backRepoDivIcon.Map_DivIconDBID_DivIconPtr), id)
	delete((*backRepoDivIcon.Map_DivIconDBID_DivIconDB), id)

	return
}

// BackRepoDivIcon.CommitPhaseOneInstance commits divicon staged instances of DivIcon to the BackRepo
// Phase One is the creation of instance in the database if it is not yet done to get the unique ID for each staged instance
func (backRepoDivIcon *BackRepoDivIconStruct) CommitPhaseOneInstance(divicon *models.DivIcon) (Error error) {

	// check if the divicon is not commited yet
	if _, ok := (*backRepoDivIcon.Map_DivIconPtr_DivIconDBID)[divicon]; ok {
		return
	}

	// initiate divicon
	var diviconDB DivIconDB
	diviconDB.CopyBasicFieldsFromDivIcon(divicon)

	query := backRepoDivIcon.db.Create(&diviconDB)
	if query.Error != nil {
		return query.Error
	}

	// update stores
	(*backRepoDivIcon.Map_DivIconPtr_DivIconDBID)[divicon] = diviconDB.ID
	(*backRepoDivIcon.Map_DivIconDBID_DivIconPtr)[diviconDB.ID] = divicon
	(*backRepoDivIcon.Map_DivIconDBID_DivIconDB)[diviconDB.ID] = &diviconDB

	return
}

// BackRepoDivIcon.CommitPhaseTwo commits all staged instances of DivIcon to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoDivIcon *BackRepoDivIconStruct) CommitPhaseTwo(backRepo *BackRepoStruct) (Error error) {

	for idx, divicon := range *backRepoDivIcon.Map_DivIconDBID_DivIconPtr {
		backRepoDivIcon.CommitPhaseTwoInstance(backRepo, idx, divicon)
	}

	return
}

// BackRepoDivIcon.CommitPhaseTwoInstance commits {{structname }} of models.DivIcon to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoDivIcon *BackRepoDivIconStruct) CommitPhaseTwoInstance(backRepo *BackRepoStruct, idx uint, divicon *models.DivIcon) (Error error) {

	// fetch matching diviconDB
	if diviconDB, ok := (*backRepoDivIcon.Map_DivIconDBID_DivIconDB)[idx]; ok {

		diviconDB.CopyBasicFieldsFromDivIcon(divicon)

		// insertion point for translating pointers encodings into actual pointers
		query := backRepoDivIcon.db.Save(&diviconDB)
		if query.Error != nil {
			return query.Error
		}

	} else {
		err := errors.New(
			fmt.Sprintf("Unkown DivIcon intance %s", divicon.Name))
		return err
	}

	return
}

// BackRepoDivIcon.CheckoutPhaseOne Checkouts all BackRepo instances to the Stage
//
// Phase One will result in having instances on the stage aligned with the back repo
// pointers are not initialized yet (this is for pahse two)
//
func (backRepoDivIcon *BackRepoDivIconStruct) CheckoutPhaseOne() (Error error) {

	diviconDBArray := make([]DivIconDB, 0)
	query := backRepoDivIcon.db.Find(&diviconDBArray)
	if query.Error != nil {
		return query.Error
	}

	// list of instances to be removed
	// start from the initial map on the stage and remove instances that have been checked out
	diviconInstancesToBeRemovedFromTheStage := make(map[*models.DivIcon]struct{})
	for key, value := range models.Stage.DivIcons {
		diviconInstancesToBeRemovedFromTheStage[key] = value
	}

	// copy orm objects to the the map
	for _, diviconDB := range diviconDBArray {
		backRepoDivIcon.CheckoutPhaseOneInstance(&diviconDB)

		// do not remove this instance from the stage, therefore
		// remove instance from the list of instances to be be removed from the stage
		divicon, ok := (*backRepoDivIcon.Map_DivIconDBID_DivIconPtr)[diviconDB.ID]
		if ok {
			delete(diviconInstancesToBeRemovedFromTheStage, divicon)
		}
	}

	// remove from stage and back repo's 3 maps all divicons that are not in the checkout
	for divicon := range diviconInstancesToBeRemovedFromTheStage {
		divicon.Unstage()

		// remove instance from the back repo 3 maps
		diviconID := (*backRepoDivIcon.Map_DivIconPtr_DivIconDBID)[divicon]
		delete((*backRepoDivIcon.Map_DivIconPtr_DivIconDBID), divicon)
		delete((*backRepoDivIcon.Map_DivIconDBID_DivIconDB), diviconID)
		delete((*backRepoDivIcon.Map_DivIconDBID_DivIconPtr), diviconID)
	}

	return
}

// CheckoutPhaseOneInstance takes a diviconDB that has been found in the DB, updates the backRepo and stages the
// models version of the diviconDB
func (backRepoDivIcon *BackRepoDivIconStruct) CheckoutPhaseOneInstance(diviconDB *DivIconDB) (Error error) {

	divicon, ok := (*backRepoDivIcon.Map_DivIconDBID_DivIconPtr)[diviconDB.ID]
	if !ok {
		divicon = new(models.DivIcon)

		(*backRepoDivIcon.Map_DivIconDBID_DivIconPtr)[diviconDB.ID] = divicon
		(*backRepoDivIcon.Map_DivIconPtr_DivIconDBID)[divicon] = diviconDB.ID

		// append model store with the new element
		divicon.Name = diviconDB.Name_Data.String
		divicon.Stage()
	}
	diviconDB.CopyBasicFieldsToDivIcon(divicon)

	// preserve pointer to diviconDB. Otherwise, pointer will is recycled and the map of pointers
	// Map_DivIconDBID_DivIconDB)[diviconDB hold variable pointers
	diviconDB_Data := *diviconDB
	preservedPtrToDivIcon := &diviconDB_Data
	(*backRepoDivIcon.Map_DivIconDBID_DivIconDB)[diviconDB.ID] = preservedPtrToDivIcon

	return
}

// BackRepoDivIcon.CheckoutPhaseTwo Checkouts all staged instances of DivIcon to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoDivIcon *BackRepoDivIconStruct) CheckoutPhaseTwo(backRepo *BackRepoStruct) (Error error) {

	// parse all DB instance and update all pointer fields of the translated models instance
	for _, diviconDB := range *backRepoDivIcon.Map_DivIconDBID_DivIconDB {
		backRepoDivIcon.CheckoutPhaseTwoInstance(backRepo, diviconDB)
	}
	return
}

// BackRepoDivIcon.CheckoutPhaseTwoInstance Checkouts staged instances of DivIcon to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoDivIcon *BackRepoDivIconStruct) CheckoutPhaseTwoInstance(backRepo *BackRepoStruct, diviconDB *DivIconDB) (Error error) {

	divicon := (*backRepoDivIcon.Map_DivIconDBID_DivIconPtr)[diviconDB.ID]
	_ = divicon // sometimes, there is no code generated. This lines voids the "unused variable" compilation error

	// insertion point for checkout of pointer encoding
	return
}

// CommitDivIcon allows commit of a single divicon (if already staged)
func (backRepo *BackRepoStruct) CommitDivIcon(divicon *models.DivIcon) {
	backRepo.BackRepoDivIcon.CommitPhaseOneInstance(divicon)
	if id, ok := (*backRepo.BackRepoDivIcon.Map_DivIconPtr_DivIconDBID)[divicon]; ok {
		backRepo.BackRepoDivIcon.CommitPhaseTwoInstance(backRepo, id, divicon)
	}
}

// CommitDivIcon allows checkout of a single divicon (if already staged and with a BackRepo id)
func (backRepo *BackRepoStruct) CheckoutDivIcon(divicon *models.DivIcon) {
	// check if the divicon is staged
	if _, ok := (*backRepo.BackRepoDivIcon.Map_DivIconPtr_DivIconDBID)[divicon]; ok {

		if id, ok := (*backRepo.BackRepoDivIcon.Map_DivIconPtr_DivIconDBID)[divicon]; ok {
			var diviconDB DivIconDB
			diviconDB.ID = id

			if err := backRepo.BackRepoDivIcon.db.First(&diviconDB, id).Error; err != nil {
				log.Panicln("CheckoutDivIcon : Problem with getting object with id:", id)
			}
			backRepo.BackRepoDivIcon.CheckoutPhaseOneInstance(&diviconDB)
			backRepo.BackRepoDivIcon.CheckoutPhaseTwoInstance(backRepo, &diviconDB)
		}
	}
}

// CopyBasicFieldsFromDivIcon
func (diviconDB *DivIconDB) CopyBasicFieldsFromDivIcon(divicon *models.DivIcon) {
	// insertion point for fields commit

	diviconDB.Name_Data.String = divicon.Name
	diviconDB.Name_Data.Valid = true

	diviconDB.SVG_Data.String = divicon.SVG
	diviconDB.SVG_Data.Valid = true
}

// CopyBasicFieldsFromDivIconWOP
func (diviconDB *DivIconDB) CopyBasicFieldsFromDivIconWOP(divicon *DivIconWOP) {
	// insertion point for fields commit

	diviconDB.Name_Data.String = divicon.Name
	diviconDB.Name_Data.Valid = true

	diviconDB.SVG_Data.String = divicon.SVG
	diviconDB.SVG_Data.Valid = true
}

// CopyBasicFieldsToDivIcon
func (diviconDB *DivIconDB) CopyBasicFieldsToDivIcon(divicon *models.DivIcon) {
	// insertion point for checkout of basic fields (back repo to stage)
	divicon.Name = diviconDB.Name_Data.String
	divicon.SVG = diviconDB.SVG_Data.String
}

// CopyBasicFieldsToDivIconWOP
func (diviconDB *DivIconDB) CopyBasicFieldsToDivIconWOP(divicon *DivIconWOP) {
	divicon.ID = int(diviconDB.ID)
	// insertion point for checkout of basic fields (back repo to stage)
	divicon.Name = diviconDB.Name_Data.String
	divicon.SVG = diviconDB.SVG_Data.String
}

// Backup generates a json file from a slice of all DivIconDB instances in the backrepo
func (backRepoDivIcon *BackRepoDivIconStruct) Backup(dirPath string) {

	filename := filepath.Join(dirPath, "DivIconDB.json")

	// organize the map into an array with increasing IDs, in order to have repoductible
	// backup file
	forBackup := make([]*DivIconDB, 0)
	for _, diviconDB := range *backRepoDivIcon.Map_DivIconDBID_DivIconDB {
		forBackup = append(forBackup, diviconDB)
	}

	sort.Slice(forBackup[:], func(i, j int) bool {
		return forBackup[i].ID < forBackup[j].ID
	})

	file, err := json.MarshalIndent(forBackup, "", " ")

	if err != nil {
		log.Panic("Cannot json DivIcon ", filename, " ", err.Error())
	}

	err = ioutil.WriteFile(filename, file, 0644)
	if err != nil {
		log.Panic("Cannot write the json DivIcon file", err.Error())
	}
}

// Backup generates a json file from a slice of all DivIconDB instances in the backrepo
func (backRepoDivIcon *BackRepoDivIconStruct) BackupXL(file *xlsx.File) {

	// organize the map into an array with increasing IDs, in order to have repoductible
	// backup file
	forBackup := make([]*DivIconDB, 0)
	for _, diviconDB := range *backRepoDivIcon.Map_DivIconDBID_DivIconDB {
		forBackup = append(forBackup, diviconDB)
	}

	sort.Slice(forBackup[:], func(i, j int) bool {
		return forBackup[i].ID < forBackup[j].ID
	})

	sh, err := file.AddSheet("DivIcon")
	if err != nil {
		log.Panic("Cannot add XL file", err.Error())
	}
	_ = sh

	row := sh.AddRow()
	row.WriteSlice(&DivIcon_Fields, -1)
	for _, diviconDB := range forBackup {

		var diviconWOP DivIconWOP
		diviconDB.CopyBasicFieldsToDivIconWOP(&diviconWOP)

		row := sh.AddRow()
		row.WriteStruct(&diviconWOP, -1)
	}
}

// RestoreXL from the "DivIcon" sheet all DivIconDB instances
func (backRepoDivIcon *BackRepoDivIconStruct) RestoreXLPhaseOne(file *xlsx.File) {

	// resets the map
	BackRepoDivIconid_atBckpTime_newID = make(map[uint]uint)

	sh, ok := file.Sheet["DivIcon"]
	_ = sh
	if !ok {
		log.Panic(errors.New("sheet not found"))
	}

	// log.Println("Max row is", sh.MaxRow)
	err := sh.ForEachRow(backRepoDivIcon.rowVisitorDivIcon)
	if err != nil {
		log.Panic("Err=", err)
	}
}

func (backRepoDivIcon *BackRepoDivIconStruct) rowVisitorDivIcon(row *xlsx.Row) error {

	log.Printf("row line %d\n", row.GetCoordinate())
	log.Println(row)

	// skip first line
	if row.GetCoordinate() > 0 {
		var diviconWOP DivIconWOP
		row.ReadStruct(&diviconWOP)

		// add the unmarshalled struct to the stage
		diviconDB := new(DivIconDB)
		diviconDB.CopyBasicFieldsFromDivIconWOP(&diviconWOP)

		diviconDB_ID_atBackupTime := diviconDB.ID
		diviconDB.ID = 0
		query := backRepoDivIcon.db.Create(diviconDB)
		if query.Error != nil {
			log.Panic(query.Error)
		}
		(*backRepoDivIcon.Map_DivIconDBID_DivIconDB)[diviconDB.ID] = diviconDB
		BackRepoDivIconid_atBckpTime_newID[diviconDB_ID_atBackupTime] = diviconDB.ID
	}
	return nil
}

// RestorePhaseOne read the file "DivIconDB.json" in dirPath that stores an array
// of DivIconDB and stores it in the database
// the map BackRepoDivIconid_atBckpTime_newID is updated accordingly
func (backRepoDivIcon *BackRepoDivIconStruct) RestorePhaseOne(dirPath string) {

	// resets the map
	BackRepoDivIconid_atBckpTime_newID = make(map[uint]uint)

	filename := filepath.Join(dirPath, "DivIconDB.json")
	jsonFile, err := os.Open(filename)
	// if we os.Open returns an error then handle it
	if err != nil {
		log.Panic("Cannot restore/open the json DivIcon file", filename, " ", err.Error())
	}

	// read our opened jsonFile as a byte array.
	byteValue, _ := ioutil.ReadAll(jsonFile)

	var forRestore []*DivIconDB

	err = json.Unmarshal(byteValue, &forRestore)

	// fill up Map_DivIconDBID_DivIconDB
	for _, diviconDB := range forRestore {

		diviconDB_ID_atBackupTime := diviconDB.ID
		diviconDB.ID = 0
		query := backRepoDivIcon.db.Create(diviconDB)
		if query.Error != nil {
			log.Panic(query.Error)
		}
		(*backRepoDivIcon.Map_DivIconDBID_DivIconDB)[diviconDB.ID] = diviconDB
		BackRepoDivIconid_atBckpTime_newID[diviconDB_ID_atBackupTime] = diviconDB.ID
	}

	if err != nil {
		log.Panic("Cannot restore/unmarshall json DivIcon file", err.Error())
	}
}

// RestorePhaseTwo uses all map BackRepo<DivIcon>id_atBckpTime_newID
// to compute new index
func (backRepoDivIcon *BackRepoDivIconStruct) RestorePhaseTwo() {

	for _, diviconDB := range *backRepoDivIcon.Map_DivIconDBID_DivIconDB {

		// next line of code is to avert unused variable compilation error
		_ = diviconDB

		// insertion point for reindexing pointers encoding
		// update databse with new index encoding
		query := backRepoDivIcon.db.Model(diviconDB).Updates(*diviconDB)
		if query.Error != nil {
			log.Panic(query.Error)
		}
	}

}

// this field is used during the restauration process.
// it stores the ID at the backup time and is used for renumbering
var BackRepoDivIconid_atBckpTime_newID map[uint]uint
