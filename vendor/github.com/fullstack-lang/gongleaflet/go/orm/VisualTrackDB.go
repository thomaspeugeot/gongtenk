// generated by stacks/gong/go/models/orm_file_per_struct_back_repo.go
package orm

import (
	"database/sql"
	"encoding/json"
	"errors"
	"fmt"
	"io/ioutil"
	"log"
	"os"
	"path/filepath"
	"sort"
	"time"

	"gorm.io/gorm"

	"github.com/tealeg/xlsx/v3"

	"github.com/fullstack-lang/gongleaflet/go/models"
)

// dummy variable to have the import declaration wihthout compile failure (even if no code needing this import is generated)
var dummy_VisualTrack_sql sql.NullBool
var dummy_VisualTrack_time time.Duration
var dummy_VisualTrack_sort sort.Float64Slice

// VisualTrackAPI is the input in POST API
//
// for POST, API, one needs the fields of the model as well as the fields
// from associations ("Has One" and "Has Many") that are generated to
// fullfill the ORM requirements for associations
//
// swagger:model visualtrackAPI
type VisualTrackAPI struct {
	gorm.Model

	models.VisualTrack

	// encoding of pointers
	VisualTrackPointersEnconding
}

// VisualTrackPointersEnconding encodes pointers to Struct and
// reverse pointers of slice of poitners to Struct
type VisualTrackPointersEnconding struct {
	// insertion for pointer fields encoding declaration

	// field LayerGroup is a pointer to another Struct (optional or 0..1)
	// This field is generated into another field to enable AS ONE association
	LayerGroupID sql.NullInt64

	// field DivIcon is a pointer to another Struct (optional or 0..1)
	// This field is generated into another field to enable AS ONE association
	DivIconID sql.NullInt64
}

// VisualTrackDB describes a visualtrack in the database
//
// It incorporates the GORM ID, basic fields from the model (because they can be serialized),
// the encoded version of pointers
//
// swagger:model visualtrackDB
type VisualTrackDB struct {
	gorm.Model

	// insertion for basic fields declaration

	// Declation for basic field visualtrackDB.Lat {{BasicKind}} (to be completed)
	Lat_Data sql.NullFloat64

	// Declation for basic field visualtrackDB.Lng {{BasicKind}} (to be completed)
	Lng_Data sql.NullFloat64

	// Declation for basic field visualtrackDB.Heading {{BasicKind}} (to be completed)
	Heading_Data sql.NullFloat64

	// Declation for basic field visualtrackDB.Level {{BasicKind}} (to be completed)
	Level_Data sql.NullFloat64

	// Declation for basic field visualtrackDB.Speed {{BasicKind}} (to be completed)
	Speed_Data sql.NullFloat64

	// Declation for basic field visualtrackDB.VerticalSpeed {{BasicKind}} (to be completed)
	VerticalSpeed_Data sql.NullFloat64

	// Declation for basic field visualtrackDB.Name {{BasicKind}} (to be completed)
	Name_Data sql.NullString

	// Declation for basic field visualtrackDB.ColorEnum {{BasicKind}} (to be completed)
	ColorEnum_Data sql.NullString

	// Declation for basic field visualtrackDB.DisplayTrackHistory bool (to be completed)
	// provide the sql storage for the boolan
	DisplayTrackHistory_Data sql.NullBool

	// Declation for basic field visualtrackDB.DisplayLevelAndSpeed bool (to be completed)
	// provide the sql storage for the boolan
	DisplayLevelAndSpeed_Data sql.NullBool
	// encoding of pointers
	VisualTrackPointersEnconding
}

// VisualTrackDBs arrays visualtrackDBs
// swagger:response visualtrackDBsResponse
type VisualTrackDBs []VisualTrackDB

// VisualTrackDBResponse provides response
// swagger:response visualtrackDBResponse
type VisualTrackDBResponse struct {
	VisualTrackDB
}

// VisualTrackWOP is a VisualTrack without pointers (WOP is an acronym for "Without Pointers")
// it holds the same basic fields but pointers are encoded into uint
type VisualTrackWOP struct {
	ID int `xlsx:"0"`

	// insertion for WOP basic fields

	Lat float64 `xlsx:"1"`

	Lng float64 `xlsx:"2"`

	Heading float64 `xlsx:"3"`

	Level float64 `xlsx:"4"`

	Speed float64 `xlsx:"5"`

	VerticalSpeed float64 `xlsx:"6"`

	Name string `xlsx:"7"`

	ColorEnum models.ColorEnum `xlsx:"8"`

	DisplayTrackHistory bool `xlsx:"9"`

	DisplayLevelAndSpeed bool `xlsx:"10"`
	// insertion for WOP pointer fields
}

var VisualTrack_Fields = []string{
	// insertion for WOP basic fields
	"ID",
	"Lat",
	"Lng",
	"Heading",
	"Level",
	"Speed",
	"VerticalSpeed",
	"Name",
	"ColorEnum",
	"DisplayTrackHistory",
	"DisplayLevelAndSpeed",
}

type BackRepoVisualTrackStruct struct {
	// stores VisualTrackDB according to their gorm ID
	Map_VisualTrackDBID_VisualTrackDB *map[uint]*VisualTrackDB

	// stores VisualTrackDB ID according to VisualTrack address
	Map_VisualTrackPtr_VisualTrackDBID *map[*models.VisualTrack]uint

	// stores VisualTrack according to their gorm ID
	Map_VisualTrackDBID_VisualTrackPtr *map[uint]*models.VisualTrack

	db *gorm.DB
}

func (backRepoVisualTrack *BackRepoVisualTrackStruct) GetDB() *gorm.DB {
	return backRepoVisualTrack.db
}

// GetVisualTrackDBFromVisualTrackPtr is a handy function to access the back repo instance from the stage instance
func (backRepoVisualTrack *BackRepoVisualTrackStruct) GetVisualTrackDBFromVisualTrackPtr(visualtrack *models.VisualTrack) (visualtrackDB *VisualTrackDB) {
	id := (*backRepoVisualTrack.Map_VisualTrackPtr_VisualTrackDBID)[visualtrack]
	visualtrackDB = (*backRepoVisualTrack.Map_VisualTrackDBID_VisualTrackDB)[id]
	return
}

// BackRepoVisualTrack.Init set up the BackRepo of the VisualTrack
func (backRepoVisualTrack *BackRepoVisualTrackStruct) Init(db *gorm.DB) (Error error) {

	if backRepoVisualTrack.Map_VisualTrackDBID_VisualTrackPtr != nil {
		err := errors.New("In Init, backRepoVisualTrack.Map_VisualTrackDBID_VisualTrackPtr should be nil")
		return err
	}

	if backRepoVisualTrack.Map_VisualTrackDBID_VisualTrackDB != nil {
		err := errors.New("In Init, backRepoVisualTrack.Map_VisualTrackDBID_VisualTrackDB should be nil")
		return err
	}

	if backRepoVisualTrack.Map_VisualTrackPtr_VisualTrackDBID != nil {
		err := errors.New("In Init, backRepoVisualTrack.Map_VisualTrackPtr_VisualTrackDBID should be nil")
		return err
	}

	tmp := make(map[uint]*models.VisualTrack, 0)
	backRepoVisualTrack.Map_VisualTrackDBID_VisualTrackPtr = &tmp

	tmpDB := make(map[uint]*VisualTrackDB, 0)
	backRepoVisualTrack.Map_VisualTrackDBID_VisualTrackDB = &tmpDB

	tmpID := make(map[*models.VisualTrack]uint, 0)
	backRepoVisualTrack.Map_VisualTrackPtr_VisualTrackDBID = &tmpID

	backRepoVisualTrack.db = db
	return
}

// BackRepoVisualTrack.CommitPhaseOne commits all staged instances of VisualTrack to the BackRepo
// Phase One is the creation of instance in the database if it is not yet done to get the unique ID for each staged instance
func (backRepoVisualTrack *BackRepoVisualTrackStruct) CommitPhaseOne(stage *models.StageStruct) (Error error) {

	for visualtrack := range stage.VisualTracks {
		backRepoVisualTrack.CommitPhaseOneInstance(visualtrack)
	}

	// parse all backRepo instance and checks wether some instance have been unstaged
	// in this case, remove them from the back repo
	for id, visualtrack := range *backRepoVisualTrack.Map_VisualTrackDBID_VisualTrackPtr {
		if _, ok := stage.VisualTracks[visualtrack]; !ok {
			backRepoVisualTrack.CommitDeleteInstance(id)
		}
	}

	return
}

// BackRepoVisualTrack.CommitDeleteInstance commits deletion of VisualTrack to the BackRepo
func (backRepoVisualTrack *BackRepoVisualTrackStruct) CommitDeleteInstance(id uint) (Error error) {

	visualtrack := (*backRepoVisualTrack.Map_VisualTrackDBID_VisualTrackPtr)[id]

	// visualtrack is not staged anymore, remove visualtrackDB
	visualtrackDB := (*backRepoVisualTrack.Map_VisualTrackDBID_VisualTrackDB)[id]
	query := backRepoVisualTrack.db.Unscoped().Delete(&visualtrackDB)
	if query.Error != nil {
		return query.Error
	}

	// update stores
	delete((*backRepoVisualTrack.Map_VisualTrackPtr_VisualTrackDBID), visualtrack)
	delete((*backRepoVisualTrack.Map_VisualTrackDBID_VisualTrackPtr), id)
	delete((*backRepoVisualTrack.Map_VisualTrackDBID_VisualTrackDB), id)

	return
}

// BackRepoVisualTrack.CommitPhaseOneInstance commits visualtrack staged instances of VisualTrack to the BackRepo
// Phase One is the creation of instance in the database if it is not yet done to get the unique ID for each staged instance
func (backRepoVisualTrack *BackRepoVisualTrackStruct) CommitPhaseOneInstance(visualtrack *models.VisualTrack) (Error error) {

	// check if the visualtrack is not commited yet
	if _, ok := (*backRepoVisualTrack.Map_VisualTrackPtr_VisualTrackDBID)[visualtrack]; ok {
		return
	}

	// initiate visualtrack
	var visualtrackDB VisualTrackDB
	visualtrackDB.CopyBasicFieldsFromVisualTrack(visualtrack)

	query := backRepoVisualTrack.db.Create(&visualtrackDB)
	if query.Error != nil {
		return query.Error
	}

	// update stores
	(*backRepoVisualTrack.Map_VisualTrackPtr_VisualTrackDBID)[visualtrack] = visualtrackDB.ID
	(*backRepoVisualTrack.Map_VisualTrackDBID_VisualTrackPtr)[visualtrackDB.ID] = visualtrack
	(*backRepoVisualTrack.Map_VisualTrackDBID_VisualTrackDB)[visualtrackDB.ID] = &visualtrackDB

	return
}

// BackRepoVisualTrack.CommitPhaseTwo commits all staged instances of VisualTrack to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoVisualTrack *BackRepoVisualTrackStruct) CommitPhaseTwo(backRepo *BackRepoStruct) (Error error) {

	for idx, visualtrack := range *backRepoVisualTrack.Map_VisualTrackDBID_VisualTrackPtr {
		backRepoVisualTrack.CommitPhaseTwoInstance(backRepo, idx, visualtrack)
	}

	return
}

// BackRepoVisualTrack.CommitPhaseTwoInstance commits {{structname }} of models.VisualTrack to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoVisualTrack *BackRepoVisualTrackStruct) CommitPhaseTwoInstance(backRepo *BackRepoStruct, idx uint, visualtrack *models.VisualTrack) (Error error) {

	// fetch matching visualtrackDB
	if visualtrackDB, ok := (*backRepoVisualTrack.Map_VisualTrackDBID_VisualTrackDB)[idx]; ok {

		visualtrackDB.CopyBasicFieldsFromVisualTrack(visualtrack)

		// insertion point for translating pointers encodings into actual pointers
		// commit pointer value visualtrack.LayerGroup translates to updating the visualtrack.LayerGroupID
		visualtrackDB.LayerGroupID.Valid = true // allow for a 0 value (nil association)
		if visualtrack.LayerGroup != nil {
			if LayerGroupId, ok := (*backRepo.BackRepoLayerGroup.Map_LayerGroupPtr_LayerGroupDBID)[visualtrack.LayerGroup]; ok {
				visualtrackDB.LayerGroupID.Int64 = int64(LayerGroupId)
				visualtrackDB.LayerGroupID.Valid = true
			}
		}

		// commit pointer value visualtrack.DivIcon translates to updating the visualtrack.DivIconID
		visualtrackDB.DivIconID.Valid = true // allow for a 0 value (nil association)
		if visualtrack.DivIcon != nil {
			if DivIconId, ok := (*backRepo.BackRepoDivIcon.Map_DivIconPtr_DivIconDBID)[visualtrack.DivIcon]; ok {
				visualtrackDB.DivIconID.Int64 = int64(DivIconId)
				visualtrackDB.DivIconID.Valid = true
			}
		}

		query := backRepoVisualTrack.db.Save(&visualtrackDB)
		if query.Error != nil {
			return query.Error
		}

	} else {
		err := errors.New(
			fmt.Sprintf("Unkown VisualTrack intance %s", visualtrack.Name))
		return err
	}

	return
}

// BackRepoVisualTrack.CheckoutPhaseOne Checkouts all BackRepo instances to the Stage
//
// Phase One will result in having instances on the stage aligned with the back repo
// pointers are not initialized yet (this is for pahse two)
//
func (backRepoVisualTrack *BackRepoVisualTrackStruct) CheckoutPhaseOne() (Error error) {

	visualtrackDBArray := make([]VisualTrackDB, 0)
	query := backRepoVisualTrack.db.Find(&visualtrackDBArray)
	if query.Error != nil {
		return query.Error
	}

	// list of instances to be removed
	// start from the initial map on the stage and remove instances that have been checked out
	visualtrackInstancesToBeRemovedFromTheStage := make(map[*models.VisualTrack]struct{})
	for key, value := range models.Stage.VisualTracks {
		visualtrackInstancesToBeRemovedFromTheStage[key] = value
	}

	// copy orm objects to the the map
	for _, visualtrackDB := range visualtrackDBArray {
		backRepoVisualTrack.CheckoutPhaseOneInstance(&visualtrackDB)

		// do not remove this instance from the stage, therefore
		// remove instance from the list of instances to be be removed from the stage
		visualtrack, ok := (*backRepoVisualTrack.Map_VisualTrackDBID_VisualTrackPtr)[visualtrackDB.ID]
		if ok {
			delete(visualtrackInstancesToBeRemovedFromTheStage, visualtrack)
		}
	}

	// remove from stage and back repo's 3 maps all visualtracks that are not in the checkout
	for visualtrack := range visualtrackInstancesToBeRemovedFromTheStage {
		visualtrack.Unstage()

		// remove instance from the back repo 3 maps
		visualtrackID := (*backRepoVisualTrack.Map_VisualTrackPtr_VisualTrackDBID)[visualtrack]
		delete((*backRepoVisualTrack.Map_VisualTrackPtr_VisualTrackDBID), visualtrack)
		delete((*backRepoVisualTrack.Map_VisualTrackDBID_VisualTrackDB), visualtrackID)
		delete((*backRepoVisualTrack.Map_VisualTrackDBID_VisualTrackPtr), visualtrackID)
	}

	return
}

// CheckoutPhaseOneInstance takes a visualtrackDB that has been found in the DB, updates the backRepo and stages the
// models version of the visualtrackDB
func (backRepoVisualTrack *BackRepoVisualTrackStruct) CheckoutPhaseOneInstance(visualtrackDB *VisualTrackDB) (Error error) {

	visualtrack, ok := (*backRepoVisualTrack.Map_VisualTrackDBID_VisualTrackPtr)[visualtrackDB.ID]
	if !ok {
		visualtrack = new(models.VisualTrack)

		(*backRepoVisualTrack.Map_VisualTrackDBID_VisualTrackPtr)[visualtrackDB.ID] = visualtrack
		(*backRepoVisualTrack.Map_VisualTrackPtr_VisualTrackDBID)[visualtrack] = visualtrackDB.ID

		// append model store with the new element
		visualtrack.Name = visualtrackDB.Name_Data.String
		visualtrack.Stage()
	}
	visualtrackDB.CopyBasicFieldsToVisualTrack(visualtrack)

	// preserve pointer to visualtrackDB. Otherwise, pointer will is recycled and the map of pointers
	// Map_VisualTrackDBID_VisualTrackDB)[visualtrackDB hold variable pointers
	visualtrackDB_Data := *visualtrackDB
	preservedPtrToVisualTrack := &visualtrackDB_Data
	(*backRepoVisualTrack.Map_VisualTrackDBID_VisualTrackDB)[visualtrackDB.ID] = preservedPtrToVisualTrack

	return
}

// BackRepoVisualTrack.CheckoutPhaseTwo Checkouts all staged instances of VisualTrack to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoVisualTrack *BackRepoVisualTrackStruct) CheckoutPhaseTwo(backRepo *BackRepoStruct) (Error error) {

	// parse all DB instance and update all pointer fields of the translated models instance
	for _, visualtrackDB := range *backRepoVisualTrack.Map_VisualTrackDBID_VisualTrackDB {
		backRepoVisualTrack.CheckoutPhaseTwoInstance(backRepo, visualtrackDB)
	}
	return
}

// BackRepoVisualTrack.CheckoutPhaseTwoInstance Checkouts staged instances of VisualTrack to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoVisualTrack *BackRepoVisualTrackStruct) CheckoutPhaseTwoInstance(backRepo *BackRepoStruct, visualtrackDB *VisualTrackDB) (Error error) {

	visualtrack := (*backRepoVisualTrack.Map_VisualTrackDBID_VisualTrackPtr)[visualtrackDB.ID]
	_ = visualtrack // sometimes, there is no code generated. This lines voids the "unused variable" compilation error

	// insertion point for checkout of pointer encoding
	// LayerGroup field
	if visualtrackDB.LayerGroupID.Int64 != 0 {
		visualtrack.LayerGroup = (*backRepo.BackRepoLayerGroup.Map_LayerGroupDBID_LayerGroupPtr)[uint(visualtrackDB.LayerGroupID.Int64)]
	}
	// DivIcon field
	if visualtrackDB.DivIconID.Int64 != 0 {
		visualtrack.DivIcon = (*backRepo.BackRepoDivIcon.Map_DivIconDBID_DivIconPtr)[uint(visualtrackDB.DivIconID.Int64)]
	}
	return
}

// CommitVisualTrack allows commit of a single visualtrack (if already staged)
func (backRepo *BackRepoStruct) CommitVisualTrack(visualtrack *models.VisualTrack) {
	backRepo.BackRepoVisualTrack.CommitPhaseOneInstance(visualtrack)
	if id, ok := (*backRepo.BackRepoVisualTrack.Map_VisualTrackPtr_VisualTrackDBID)[visualtrack]; ok {
		backRepo.BackRepoVisualTrack.CommitPhaseTwoInstance(backRepo, id, visualtrack)
	}
}

// CommitVisualTrack allows checkout of a single visualtrack (if already staged and with a BackRepo id)
func (backRepo *BackRepoStruct) CheckoutVisualTrack(visualtrack *models.VisualTrack) {
	// check if the visualtrack is staged
	if _, ok := (*backRepo.BackRepoVisualTrack.Map_VisualTrackPtr_VisualTrackDBID)[visualtrack]; ok {

		if id, ok := (*backRepo.BackRepoVisualTrack.Map_VisualTrackPtr_VisualTrackDBID)[visualtrack]; ok {
			var visualtrackDB VisualTrackDB
			visualtrackDB.ID = id

			if err := backRepo.BackRepoVisualTrack.db.First(&visualtrackDB, id).Error; err != nil {
				log.Panicln("CheckoutVisualTrack : Problem with getting object with id:", id)
			}
			backRepo.BackRepoVisualTrack.CheckoutPhaseOneInstance(&visualtrackDB)
			backRepo.BackRepoVisualTrack.CheckoutPhaseTwoInstance(backRepo, &visualtrackDB)
		}
	}
}

// CopyBasicFieldsFromVisualTrack
func (visualtrackDB *VisualTrackDB) CopyBasicFieldsFromVisualTrack(visualtrack *models.VisualTrack) {
	// insertion point for fields commit

	visualtrackDB.Lat_Data.Float64 = visualtrack.Lat
	visualtrackDB.Lat_Data.Valid = true

	visualtrackDB.Lng_Data.Float64 = visualtrack.Lng
	visualtrackDB.Lng_Data.Valid = true

	visualtrackDB.Heading_Data.Float64 = visualtrack.Heading
	visualtrackDB.Heading_Data.Valid = true

	visualtrackDB.Level_Data.Float64 = visualtrack.Level
	visualtrackDB.Level_Data.Valid = true

	visualtrackDB.Speed_Data.Float64 = visualtrack.Speed
	visualtrackDB.Speed_Data.Valid = true

	visualtrackDB.VerticalSpeed_Data.Float64 = visualtrack.VerticalSpeed
	visualtrackDB.VerticalSpeed_Data.Valid = true

	visualtrackDB.Name_Data.String = visualtrack.Name
	visualtrackDB.Name_Data.Valid = true

	visualtrackDB.ColorEnum_Data.String = string(visualtrack.ColorEnum)
	visualtrackDB.ColorEnum_Data.Valid = true

	visualtrackDB.DisplayTrackHistory_Data.Bool = visualtrack.DisplayTrackHistory
	visualtrackDB.DisplayTrackHistory_Data.Valid = true

	visualtrackDB.DisplayLevelAndSpeed_Data.Bool = visualtrack.DisplayLevelAndSpeed
	visualtrackDB.DisplayLevelAndSpeed_Data.Valid = true
}

// CopyBasicFieldsFromVisualTrackWOP
func (visualtrackDB *VisualTrackDB) CopyBasicFieldsFromVisualTrackWOP(visualtrack *VisualTrackWOP) {
	// insertion point for fields commit

	visualtrackDB.Lat_Data.Float64 = visualtrack.Lat
	visualtrackDB.Lat_Data.Valid = true

	visualtrackDB.Lng_Data.Float64 = visualtrack.Lng
	visualtrackDB.Lng_Data.Valid = true

	visualtrackDB.Heading_Data.Float64 = visualtrack.Heading
	visualtrackDB.Heading_Data.Valid = true

	visualtrackDB.Level_Data.Float64 = visualtrack.Level
	visualtrackDB.Level_Data.Valid = true

	visualtrackDB.Speed_Data.Float64 = visualtrack.Speed
	visualtrackDB.Speed_Data.Valid = true

	visualtrackDB.VerticalSpeed_Data.Float64 = visualtrack.VerticalSpeed
	visualtrackDB.VerticalSpeed_Data.Valid = true

	visualtrackDB.Name_Data.String = visualtrack.Name
	visualtrackDB.Name_Data.Valid = true

	visualtrackDB.ColorEnum_Data.String = string(visualtrack.ColorEnum)
	visualtrackDB.ColorEnum_Data.Valid = true

	visualtrackDB.DisplayTrackHistory_Data.Bool = visualtrack.DisplayTrackHistory
	visualtrackDB.DisplayTrackHistory_Data.Valid = true

	visualtrackDB.DisplayLevelAndSpeed_Data.Bool = visualtrack.DisplayLevelAndSpeed
	visualtrackDB.DisplayLevelAndSpeed_Data.Valid = true
}

// CopyBasicFieldsToVisualTrack
func (visualtrackDB *VisualTrackDB) CopyBasicFieldsToVisualTrack(visualtrack *models.VisualTrack) {
	// insertion point for checkout of basic fields (back repo to stage)
	visualtrack.Lat = visualtrackDB.Lat_Data.Float64
	visualtrack.Lng = visualtrackDB.Lng_Data.Float64
	visualtrack.Heading = visualtrackDB.Heading_Data.Float64
	visualtrack.Level = visualtrackDB.Level_Data.Float64
	visualtrack.Speed = visualtrackDB.Speed_Data.Float64
	visualtrack.VerticalSpeed = visualtrackDB.VerticalSpeed_Data.Float64
	visualtrack.Name = visualtrackDB.Name_Data.String
	visualtrack.ColorEnum = models.ColorEnum(visualtrackDB.ColorEnum_Data.String)
	visualtrack.DisplayTrackHistory = visualtrackDB.DisplayTrackHistory_Data.Bool
	visualtrack.DisplayLevelAndSpeed = visualtrackDB.DisplayLevelAndSpeed_Data.Bool
}

// CopyBasicFieldsToVisualTrackWOP
func (visualtrackDB *VisualTrackDB) CopyBasicFieldsToVisualTrackWOP(visualtrack *VisualTrackWOP) {
	visualtrack.ID = int(visualtrackDB.ID)
	// insertion point for checkout of basic fields (back repo to stage)
	visualtrack.Lat = visualtrackDB.Lat_Data.Float64
	visualtrack.Lng = visualtrackDB.Lng_Data.Float64
	visualtrack.Heading = visualtrackDB.Heading_Data.Float64
	visualtrack.Level = visualtrackDB.Level_Data.Float64
	visualtrack.Speed = visualtrackDB.Speed_Data.Float64
	visualtrack.VerticalSpeed = visualtrackDB.VerticalSpeed_Data.Float64
	visualtrack.Name = visualtrackDB.Name_Data.String
	visualtrack.ColorEnum = models.ColorEnum(visualtrackDB.ColorEnum_Data.String)
	visualtrack.DisplayTrackHistory = visualtrackDB.DisplayTrackHistory_Data.Bool
	visualtrack.DisplayLevelAndSpeed = visualtrackDB.DisplayLevelAndSpeed_Data.Bool
}

// Backup generates a json file from a slice of all VisualTrackDB instances in the backrepo
func (backRepoVisualTrack *BackRepoVisualTrackStruct) Backup(dirPath string) {

	filename := filepath.Join(dirPath, "VisualTrackDB.json")

	// organize the map into an array with increasing IDs, in order to have repoductible
	// backup file
	forBackup := make([]*VisualTrackDB, 0)
	for _, visualtrackDB := range *backRepoVisualTrack.Map_VisualTrackDBID_VisualTrackDB {
		forBackup = append(forBackup, visualtrackDB)
	}

	sort.Slice(forBackup[:], func(i, j int) bool {
		return forBackup[i].ID < forBackup[j].ID
	})

	file, err := json.MarshalIndent(forBackup, "", " ")

	if err != nil {
		log.Panic("Cannot json VisualTrack ", filename, " ", err.Error())
	}

	err = ioutil.WriteFile(filename, file, 0644)
	if err != nil {
		log.Panic("Cannot write the json VisualTrack file", err.Error())
	}
}

// Backup generates a json file from a slice of all VisualTrackDB instances in the backrepo
func (backRepoVisualTrack *BackRepoVisualTrackStruct) BackupXL(file *xlsx.File) {

	// organize the map into an array with increasing IDs, in order to have repoductible
	// backup file
	forBackup := make([]*VisualTrackDB, 0)
	for _, visualtrackDB := range *backRepoVisualTrack.Map_VisualTrackDBID_VisualTrackDB {
		forBackup = append(forBackup, visualtrackDB)
	}

	sort.Slice(forBackup[:], func(i, j int) bool {
		return forBackup[i].ID < forBackup[j].ID
	})

	sh, err := file.AddSheet("VisualTrack")
	if err != nil {
		log.Panic("Cannot add XL file", err.Error())
	}
	_ = sh

	row := sh.AddRow()
	row.WriteSlice(&VisualTrack_Fields, -1)
	for _, visualtrackDB := range forBackup {

		var visualtrackWOP VisualTrackWOP
		visualtrackDB.CopyBasicFieldsToVisualTrackWOP(&visualtrackWOP)

		row := sh.AddRow()
		row.WriteStruct(&visualtrackWOP, -1)
	}
}

// RestoreXL from the "VisualTrack" sheet all VisualTrackDB instances
func (backRepoVisualTrack *BackRepoVisualTrackStruct) RestoreXLPhaseOne(file *xlsx.File) {

	// resets the map
	BackRepoVisualTrackid_atBckpTime_newID = make(map[uint]uint)

	sh, ok := file.Sheet["VisualTrack"]
	_ = sh
	if !ok {
		log.Panic(errors.New("sheet not found"))
	}

	// log.Println("Max row is", sh.MaxRow)
	err := sh.ForEachRow(backRepoVisualTrack.rowVisitorVisualTrack)
	if err != nil {
		log.Panic("Err=", err)
	}
}

func (backRepoVisualTrack *BackRepoVisualTrackStruct) rowVisitorVisualTrack(row *xlsx.Row) error {

	log.Printf("row line %d\n", row.GetCoordinate())
	log.Println(row)

	// skip first line
	if row.GetCoordinate() > 0 {
		var visualtrackWOP VisualTrackWOP
		row.ReadStruct(&visualtrackWOP)

		// add the unmarshalled struct to the stage
		visualtrackDB := new(VisualTrackDB)
		visualtrackDB.CopyBasicFieldsFromVisualTrackWOP(&visualtrackWOP)

		visualtrackDB_ID_atBackupTime := visualtrackDB.ID
		visualtrackDB.ID = 0
		query := backRepoVisualTrack.db.Create(visualtrackDB)
		if query.Error != nil {
			log.Panic(query.Error)
		}
		(*backRepoVisualTrack.Map_VisualTrackDBID_VisualTrackDB)[visualtrackDB.ID] = visualtrackDB
		BackRepoVisualTrackid_atBckpTime_newID[visualtrackDB_ID_atBackupTime] = visualtrackDB.ID
	}
	return nil
}

// RestorePhaseOne read the file "VisualTrackDB.json" in dirPath that stores an array
// of VisualTrackDB and stores it in the database
// the map BackRepoVisualTrackid_atBckpTime_newID is updated accordingly
func (backRepoVisualTrack *BackRepoVisualTrackStruct) RestorePhaseOne(dirPath string) {

	// resets the map
	BackRepoVisualTrackid_atBckpTime_newID = make(map[uint]uint)

	filename := filepath.Join(dirPath, "VisualTrackDB.json")
	jsonFile, err := os.Open(filename)
	// if we os.Open returns an error then handle it
	if err != nil {
		log.Panic("Cannot restore/open the json VisualTrack file", filename, " ", err.Error())
	}

	// read our opened jsonFile as a byte array.
	byteValue, _ := ioutil.ReadAll(jsonFile)

	var forRestore []*VisualTrackDB

	err = json.Unmarshal(byteValue, &forRestore)

	// fill up Map_VisualTrackDBID_VisualTrackDB
	for _, visualtrackDB := range forRestore {

		visualtrackDB_ID_atBackupTime := visualtrackDB.ID
		visualtrackDB.ID = 0
		query := backRepoVisualTrack.db.Create(visualtrackDB)
		if query.Error != nil {
			log.Panic(query.Error)
		}
		(*backRepoVisualTrack.Map_VisualTrackDBID_VisualTrackDB)[visualtrackDB.ID] = visualtrackDB
		BackRepoVisualTrackid_atBckpTime_newID[visualtrackDB_ID_atBackupTime] = visualtrackDB.ID
	}

	if err != nil {
		log.Panic("Cannot restore/unmarshall json VisualTrack file", err.Error())
	}
}

// RestorePhaseTwo uses all map BackRepo<VisualTrack>id_atBckpTime_newID
// to compute new index
func (backRepoVisualTrack *BackRepoVisualTrackStruct) RestorePhaseTwo() {

	for _, visualtrackDB := range *backRepoVisualTrack.Map_VisualTrackDBID_VisualTrackDB {

		// next line of code is to avert unused variable compilation error
		_ = visualtrackDB

		// insertion point for reindexing pointers encoding
		// reindexing LayerGroup field
		if visualtrackDB.LayerGroupID.Int64 != 0 {
			visualtrackDB.LayerGroupID.Int64 = int64(BackRepoLayerGroupid_atBckpTime_newID[uint(visualtrackDB.LayerGroupID.Int64)])
			visualtrackDB.LayerGroupID.Valid = true
		}

		// reindexing DivIcon field
		if visualtrackDB.DivIconID.Int64 != 0 {
			visualtrackDB.DivIconID.Int64 = int64(BackRepoDivIconid_atBckpTime_newID[uint(visualtrackDB.DivIconID.Int64)])
			visualtrackDB.DivIconID.Valid = true
		}

		// update databse with new index encoding
		query := backRepoVisualTrack.db.Model(visualtrackDB).Updates(*visualtrackDB)
		if query.Error != nil {
			log.Panic(query.Error)
		}
	}

}

// this field is used during the restauration process.
// it stores the ID at the backup time and is used for renumbering
var BackRepoVisualTrackid_atBckpTime_newID map[uint]uint
