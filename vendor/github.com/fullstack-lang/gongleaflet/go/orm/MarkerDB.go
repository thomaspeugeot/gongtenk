// generated by stacks/gong/go/models/orm_file_per_struct_back_repo.go
package orm

import (
	"database/sql"
	"encoding/json"
	"errors"
	"fmt"
	"io/ioutil"
	"log"
	"os"
	"path/filepath"
	"sort"
	"time"

	"gorm.io/gorm"

	"github.com/tealeg/xlsx/v3"

	"github.com/fullstack-lang/gongleaflet/go/models"
)

// dummy variable to have the import declaration wihthout compile failure (even if no code needing this import is generated)
var dummy_Marker_sql sql.NullBool
var dummy_Marker_time time.Duration
var dummy_Marker_sort sort.Float64Slice

// MarkerAPI is the input in POST API
//
// for POST, API, one needs the fields of the model as well as the fields
// from associations ("Has One" and "Has Many") that are generated to
// fullfill the ORM requirements for associations
//
// swagger:model markerAPI
type MarkerAPI struct {
	gorm.Model

	models.Marker

	// encoding of pointers
	MarkerPointersEnconding
}

// MarkerPointersEnconding encodes pointers to Struct and
// reverse pointers of slice of poitners to Struct
type MarkerPointersEnconding struct {
	// insertion for pointer fields encoding declaration

	// field LayerGroup is a pointer to another Struct (optional or 0..1)
	// This field is generated into another field to enable AS ONE association
	LayerGroupID sql.NullInt64

	// field DivIcon is a pointer to another Struct (optional or 0..1)
	// This field is generated into another field to enable AS ONE association
	DivIconID sql.NullInt64
}

// MarkerDB describes a marker in the database
//
// It incorporates the GORM ID, basic fields from the model (because they can be serialized),
// the encoded version of pointers
//
// swagger:model markerDB
type MarkerDB struct {
	gorm.Model

	// insertion for basic fields declaration

	// Declation for basic field markerDB.Lat {{BasicKind}} (to be completed)
	Lat_Data sql.NullFloat64

	// Declation for basic field markerDB.Lng {{BasicKind}} (to be completed)
	Lng_Data sql.NullFloat64

	// Declation for basic field markerDB.Name {{BasicKind}} (to be completed)
	Name_Data sql.NullString

	// Declation for basic field markerDB.ColorEnum {{BasicKind}} (to be completed)
	ColorEnum_Data sql.NullString
	// encoding of pointers
	MarkerPointersEnconding
}

// MarkerDBs arrays markerDBs
// swagger:response markerDBsResponse
type MarkerDBs []MarkerDB

// MarkerDBResponse provides response
// swagger:response markerDBResponse
type MarkerDBResponse struct {
	MarkerDB
}

// MarkerWOP is a Marker without pointers (WOP is an acronym for "Without Pointers")
// it holds the same basic fields but pointers are encoded into uint
type MarkerWOP struct {
	ID int `xlsx:"0"`

	// insertion for WOP basic fields

	Lat float64 `xlsx:"1"`

	Lng float64 `xlsx:"2"`

	Name string `xlsx:"3"`

	ColorEnum models.ColorEnum `xlsx:"4"`
	// insertion for WOP pointer fields
}

var Marker_Fields = []string{
	// insertion for WOP basic fields
	"ID",
	"Lat",
	"Lng",
	"Name",
	"ColorEnum",
}

type BackRepoMarkerStruct struct {
	// stores MarkerDB according to their gorm ID
	Map_MarkerDBID_MarkerDB *map[uint]*MarkerDB

	// stores MarkerDB ID according to Marker address
	Map_MarkerPtr_MarkerDBID *map[*models.Marker]uint

	// stores Marker according to their gorm ID
	Map_MarkerDBID_MarkerPtr *map[uint]*models.Marker

	db *gorm.DB
}

func (backRepoMarker *BackRepoMarkerStruct) GetDB() *gorm.DB {
	return backRepoMarker.db
}

// GetMarkerDBFromMarkerPtr is a handy function to access the back repo instance from the stage instance
func (backRepoMarker *BackRepoMarkerStruct) GetMarkerDBFromMarkerPtr(marker *models.Marker) (markerDB *MarkerDB) {
	id := (*backRepoMarker.Map_MarkerPtr_MarkerDBID)[marker]
	markerDB = (*backRepoMarker.Map_MarkerDBID_MarkerDB)[id]
	return
}

// BackRepoMarker.Init set up the BackRepo of the Marker
func (backRepoMarker *BackRepoMarkerStruct) Init(db *gorm.DB) (Error error) {

	if backRepoMarker.Map_MarkerDBID_MarkerPtr != nil {
		err := errors.New("In Init, backRepoMarker.Map_MarkerDBID_MarkerPtr should be nil")
		return err
	}

	if backRepoMarker.Map_MarkerDBID_MarkerDB != nil {
		err := errors.New("In Init, backRepoMarker.Map_MarkerDBID_MarkerDB should be nil")
		return err
	}

	if backRepoMarker.Map_MarkerPtr_MarkerDBID != nil {
		err := errors.New("In Init, backRepoMarker.Map_MarkerPtr_MarkerDBID should be nil")
		return err
	}

	tmp := make(map[uint]*models.Marker, 0)
	backRepoMarker.Map_MarkerDBID_MarkerPtr = &tmp

	tmpDB := make(map[uint]*MarkerDB, 0)
	backRepoMarker.Map_MarkerDBID_MarkerDB = &tmpDB

	tmpID := make(map[*models.Marker]uint, 0)
	backRepoMarker.Map_MarkerPtr_MarkerDBID = &tmpID

	backRepoMarker.db = db
	return
}

// BackRepoMarker.CommitPhaseOne commits all staged instances of Marker to the BackRepo
// Phase One is the creation of instance in the database if it is not yet done to get the unique ID for each staged instance
func (backRepoMarker *BackRepoMarkerStruct) CommitPhaseOne(stage *models.StageStruct) (Error error) {

	for marker := range stage.Markers {
		backRepoMarker.CommitPhaseOneInstance(marker)
	}

	// parse all backRepo instance and checks wether some instance have been unstaged
	// in this case, remove them from the back repo
	for id, marker := range *backRepoMarker.Map_MarkerDBID_MarkerPtr {
		if _, ok := stage.Markers[marker]; !ok {
			backRepoMarker.CommitDeleteInstance(id)
		}
	}

	return
}

// BackRepoMarker.CommitDeleteInstance commits deletion of Marker to the BackRepo
func (backRepoMarker *BackRepoMarkerStruct) CommitDeleteInstance(id uint) (Error error) {

	marker := (*backRepoMarker.Map_MarkerDBID_MarkerPtr)[id]

	// marker is not staged anymore, remove markerDB
	markerDB := (*backRepoMarker.Map_MarkerDBID_MarkerDB)[id]
	query := backRepoMarker.db.Unscoped().Delete(&markerDB)
	if query.Error != nil {
		return query.Error
	}

	// update stores
	delete((*backRepoMarker.Map_MarkerPtr_MarkerDBID), marker)
	delete((*backRepoMarker.Map_MarkerDBID_MarkerPtr), id)
	delete((*backRepoMarker.Map_MarkerDBID_MarkerDB), id)

	return
}

// BackRepoMarker.CommitPhaseOneInstance commits marker staged instances of Marker to the BackRepo
// Phase One is the creation of instance in the database if it is not yet done to get the unique ID for each staged instance
func (backRepoMarker *BackRepoMarkerStruct) CommitPhaseOneInstance(marker *models.Marker) (Error error) {

	// check if the marker is not commited yet
	if _, ok := (*backRepoMarker.Map_MarkerPtr_MarkerDBID)[marker]; ok {
		return
	}

	// initiate marker
	var markerDB MarkerDB
	markerDB.CopyBasicFieldsFromMarker(marker)

	query := backRepoMarker.db.Create(&markerDB)
	if query.Error != nil {
		return query.Error
	}

	// update stores
	(*backRepoMarker.Map_MarkerPtr_MarkerDBID)[marker] = markerDB.ID
	(*backRepoMarker.Map_MarkerDBID_MarkerPtr)[markerDB.ID] = marker
	(*backRepoMarker.Map_MarkerDBID_MarkerDB)[markerDB.ID] = &markerDB

	return
}

// BackRepoMarker.CommitPhaseTwo commits all staged instances of Marker to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoMarker *BackRepoMarkerStruct) CommitPhaseTwo(backRepo *BackRepoStruct) (Error error) {

	for idx, marker := range *backRepoMarker.Map_MarkerDBID_MarkerPtr {
		backRepoMarker.CommitPhaseTwoInstance(backRepo, idx, marker)
	}

	return
}

// BackRepoMarker.CommitPhaseTwoInstance commits {{structname }} of models.Marker to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoMarker *BackRepoMarkerStruct) CommitPhaseTwoInstance(backRepo *BackRepoStruct, idx uint, marker *models.Marker) (Error error) {

	// fetch matching markerDB
	if markerDB, ok := (*backRepoMarker.Map_MarkerDBID_MarkerDB)[idx]; ok {

		markerDB.CopyBasicFieldsFromMarker(marker)

		// insertion point for translating pointers encodings into actual pointers
		// commit pointer value marker.LayerGroup translates to updating the marker.LayerGroupID
		markerDB.LayerGroupID.Valid = true // allow for a 0 value (nil association)
		if marker.LayerGroup != nil {
			if LayerGroupId, ok := (*backRepo.BackRepoLayerGroup.Map_LayerGroupPtr_LayerGroupDBID)[marker.LayerGroup]; ok {
				markerDB.LayerGroupID.Int64 = int64(LayerGroupId)
				markerDB.LayerGroupID.Valid = true
			}
		}

		// commit pointer value marker.DivIcon translates to updating the marker.DivIconID
		markerDB.DivIconID.Valid = true // allow for a 0 value (nil association)
		if marker.DivIcon != nil {
			if DivIconId, ok := (*backRepo.BackRepoDivIcon.Map_DivIconPtr_DivIconDBID)[marker.DivIcon]; ok {
				markerDB.DivIconID.Int64 = int64(DivIconId)
				markerDB.DivIconID.Valid = true
			}
		}

		query := backRepoMarker.db.Save(&markerDB)
		if query.Error != nil {
			return query.Error
		}

	} else {
		err := errors.New(
			fmt.Sprintf("Unkown Marker intance %s", marker.Name))
		return err
	}

	return
}

// BackRepoMarker.CheckoutPhaseOne Checkouts all BackRepo instances to the Stage
//
// Phase One will result in having instances on the stage aligned with the back repo
// pointers are not initialized yet (this is for pahse two)
//
func (backRepoMarker *BackRepoMarkerStruct) CheckoutPhaseOne() (Error error) {

	markerDBArray := make([]MarkerDB, 0)
	query := backRepoMarker.db.Find(&markerDBArray)
	if query.Error != nil {
		return query.Error
	}

	// list of instances to be removed
	// start from the initial map on the stage and remove instances that have been checked out
	markerInstancesToBeRemovedFromTheStage := make(map[*models.Marker]struct{})
	for key, value := range models.Stage.Markers {
		markerInstancesToBeRemovedFromTheStage[key] = value
	}

	// copy orm objects to the the map
	for _, markerDB := range markerDBArray {
		backRepoMarker.CheckoutPhaseOneInstance(&markerDB)

		// do not remove this instance from the stage, therefore
		// remove instance from the list of instances to be be removed from the stage
		marker, ok := (*backRepoMarker.Map_MarkerDBID_MarkerPtr)[markerDB.ID]
		if ok {
			delete(markerInstancesToBeRemovedFromTheStage, marker)
		}
	}

	// remove from stage and back repo's 3 maps all markers that are not in the checkout
	for marker := range markerInstancesToBeRemovedFromTheStage {
		marker.Unstage()

		// remove instance from the back repo 3 maps
		markerID := (*backRepoMarker.Map_MarkerPtr_MarkerDBID)[marker]
		delete((*backRepoMarker.Map_MarkerPtr_MarkerDBID), marker)
		delete((*backRepoMarker.Map_MarkerDBID_MarkerDB), markerID)
		delete((*backRepoMarker.Map_MarkerDBID_MarkerPtr), markerID)
	}

	return
}

// CheckoutPhaseOneInstance takes a markerDB that has been found in the DB, updates the backRepo and stages the
// models version of the markerDB
func (backRepoMarker *BackRepoMarkerStruct) CheckoutPhaseOneInstance(markerDB *MarkerDB) (Error error) {

	marker, ok := (*backRepoMarker.Map_MarkerDBID_MarkerPtr)[markerDB.ID]
	if !ok {
		marker = new(models.Marker)

		(*backRepoMarker.Map_MarkerDBID_MarkerPtr)[markerDB.ID] = marker
		(*backRepoMarker.Map_MarkerPtr_MarkerDBID)[marker] = markerDB.ID

		// append model store with the new element
		marker.Name = markerDB.Name_Data.String
		marker.Stage()
	}
	markerDB.CopyBasicFieldsToMarker(marker)

	// preserve pointer to markerDB. Otherwise, pointer will is recycled and the map of pointers
	// Map_MarkerDBID_MarkerDB)[markerDB hold variable pointers
	markerDB_Data := *markerDB
	preservedPtrToMarker := &markerDB_Data
	(*backRepoMarker.Map_MarkerDBID_MarkerDB)[markerDB.ID] = preservedPtrToMarker

	return
}

// BackRepoMarker.CheckoutPhaseTwo Checkouts all staged instances of Marker to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoMarker *BackRepoMarkerStruct) CheckoutPhaseTwo(backRepo *BackRepoStruct) (Error error) {

	// parse all DB instance and update all pointer fields of the translated models instance
	for _, markerDB := range *backRepoMarker.Map_MarkerDBID_MarkerDB {
		backRepoMarker.CheckoutPhaseTwoInstance(backRepo, markerDB)
	}
	return
}

// BackRepoMarker.CheckoutPhaseTwoInstance Checkouts staged instances of Marker to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoMarker *BackRepoMarkerStruct) CheckoutPhaseTwoInstance(backRepo *BackRepoStruct, markerDB *MarkerDB) (Error error) {

	marker := (*backRepoMarker.Map_MarkerDBID_MarkerPtr)[markerDB.ID]
	_ = marker // sometimes, there is no code generated. This lines voids the "unused variable" compilation error

	// insertion point for checkout of pointer encoding
	// LayerGroup field
	if markerDB.LayerGroupID.Int64 != 0 {
		marker.LayerGroup = (*backRepo.BackRepoLayerGroup.Map_LayerGroupDBID_LayerGroupPtr)[uint(markerDB.LayerGroupID.Int64)]
	}
	// DivIcon field
	if markerDB.DivIconID.Int64 != 0 {
		marker.DivIcon = (*backRepo.BackRepoDivIcon.Map_DivIconDBID_DivIconPtr)[uint(markerDB.DivIconID.Int64)]
	}
	return
}

// CommitMarker allows commit of a single marker (if already staged)
func (backRepo *BackRepoStruct) CommitMarker(marker *models.Marker) {
	backRepo.BackRepoMarker.CommitPhaseOneInstance(marker)
	if id, ok := (*backRepo.BackRepoMarker.Map_MarkerPtr_MarkerDBID)[marker]; ok {
		backRepo.BackRepoMarker.CommitPhaseTwoInstance(backRepo, id, marker)
	}
}

// CommitMarker allows checkout of a single marker (if already staged and with a BackRepo id)
func (backRepo *BackRepoStruct) CheckoutMarker(marker *models.Marker) {
	// check if the marker is staged
	if _, ok := (*backRepo.BackRepoMarker.Map_MarkerPtr_MarkerDBID)[marker]; ok {

		if id, ok := (*backRepo.BackRepoMarker.Map_MarkerPtr_MarkerDBID)[marker]; ok {
			var markerDB MarkerDB
			markerDB.ID = id

			if err := backRepo.BackRepoMarker.db.First(&markerDB, id).Error; err != nil {
				log.Panicln("CheckoutMarker : Problem with getting object with id:", id)
			}
			backRepo.BackRepoMarker.CheckoutPhaseOneInstance(&markerDB)
			backRepo.BackRepoMarker.CheckoutPhaseTwoInstance(backRepo, &markerDB)
		}
	}
}

// CopyBasicFieldsFromMarker
func (markerDB *MarkerDB) CopyBasicFieldsFromMarker(marker *models.Marker) {
	// insertion point for fields commit

	markerDB.Lat_Data.Float64 = marker.Lat
	markerDB.Lat_Data.Valid = true

	markerDB.Lng_Data.Float64 = marker.Lng
	markerDB.Lng_Data.Valid = true

	markerDB.Name_Data.String = marker.Name
	markerDB.Name_Data.Valid = true

	markerDB.ColorEnum_Data.String = string(marker.ColorEnum)
	markerDB.ColorEnum_Data.Valid = true
}

// CopyBasicFieldsFromMarkerWOP
func (markerDB *MarkerDB) CopyBasicFieldsFromMarkerWOP(marker *MarkerWOP) {
	// insertion point for fields commit

	markerDB.Lat_Data.Float64 = marker.Lat
	markerDB.Lat_Data.Valid = true

	markerDB.Lng_Data.Float64 = marker.Lng
	markerDB.Lng_Data.Valid = true

	markerDB.Name_Data.String = marker.Name
	markerDB.Name_Data.Valid = true

	markerDB.ColorEnum_Data.String = string(marker.ColorEnum)
	markerDB.ColorEnum_Data.Valid = true
}

// CopyBasicFieldsToMarker
func (markerDB *MarkerDB) CopyBasicFieldsToMarker(marker *models.Marker) {
	// insertion point for checkout of basic fields (back repo to stage)
	marker.Lat = markerDB.Lat_Data.Float64
	marker.Lng = markerDB.Lng_Data.Float64
	marker.Name = markerDB.Name_Data.String
	marker.ColorEnum = models.ColorEnum(markerDB.ColorEnum_Data.String)
}

// CopyBasicFieldsToMarkerWOP
func (markerDB *MarkerDB) CopyBasicFieldsToMarkerWOP(marker *MarkerWOP) {
	marker.ID = int(markerDB.ID)
	// insertion point for checkout of basic fields (back repo to stage)
	marker.Lat = markerDB.Lat_Data.Float64
	marker.Lng = markerDB.Lng_Data.Float64
	marker.Name = markerDB.Name_Data.String
	marker.ColorEnum = models.ColorEnum(markerDB.ColorEnum_Data.String)
}

// Backup generates a json file from a slice of all MarkerDB instances in the backrepo
func (backRepoMarker *BackRepoMarkerStruct) Backup(dirPath string) {

	filename := filepath.Join(dirPath, "MarkerDB.json")

	// organize the map into an array with increasing IDs, in order to have repoductible
	// backup file
	forBackup := make([]*MarkerDB, 0)
	for _, markerDB := range *backRepoMarker.Map_MarkerDBID_MarkerDB {
		forBackup = append(forBackup, markerDB)
	}

	sort.Slice(forBackup[:], func(i, j int) bool {
		return forBackup[i].ID < forBackup[j].ID
	})

	file, err := json.MarshalIndent(forBackup, "", " ")

	if err != nil {
		log.Panic("Cannot json Marker ", filename, " ", err.Error())
	}

	err = ioutil.WriteFile(filename, file, 0644)
	if err != nil {
		log.Panic("Cannot write the json Marker file", err.Error())
	}
}

// Backup generates a json file from a slice of all MarkerDB instances in the backrepo
func (backRepoMarker *BackRepoMarkerStruct) BackupXL(file *xlsx.File) {

	// organize the map into an array with increasing IDs, in order to have repoductible
	// backup file
	forBackup := make([]*MarkerDB, 0)
	for _, markerDB := range *backRepoMarker.Map_MarkerDBID_MarkerDB {
		forBackup = append(forBackup, markerDB)
	}

	sort.Slice(forBackup[:], func(i, j int) bool {
		return forBackup[i].ID < forBackup[j].ID
	})

	sh, err := file.AddSheet("Marker")
	if err != nil {
		log.Panic("Cannot add XL file", err.Error())
	}
	_ = sh

	row := sh.AddRow()
	row.WriteSlice(&Marker_Fields, -1)
	for _, markerDB := range forBackup {

		var markerWOP MarkerWOP
		markerDB.CopyBasicFieldsToMarkerWOP(&markerWOP)

		row := sh.AddRow()
		row.WriteStruct(&markerWOP, -1)
	}
}

// RestoreXL from the "Marker" sheet all MarkerDB instances
func (backRepoMarker *BackRepoMarkerStruct) RestoreXLPhaseOne(file *xlsx.File) {

	// resets the map
	BackRepoMarkerid_atBckpTime_newID = make(map[uint]uint)

	sh, ok := file.Sheet["Marker"]
	_ = sh
	if !ok {
		log.Panic(errors.New("sheet not found"))
	}

	// log.Println("Max row is", sh.MaxRow)
	err := sh.ForEachRow(backRepoMarker.rowVisitorMarker)
	if err != nil {
		log.Panic("Err=", err)
	}
}

func (backRepoMarker *BackRepoMarkerStruct) rowVisitorMarker(row *xlsx.Row) error {

	log.Printf("row line %d\n", row.GetCoordinate())
	log.Println(row)

	// skip first line
	if row.GetCoordinate() > 0 {
		var markerWOP MarkerWOP
		row.ReadStruct(&markerWOP)

		// add the unmarshalled struct to the stage
		markerDB := new(MarkerDB)
		markerDB.CopyBasicFieldsFromMarkerWOP(&markerWOP)

		markerDB_ID_atBackupTime := markerDB.ID
		markerDB.ID = 0
		query := backRepoMarker.db.Create(markerDB)
		if query.Error != nil {
			log.Panic(query.Error)
		}
		(*backRepoMarker.Map_MarkerDBID_MarkerDB)[markerDB.ID] = markerDB
		BackRepoMarkerid_atBckpTime_newID[markerDB_ID_atBackupTime] = markerDB.ID
	}
	return nil
}

// RestorePhaseOne read the file "MarkerDB.json" in dirPath that stores an array
// of MarkerDB and stores it in the database
// the map BackRepoMarkerid_atBckpTime_newID is updated accordingly
func (backRepoMarker *BackRepoMarkerStruct) RestorePhaseOne(dirPath string) {

	// resets the map
	BackRepoMarkerid_atBckpTime_newID = make(map[uint]uint)

	filename := filepath.Join(dirPath, "MarkerDB.json")
	jsonFile, err := os.Open(filename)
	// if we os.Open returns an error then handle it
	if err != nil {
		log.Panic("Cannot restore/open the json Marker file", filename, " ", err.Error())
	}

	// read our opened jsonFile as a byte array.
	byteValue, _ := ioutil.ReadAll(jsonFile)

	var forRestore []*MarkerDB

	err = json.Unmarshal(byteValue, &forRestore)

	// fill up Map_MarkerDBID_MarkerDB
	for _, markerDB := range forRestore {

		markerDB_ID_atBackupTime := markerDB.ID
		markerDB.ID = 0
		query := backRepoMarker.db.Create(markerDB)
		if query.Error != nil {
			log.Panic(query.Error)
		}
		(*backRepoMarker.Map_MarkerDBID_MarkerDB)[markerDB.ID] = markerDB
		BackRepoMarkerid_atBckpTime_newID[markerDB_ID_atBackupTime] = markerDB.ID
	}

	if err != nil {
		log.Panic("Cannot restore/unmarshall json Marker file", err.Error())
	}
}

// RestorePhaseTwo uses all map BackRepo<Marker>id_atBckpTime_newID
// to compute new index
func (backRepoMarker *BackRepoMarkerStruct) RestorePhaseTwo() {

	for _, markerDB := range *backRepoMarker.Map_MarkerDBID_MarkerDB {

		// next line of code is to avert unused variable compilation error
		_ = markerDB

		// insertion point for reindexing pointers encoding
		// reindexing LayerGroup field
		if markerDB.LayerGroupID.Int64 != 0 {
			markerDB.LayerGroupID.Int64 = int64(BackRepoLayerGroupid_atBckpTime_newID[uint(markerDB.LayerGroupID.Int64)])
			markerDB.LayerGroupID.Valid = true
		}

		// reindexing DivIcon field
		if markerDB.DivIconID.Int64 != 0 {
			markerDB.DivIconID.Int64 = int64(BackRepoDivIconid_atBckpTime_newID[uint(markerDB.DivIconID.Int64)])
			markerDB.DivIconID.Valid = true
		}

		// update databse with new index encoding
		query := backRepoMarker.db.Model(markerDB).Updates(*markerDB)
		if query.Error != nil {
			log.Panic(query.Error)
		}
	}

}

// this field is used during the restauration process.
// it stores the ID at the backup time and is used for renumbering
var BackRepoMarkerid_atBckpTime_newID map[uint]uint
