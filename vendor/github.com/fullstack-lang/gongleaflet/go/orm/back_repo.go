// generated by genORMTranslation.go
package orm

import (
	"bufio"
	"bytes"
	"io/ioutil"
	"log"
	"os"
	"path/filepath"

	"gorm.io/gorm"

	"github.com/fullstack-lang/gongleaflet/go/models"

	"github.com/tealeg/xlsx/v3"
)

// BackRepoStruct supports callback functions
type BackRepoStruct struct {
	// insertion point for per struct back repo declarations
	BackRepoCheckoutScheduler BackRepoCheckoutSchedulerStruct

	BackRepoCircle BackRepoCircleStruct

	BackRepoDivIcon BackRepoDivIconStruct

	BackRepoLayerGroup BackRepoLayerGroupStruct

	BackRepoLayerGroupUse BackRepoLayerGroupUseStruct

	BackRepoMapOptions BackRepoMapOptionsStruct

	BackRepoMarker BackRepoMarkerStruct

	BackRepoVLine BackRepoVLineStruct

	BackRepoVisualTrack BackRepoVisualTrackStruct

	CommitNb uint // this ng is updated at the BackRepo level but also at the BackRepo<GongStruct> level

	PushFromFrontNb uint // records increments from push from front
}

func (backRepo *BackRepoStruct) GetLastCommitNb() uint {
	return backRepo.CommitNb
}

func (backRepo *BackRepoStruct) GetLastPushFromFrontNb() uint {
	return backRepo.PushFromFrontNb
}

func (backRepo *BackRepoStruct) IncrementCommitNb() uint {
	if models.Stage.OnInitCommitCallback != nil {
		models.Stage.OnInitCommitCallback.BeforeCommit(&models.Stage)
	}
	backRepo.CommitNb = backRepo.CommitNb + 1
	return backRepo.CommitNb
}

func (backRepo *BackRepoStruct) IncrementPushFromFrontNb() uint {
	backRepo.PushFromFrontNb = backRepo.PushFromFrontNb + 1
	return backRepo.CommitNb
}

// Init the BackRepoStruct inner variables and link to the database
func (backRepo *BackRepoStruct) init(db *gorm.DB) {
	// insertion point for per struct back repo declarations
	backRepo.BackRepoCheckoutScheduler.Init(db)
	backRepo.BackRepoCircle.Init(db)
	backRepo.BackRepoDivIcon.Init(db)
	backRepo.BackRepoLayerGroup.Init(db)
	backRepo.BackRepoLayerGroupUse.Init(db)
	backRepo.BackRepoMapOptions.Init(db)
	backRepo.BackRepoMarker.Init(db)
	backRepo.BackRepoVLine.Init(db)
	backRepo.BackRepoVisualTrack.Init(db)

	models.Stage.BackRepo = backRepo
}

// Commit the BackRepoStruct inner variables and link to the database
func (backRepo *BackRepoStruct) Commit(stage *models.StageStruct) {
	// insertion point for per struct back repo phase one commit
	backRepo.BackRepoCheckoutScheduler.CommitPhaseOne(stage)
	backRepo.BackRepoCircle.CommitPhaseOne(stage)
	backRepo.BackRepoDivIcon.CommitPhaseOne(stage)
	backRepo.BackRepoLayerGroup.CommitPhaseOne(stage)
	backRepo.BackRepoLayerGroupUse.CommitPhaseOne(stage)
	backRepo.BackRepoMapOptions.CommitPhaseOne(stage)
	backRepo.BackRepoMarker.CommitPhaseOne(stage)
	backRepo.BackRepoVLine.CommitPhaseOne(stage)
	backRepo.BackRepoVisualTrack.CommitPhaseOne(stage)

	// insertion point for per struct back repo phase two commit
	backRepo.BackRepoCheckoutScheduler.CommitPhaseTwo(backRepo)
	backRepo.BackRepoCircle.CommitPhaseTwo(backRepo)
	backRepo.BackRepoDivIcon.CommitPhaseTwo(backRepo)
	backRepo.BackRepoLayerGroup.CommitPhaseTwo(backRepo)
	backRepo.BackRepoLayerGroupUse.CommitPhaseTwo(backRepo)
	backRepo.BackRepoMapOptions.CommitPhaseTwo(backRepo)
	backRepo.BackRepoMarker.CommitPhaseTwo(backRepo)
	backRepo.BackRepoVLine.CommitPhaseTwo(backRepo)
	backRepo.BackRepoVisualTrack.CommitPhaseTwo(backRepo)

	backRepo.IncrementCommitNb()
}

// Checkout the database into the stage
func (backRepo *BackRepoStruct) Checkout(stage *models.StageStruct) {
	// insertion point for per struct back repo phase one commit
	backRepo.BackRepoCheckoutScheduler.CheckoutPhaseOne()
	backRepo.BackRepoCircle.CheckoutPhaseOne()
	backRepo.BackRepoDivIcon.CheckoutPhaseOne()
	backRepo.BackRepoLayerGroup.CheckoutPhaseOne()
	backRepo.BackRepoLayerGroupUse.CheckoutPhaseOne()
	backRepo.BackRepoMapOptions.CheckoutPhaseOne()
	backRepo.BackRepoMarker.CheckoutPhaseOne()
	backRepo.BackRepoVLine.CheckoutPhaseOne()
	backRepo.BackRepoVisualTrack.CheckoutPhaseOne()

	// insertion point for per struct back repo phase two commit
	backRepo.BackRepoCheckoutScheduler.CheckoutPhaseTwo(backRepo)
	backRepo.BackRepoCircle.CheckoutPhaseTwo(backRepo)
	backRepo.BackRepoDivIcon.CheckoutPhaseTwo(backRepo)
	backRepo.BackRepoLayerGroup.CheckoutPhaseTwo(backRepo)
	backRepo.BackRepoLayerGroupUse.CheckoutPhaseTwo(backRepo)
	backRepo.BackRepoMapOptions.CheckoutPhaseTwo(backRepo)
	backRepo.BackRepoMarker.CheckoutPhaseTwo(backRepo)
	backRepo.BackRepoVLine.CheckoutPhaseTwo(backRepo)
	backRepo.BackRepoVisualTrack.CheckoutPhaseTwo(backRepo)
}

var BackRepo BackRepoStruct

func GetLastCommitNb() uint {
	return BackRepo.GetLastCommitNb()
}

func GetLastPushFromFrontNb() uint {
	return BackRepo.GetLastPushFromFrontNb()
}

// Backup the BackRepoStruct
func (backRepo *BackRepoStruct) Backup(stage *models.StageStruct, dirPath string) {
	os.MkdirAll(dirPath, os.ModePerm)

	// insertion point for per struct backup
	backRepo.BackRepoCheckoutScheduler.Backup(dirPath)
	backRepo.BackRepoCircle.Backup(dirPath)
	backRepo.BackRepoDivIcon.Backup(dirPath)
	backRepo.BackRepoLayerGroup.Backup(dirPath)
	backRepo.BackRepoLayerGroupUse.Backup(dirPath)
	backRepo.BackRepoMapOptions.Backup(dirPath)
	backRepo.BackRepoMarker.Backup(dirPath)
	backRepo.BackRepoVLine.Backup(dirPath)
	backRepo.BackRepoVisualTrack.Backup(dirPath)
}

// Backup in XL the BackRepoStruct
func (backRepo *BackRepoStruct) BackupXL(stage *models.StageStruct, dirPath string) {
	os.MkdirAll(dirPath, os.ModePerm)

	// open an existing file
	file := xlsx.NewFile()

	// insertion point for per struct backup
	backRepo.BackRepoCheckoutScheduler.BackupXL(file)
	backRepo.BackRepoCircle.BackupXL(file)
	backRepo.BackRepoDivIcon.BackupXL(file)
	backRepo.BackRepoLayerGroup.BackupXL(file)
	backRepo.BackRepoLayerGroupUse.BackupXL(file)
	backRepo.BackRepoMapOptions.BackupXL(file)
	backRepo.BackRepoMarker.BackupXL(file)
	backRepo.BackRepoVLine.BackupXL(file)
	backRepo.BackRepoVisualTrack.BackupXL(file)

	var b bytes.Buffer
	writer := bufio.NewWriter(&b)
	file.Write(writer)
	theBytes := b.Bytes()

	filename := filepath.Join(dirPath, "bckp.xlsx")
	err := ioutil.WriteFile(filename, theBytes, 0644)
	if err != nil {
		log.Panic("Cannot write the XL file", err.Error())
	}
}

// Restore the database into the back repo
func (backRepo *BackRepoStruct) Restore(stage *models.StageStruct, dirPath string) {
	models.Stage.Commit()
	models.Stage.Reset()
	models.Stage.Checkout()

	//
	// restauration first phase (create DB instance with new IDs)
	//

	// insertion point for per struct backup
	backRepo.BackRepoCheckoutScheduler.RestorePhaseOne(dirPath)
	backRepo.BackRepoCircle.RestorePhaseOne(dirPath)
	backRepo.BackRepoDivIcon.RestorePhaseOne(dirPath)
	backRepo.BackRepoLayerGroup.RestorePhaseOne(dirPath)
	backRepo.BackRepoLayerGroupUse.RestorePhaseOne(dirPath)
	backRepo.BackRepoMapOptions.RestorePhaseOne(dirPath)
	backRepo.BackRepoMarker.RestorePhaseOne(dirPath)
	backRepo.BackRepoVLine.RestorePhaseOne(dirPath)
	backRepo.BackRepoVisualTrack.RestorePhaseOne(dirPath)

	//
	// restauration second phase (reindex pointers with the new ID)
	//

	// insertion point for per struct backup
	backRepo.BackRepoCheckoutScheduler.RestorePhaseTwo()
	backRepo.BackRepoCircle.RestorePhaseTwo()
	backRepo.BackRepoDivIcon.RestorePhaseTwo()
	backRepo.BackRepoLayerGroup.RestorePhaseTwo()
	backRepo.BackRepoLayerGroupUse.RestorePhaseTwo()
	backRepo.BackRepoMapOptions.RestorePhaseTwo()
	backRepo.BackRepoMarker.RestorePhaseTwo()
	backRepo.BackRepoVLine.RestorePhaseTwo()
	backRepo.BackRepoVisualTrack.RestorePhaseTwo()

	models.Stage.Checkout()
}

// Restore the database into the back repo
func (backRepo *BackRepoStruct) RestoreXL(stage *models.StageStruct, dirPath string) {

	// clean the stage
	models.Stage.Reset()

	// commit the cleaned stage
	models.Stage.Commit()

	// open an existing file
	filename := filepath.Join(dirPath, "bckp.xlsx")
	file, err := xlsx.OpenFile(filename)

	if err != nil {
		log.Panic("Cannot read the XL file", err.Error())
	}

	//
	// restauration first phase (create DB instance with new IDs)
	//

	// insertion point for per struct backup
	backRepo.BackRepoCheckoutScheduler.RestoreXLPhaseOne(file)
	backRepo.BackRepoCircle.RestoreXLPhaseOne(file)
	backRepo.BackRepoDivIcon.RestoreXLPhaseOne(file)
	backRepo.BackRepoLayerGroup.RestoreXLPhaseOne(file)
	backRepo.BackRepoLayerGroupUse.RestoreXLPhaseOne(file)
	backRepo.BackRepoMapOptions.RestoreXLPhaseOne(file)
	backRepo.BackRepoMarker.RestoreXLPhaseOne(file)
	backRepo.BackRepoVLine.RestoreXLPhaseOne(file)
	backRepo.BackRepoVisualTrack.RestoreXLPhaseOne(file)

	// commit the restored stage
	models.Stage.Commit()
}
