// generated by stacks/gong/go/models/orm_file_per_struct_back_repo.go
package orm

import (
	"database/sql"
	"encoding/json"
	"errors"
	"fmt"
	"io/ioutil"
	"log"
	"os"
	"path/filepath"
	"sort"
	"time"

	"gorm.io/gorm"

	"github.com/tealeg/xlsx/v3"

	"github.com/fullstack-lang/gongleaflet/go/models"
)

// dummy variable to have the import declaration wihthout compile failure (even if no code needing this import is generated)
var dummy_VLine_sql sql.NullBool
var dummy_VLine_time time.Duration
var dummy_VLine_sort sort.Float64Slice

// VLineAPI is the input in POST API
//
// for POST, API, one needs the fields of the model as well as the fields
// from associations ("Has One" and "Has Many") that are generated to
// fullfill the ORM requirements for associations
//
// swagger:model vlineAPI
type VLineAPI struct {
	gorm.Model

	models.VLine

	// encoding of pointers
	VLinePointersEnconding
}

// VLinePointersEnconding encodes pointers to Struct and
// reverse pointers of slice of poitners to Struct
type VLinePointersEnconding struct {
	// insertion for pointer fields encoding declaration

	// field LayerGroup is a pointer to another Struct (optional or 0..1)
	// This field is generated into another field to enable AS ONE association
	LayerGroupID sql.NullInt64
}

// VLineDB describes a vline in the database
//
// It incorporates the GORM ID, basic fields from the model (because they can be serialized),
// the encoded version of pointers
//
// swagger:model vlineDB
type VLineDB struct {
	gorm.Model

	// insertion for basic fields declaration

	// Declation for basic field vlineDB.StartLat {{BasicKind}} (to be completed)
	StartLat_Data sql.NullFloat64

	// Declation for basic field vlineDB.StartLng {{BasicKind}} (to be completed)
	StartLng_Data sql.NullFloat64

	// Declation for basic field vlineDB.EndLat {{BasicKind}} (to be completed)
	EndLat_Data sql.NullFloat64

	// Declation for basic field vlineDB.EndLng {{BasicKind}} (to be completed)
	EndLng_Data sql.NullFloat64

	// Declation for basic field vlineDB.Name {{BasicKind}} (to be completed)
	Name_Data sql.NullString

	// Declation for basic field vlineDB.ColorEnum {{BasicKind}} (to be completed)
	ColorEnum_Data sql.NullString

	// Declation for basic field vlineDB.DashStyleEnum {{BasicKind}} (to be completed)
	DashStyleEnum_Data sql.NullString

	// Declation for basic field vlineDB.IsTransmitting {{BasicKind}} (to be completed)
	IsTransmitting_Data sql.NullString

	// Declation for basic field vlineDB.Message {{BasicKind}} (to be completed)
	Message_Data sql.NullString

	// Declation for basic field vlineDB.IsTransmittingBackward {{BasicKind}} (to be completed)
	IsTransmittingBackward_Data sql.NullString

	// Declation for basic field vlineDB.MessageBackward {{BasicKind}} (to be completed)
	MessageBackward_Data sql.NullString
	// encoding of pointers
	VLinePointersEnconding
}

// VLineDBs arrays vlineDBs
// swagger:response vlineDBsResponse
type VLineDBs []VLineDB

// VLineDBResponse provides response
// swagger:response vlineDBResponse
type VLineDBResponse struct {
	VLineDB
}

// VLineWOP is a VLine without pointers (WOP is an acronym for "Without Pointers")
// it holds the same basic fields but pointers are encoded into uint
type VLineWOP struct {
	ID int `xlsx:"0"`

	// insertion for WOP basic fields

	StartLat float64 `xlsx:"1"`

	StartLng float64 `xlsx:"2"`

	EndLat float64 `xlsx:"3"`

	EndLng float64 `xlsx:"4"`

	Name string `xlsx:"5"`

	ColorEnum models.ColorEnum `xlsx:"6"`

	DashStyleEnum models.DashStyleEnum `xlsx:"7"`

	IsTransmitting models.TransmittingEnum `xlsx:"8"`

	Message string `xlsx:"9"`

	IsTransmittingBackward models.TransmittingEnum `xlsx:"10"`

	MessageBackward string `xlsx:"11"`
	// insertion for WOP pointer fields
}

var VLine_Fields = []string{
	// insertion for WOP basic fields
	"ID",
	"StartLat",
	"StartLng",
	"EndLat",
	"EndLng",
	"Name",
	"ColorEnum",
	"DashStyleEnum",
	"IsTransmitting",
	"Message",
	"IsTransmittingBackward",
	"MessageBackward",
}

type BackRepoVLineStruct struct {
	// stores VLineDB according to their gorm ID
	Map_VLineDBID_VLineDB *map[uint]*VLineDB

	// stores VLineDB ID according to VLine address
	Map_VLinePtr_VLineDBID *map[*models.VLine]uint

	// stores VLine according to their gorm ID
	Map_VLineDBID_VLinePtr *map[uint]*models.VLine

	db *gorm.DB
}

func (backRepoVLine *BackRepoVLineStruct) GetDB() *gorm.DB {
	return backRepoVLine.db
}

// GetVLineDBFromVLinePtr is a handy function to access the back repo instance from the stage instance
func (backRepoVLine *BackRepoVLineStruct) GetVLineDBFromVLinePtr(vline *models.VLine) (vlineDB *VLineDB) {
	id := (*backRepoVLine.Map_VLinePtr_VLineDBID)[vline]
	vlineDB = (*backRepoVLine.Map_VLineDBID_VLineDB)[id]
	return
}

// BackRepoVLine.Init set up the BackRepo of the VLine
func (backRepoVLine *BackRepoVLineStruct) Init(db *gorm.DB) (Error error) {

	if backRepoVLine.Map_VLineDBID_VLinePtr != nil {
		err := errors.New("In Init, backRepoVLine.Map_VLineDBID_VLinePtr should be nil")
		return err
	}

	if backRepoVLine.Map_VLineDBID_VLineDB != nil {
		err := errors.New("In Init, backRepoVLine.Map_VLineDBID_VLineDB should be nil")
		return err
	}

	if backRepoVLine.Map_VLinePtr_VLineDBID != nil {
		err := errors.New("In Init, backRepoVLine.Map_VLinePtr_VLineDBID should be nil")
		return err
	}

	tmp := make(map[uint]*models.VLine, 0)
	backRepoVLine.Map_VLineDBID_VLinePtr = &tmp

	tmpDB := make(map[uint]*VLineDB, 0)
	backRepoVLine.Map_VLineDBID_VLineDB = &tmpDB

	tmpID := make(map[*models.VLine]uint, 0)
	backRepoVLine.Map_VLinePtr_VLineDBID = &tmpID

	backRepoVLine.db = db
	return
}

// BackRepoVLine.CommitPhaseOne commits all staged instances of VLine to the BackRepo
// Phase One is the creation of instance in the database if it is not yet done to get the unique ID for each staged instance
func (backRepoVLine *BackRepoVLineStruct) CommitPhaseOne(stage *models.StageStruct) (Error error) {

	for vline := range stage.VLines {
		backRepoVLine.CommitPhaseOneInstance(vline)
	}

	// parse all backRepo instance and checks wether some instance have been unstaged
	// in this case, remove them from the back repo
	for id, vline := range *backRepoVLine.Map_VLineDBID_VLinePtr {
		if _, ok := stage.VLines[vline]; !ok {
			backRepoVLine.CommitDeleteInstance(id)
		}
	}

	return
}

// BackRepoVLine.CommitDeleteInstance commits deletion of VLine to the BackRepo
func (backRepoVLine *BackRepoVLineStruct) CommitDeleteInstance(id uint) (Error error) {

	vline := (*backRepoVLine.Map_VLineDBID_VLinePtr)[id]

	// vline is not staged anymore, remove vlineDB
	vlineDB := (*backRepoVLine.Map_VLineDBID_VLineDB)[id]
	query := backRepoVLine.db.Unscoped().Delete(&vlineDB)
	if query.Error != nil {
		return query.Error
	}

	// update stores
	delete((*backRepoVLine.Map_VLinePtr_VLineDBID), vline)
	delete((*backRepoVLine.Map_VLineDBID_VLinePtr), id)
	delete((*backRepoVLine.Map_VLineDBID_VLineDB), id)

	return
}

// BackRepoVLine.CommitPhaseOneInstance commits vline staged instances of VLine to the BackRepo
// Phase One is the creation of instance in the database if it is not yet done to get the unique ID for each staged instance
func (backRepoVLine *BackRepoVLineStruct) CommitPhaseOneInstance(vline *models.VLine) (Error error) {

	// check if the vline is not commited yet
	if _, ok := (*backRepoVLine.Map_VLinePtr_VLineDBID)[vline]; ok {
		return
	}

	// initiate vline
	var vlineDB VLineDB
	vlineDB.CopyBasicFieldsFromVLine(vline)

	query := backRepoVLine.db.Create(&vlineDB)
	if query.Error != nil {
		return query.Error
	}

	// update stores
	(*backRepoVLine.Map_VLinePtr_VLineDBID)[vline] = vlineDB.ID
	(*backRepoVLine.Map_VLineDBID_VLinePtr)[vlineDB.ID] = vline
	(*backRepoVLine.Map_VLineDBID_VLineDB)[vlineDB.ID] = &vlineDB

	return
}

// BackRepoVLine.CommitPhaseTwo commits all staged instances of VLine to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoVLine *BackRepoVLineStruct) CommitPhaseTwo(backRepo *BackRepoStruct) (Error error) {

	for idx, vline := range *backRepoVLine.Map_VLineDBID_VLinePtr {
		backRepoVLine.CommitPhaseTwoInstance(backRepo, idx, vline)
	}

	return
}

// BackRepoVLine.CommitPhaseTwoInstance commits {{structname }} of models.VLine to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoVLine *BackRepoVLineStruct) CommitPhaseTwoInstance(backRepo *BackRepoStruct, idx uint, vline *models.VLine) (Error error) {

	// fetch matching vlineDB
	if vlineDB, ok := (*backRepoVLine.Map_VLineDBID_VLineDB)[idx]; ok {

		vlineDB.CopyBasicFieldsFromVLine(vline)

		// insertion point for translating pointers encodings into actual pointers
		// commit pointer value vline.LayerGroup translates to updating the vline.LayerGroupID
		vlineDB.LayerGroupID.Valid = true // allow for a 0 value (nil association)
		if vline.LayerGroup != nil {
			if LayerGroupId, ok := (*backRepo.BackRepoLayerGroup.Map_LayerGroupPtr_LayerGroupDBID)[vline.LayerGroup]; ok {
				vlineDB.LayerGroupID.Int64 = int64(LayerGroupId)
				vlineDB.LayerGroupID.Valid = true
			}
		}

		query := backRepoVLine.db.Save(&vlineDB)
		if query.Error != nil {
			return query.Error
		}

	} else {
		err := errors.New(
			fmt.Sprintf("Unkown VLine intance %s", vline.Name))
		return err
	}

	return
}

// BackRepoVLine.CheckoutPhaseOne Checkouts all BackRepo instances to the Stage
//
// Phase One will result in having instances on the stage aligned with the back repo
// pointers are not initialized yet (this is for pahse two)
//
func (backRepoVLine *BackRepoVLineStruct) CheckoutPhaseOne() (Error error) {

	vlineDBArray := make([]VLineDB, 0)
	query := backRepoVLine.db.Find(&vlineDBArray)
	if query.Error != nil {
		return query.Error
	}

	// list of instances to be removed
	// start from the initial map on the stage and remove instances that have been checked out
	vlineInstancesToBeRemovedFromTheStage := make(map[*models.VLine]struct{})
	for key, value := range models.Stage.VLines {
		vlineInstancesToBeRemovedFromTheStage[key] = value
	}

	// copy orm objects to the the map
	for _, vlineDB := range vlineDBArray {
		backRepoVLine.CheckoutPhaseOneInstance(&vlineDB)

		// do not remove this instance from the stage, therefore
		// remove instance from the list of instances to be be removed from the stage
		vline, ok := (*backRepoVLine.Map_VLineDBID_VLinePtr)[vlineDB.ID]
		if ok {
			delete(vlineInstancesToBeRemovedFromTheStage, vline)
		}
	}

	// remove from stage and back repo's 3 maps all vlines that are not in the checkout
	for vline := range vlineInstancesToBeRemovedFromTheStage {
		vline.Unstage()

		// remove instance from the back repo 3 maps
		vlineID := (*backRepoVLine.Map_VLinePtr_VLineDBID)[vline]
		delete((*backRepoVLine.Map_VLinePtr_VLineDBID), vline)
		delete((*backRepoVLine.Map_VLineDBID_VLineDB), vlineID)
		delete((*backRepoVLine.Map_VLineDBID_VLinePtr), vlineID)
	}

	return
}

// CheckoutPhaseOneInstance takes a vlineDB that has been found in the DB, updates the backRepo and stages the
// models version of the vlineDB
func (backRepoVLine *BackRepoVLineStruct) CheckoutPhaseOneInstance(vlineDB *VLineDB) (Error error) {

	vline, ok := (*backRepoVLine.Map_VLineDBID_VLinePtr)[vlineDB.ID]
	if !ok {
		vline = new(models.VLine)

		(*backRepoVLine.Map_VLineDBID_VLinePtr)[vlineDB.ID] = vline
		(*backRepoVLine.Map_VLinePtr_VLineDBID)[vline] = vlineDB.ID

		// append model store with the new element
		vline.Name = vlineDB.Name_Data.String
		vline.Stage()
	}
	vlineDB.CopyBasicFieldsToVLine(vline)

	// preserve pointer to vlineDB. Otherwise, pointer will is recycled and the map of pointers
	// Map_VLineDBID_VLineDB)[vlineDB hold variable pointers
	vlineDB_Data := *vlineDB
	preservedPtrToVLine := &vlineDB_Data
	(*backRepoVLine.Map_VLineDBID_VLineDB)[vlineDB.ID] = preservedPtrToVLine

	return
}

// BackRepoVLine.CheckoutPhaseTwo Checkouts all staged instances of VLine to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoVLine *BackRepoVLineStruct) CheckoutPhaseTwo(backRepo *BackRepoStruct) (Error error) {

	// parse all DB instance and update all pointer fields of the translated models instance
	for _, vlineDB := range *backRepoVLine.Map_VLineDBID_VLineDB {
		backRepoVLine.CheckoutPhaseTwoInstance(backRepo, vlineDB)
	}
	return
}

// BackRepoVLine.CheckoutPhaseTwoInstance Checkouts staged instances of VLine to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoVLine *BackRepoVLineStruct) CheckoutPhaseTwoInstance(backRepo *BackRepoStruct, vlineDB *VLineDB) (Error error) {

	vline := (*backRepoVLine.Map_VLineDBID_VLinePtr)[vlineDB.ID]
	_ = vline // sometimes, there is no code generated. This lines voids the "unused variable" compilation error

	// insertion point for checkout of pointer encoding
	// LayerGroup field
	if vlineDB.LayerGroupID.Int64 != 0 {
		vline.LayerGroup = (*backRepo.BackRepoLayerGroup.Map_LayerGroupDBID_LayerGroupPtr)[uint(vlineDB.LayerGroupID.Int64)]
	}
	return
}

// CommitVLine allows commit of a single vline (if already staged)
func (backRepo *BackRepoStruct) CommitVLine(vline *models.VLine) {
	backRepo.BackRepoVLine.CommitPhaseOneInstance(vline)
	if id, ok := (*backRepo.BackRepoVLine.Map_VLinePtr_VLineDBID)[vline]; ok {
		backRepo.BackRepoVLine.CommitPhaseTwoInstance(backRepo, id, vline)
	}
}

// CommitVLine allows checkout of a single vline (if already staged and with a BackRepo id)
func (backRepo *BackRepoStruct) CheckoutVLine(vline *models.VLine) {
	// check if the vline is staged
	if _, ok := (*backRepo.BackRepoVLine.Map_VLinePtr_VLineDBID)[vline]; ok {

		if id, ok := (*backRepo.BackRepoVLine.Map_VLinePtr_VLineDBID)[vline]; ok {
			var vlineDB VLineDB
			vlineDB.ID = id

			if err := backRepo.BackRepoVLine.db.First(&vlineDB, id).Error; err != nil {
				log.Panicln("CheckoutVLine : Problem with getting object with id:", id)
			}
			backRepo.BackRepoVLine.CheckoutPhaseOneInstance(&vlineDB)
			backRepo.BackRepoVLine.CheckoutPhaseTwoInstance(backRepo, &vlineDB)
		}
	}
}

// CopyBasicFieldsFromVLine
func (vlineDB *VLineDB) CopyBasicFieldsFromVLine(vline *models.VLine) {
	// insertion point for fields commit

	vlineDB.StartLat_Data.Float64 = vline.StartLat
	vlineDB.StartLat_Data.Valid = true

	vlineDB.StartLng_Data.Float64 = vline.StartLng
	vlineDB.StartLng_Data.Valid = true

	vlineDB.EndLat_Data.Float64 = vline.EndLat
	vlineDB.EndLat_Data.Valid = true

	vlineDB.EndLng_Data.Float64 = vline.EndLng
	vlineDB.EndLng_Data.Valid = true

	vlineDB.Name_Data.String = vline.Name
	vlineDB.Name_Data.Valid = true

	vlineDB.ColorEnum_Data.String = string(vline.ColorEnum)
	vlineDB.ColorEnum_Data.Valid = true

	vlineDB.DashStyleEnum_Data.String = string(vline.DashStyleEnum)
	vlineDB.DashStyleEnum_Data.Valid = true

	vlineDB.IsTransmitting_Data.String = string(vline.IsTransmitting)
	vlineDB.IsTransmitting_Data.Valid = true

	vlineDB.Message_Data.String = vline.Message
	vlineDB.Message_Data.Valid = true

	vlineDB.IsTransmittingBackward_Data.String = string(vline.IsTransmittingBackward)
	vlineDB.IsTransmittingBackward_Data.Valid = true

	vlineDB.MessageBackward_Data.String = vline.MessageBackward
	vlineDB.MessageBackward_Data.Valid = true
}

// CopyBasicFieldsFromVLineWOP
func (vlineDB *VLineDB) CopyBasicFieldsFromVLineWOP(vline *VLineWOP) {
	// insertion point for fields commit

	vlineDB.StartLat_Data.Float64 = vline.StartLat
	vlineDB.StartLat_Data.Valid = true

	vlineDB.StartLng_Data.Float64 = vline.StartLng
	vlineDB.StartLng_Data.Valid = true

	vlineDB.EndLat_Data.Float64 = vline.EndLat
	vlineDB.EndLat_Data.Valid = true

	vlineDB.EndLng_Data.Float64 = vline.EndLng
	vlineDB.EndLng_Data.Valid = true

	vlineDB.Name_Data.String = vline.Name
	vlineDB.Name_Data.Valid = true

	vlineDB.ColorEnum_Data.String = string(vline.ColorEnum)
	vlineDB.ColorEnum_Data.Valid = true

	vlineDB.DashStyleEnum_Data.String = string(vline.DashStyleEnum)
	vlineDB.DashStyleEnum_Data.Valid = true

	vlineDB.IsTransmitting_Data.String = string(vline.IsTransmitting)
	vlineDB.IsTransmitting_Data.Valid = true

	vlineDB.Message_Data.String = vline.Message
	vlineDB.Message_Data.Valid = true

	vlineDB.IsTransmittingBackward_Data.String = string(vline.IsTransmittingBackward)
	vlineDB.IsTransmittingBackward_Data.Valid = true

	vlineDB.MessageBackward_Data.String = vline.MessageBackward
	vlineDB.MessageBackward_Data.Valid = true
}

// CopyBasicFieldsToVLine
func (vlineDB *VLineDB) CopyBasicFieldsToVLine(vline *models.VLine) {
	// insertion point for checkout of basic fields (back repo to stage)
	vline.StartLat = vlineDB.StartLat_Data.Float64
	vline.StartLng = vlineDB.StartLng_Data.Float64
	vline.EndLat = vlineDB.EndLat_Data.Float64
	vline.EndLng = vlineDB.EndLng_Data.Float64
	vline.Name = vlineDB.Name_Data.String
	vline.ColorEnum = models.ColorEnum(vlineDB.ColorEnum_Data.String)
	vline.DashStyleEnum = models.DashStyleEnum(vlineDB.DashStyleEnum_Data.String)
	vline.IsTransmitting = models.TransmittingEnum(vlineDB.IsTransmitting_Data.String)
	vline.Message = vlineDB.Message_Data.String
	vline.IsTransmittingBackward = models.TransmittingEnum(vlineDB.IsTransmittingBackward_Data.String)
	vline.MessageBackward = vlineDB.MessageBackward_Data.String
}

// CopyBasicFieldsToVLineWOP
func (vlineDB *VLineDB) CopyBasicFieldsToVLineWOP(vline *VLineWOP) {
	vline.ID = int(vlineDB.ID)
	// insertion point for checkout of basic fields (back repo to stage)
	vline.StartLat = vlineDB.StartLat_Data.Float64
	vline.StartLng = vlineDB.StartLng_Data.Float64
	vline.EndLat = vlineDB.EndLat_Data.Float64
	vline.EndLng = vlineDB.EndLng_Data.Float64
	vline.Name = vlineDB.Name_Data.String
	vline.ColorEnum = models.ColorEnum(vlineDB.ColorEnum_Data.String)
	vline.DashStyleEnum = models.DashStyleEnum(vlineDB.DashStyleEnum_Data.String)
	vline.IsTransmitting = models.TransmittingEnum(vlineDB.IsTransmitting_Data.String)
	vline.Message = vlineDB.Message_Data.String
	vline.IsTransmittingBackward = models.TransmittingEnum(vlineDB.IsTransmittingBackward_Data.String)
	vline.MessageBackward = vlineDB.MessageBackward_Data.String
}

// Backup generates a json file from a slice of all VLineDB instances in the backrepo
func (backRepoVLine *BackRepoVLineStruct) Backup(dirPath string) {

	filename := filepath.Join(dirPath, "VLineDB.json")

	// organize the map into an array with increasing IDs, in order to have repoductible
	// backup file
	forBackup := make([]*VLineDB, 0)
	for _, vlineDB := range *backRepoVLine.Map_VLineDBID_VLineDB {
		forBackup = append(forBackup, vlineDB)
	}

	sort.Slice(forBackup[:], func(i, j int) bool {
		return forBackup[i].ID < forBackup[j].ID
	})

	file, err := json.MarshalIndent(forBackup, "", " ")

	if err != nil {
		log.Panic("Cannot json VLine ", filename, " ", err.Error())
	}

	err = ioutil.WriteFile(filename, file, 0644)
	if err != nil {
		log.Panic("Cannot write the json VLine file", err.Error())
	}
}

// Backup generates a json file from a slice of all VLineDB instances in the backrepo
func (backRepoVLine *BackRepoVLineStruct) BackupXL(file *xlsx.File) {

	// organize the map into an array with increasing IDs, in order to have repoductible
	// backup file
	forBackup := make([]*VLineDB, 0)
	for _, vlineDB := range *backRepoVLine.Map_VLineDBID_VLineDB {
		forBackup = append(forBackup, vlineDB)
	}

	sort.Slice(forBackup[:], func(i, j int) bool {
		return forBackup[i].ID < forBackup[j].ID
	})

	sh, err := file.AddSheet("VLine")
	if err != nil {
		log.Panic("Cannot add XL file", err.Error())
	}
	_ = sh

	row := sh.AddRow()
	row.WriteSlice(&VLine_Fields, -1)
	for _, vlineDB := range forBackup {

		var vlineWOP VLineWOP
		vlineDB.CopyBasicFieldsToVLineWOP(&vlineWOP)

		row := sh.AddRow()
		row.WriteStruct(&vlineWOP, -1)
	}
}

// RestoreXL from the "VLine" sheet all VLineDB instances
func (backRepoVLine *BackRepoVLineStruct) RestoreXLPhaseOne(file *xlsx.File) {

	// resets the map
	BackRepoVLineid_atBckpTime_newID = make(map[uint]uint)

	sh, ok := file.Sheet["VLine"]
	_ = sh
	if !ok {
		log.Panic(errors.New("sheet not found"))
	}

	// log.Println("Max row is", sh.MaxRow)
	err := sh.ForEachRow(backRepoVLine.rowVisitorVLine)
	if err != nil {
		log.Panic("Err=", err)
	}
}

func (backRepoVLine *BackRepoVLineStruct) rowVisitorVLine(row *xlsx.Row) error {

	log.Printf("row line %d\n", row.GetCoordinate())
	log.Println(row)

	// skip first line
	if row.GetCoordinate() > 0 {
		var vlineWOP VLineWOP
		row.ReadStruct(&vlineWOP)

		// add the unmarshalled struct to the stage
		vlineDB := new(VLineDB)
		vlineDB.CopyBasicFieldsFromVLineWOP(&vlineWOP)

		vlineDB_ID_atBackupTime := vlineDB.ID
		vlineDB.ID = 0
		query := backRepoVLine.db.Create(vlineDB)
		if query.Error != nil {
			log.Panic(query.Error)
		}
		(*backRepoVLine.Map_VLineDBID_VLineDB)[vlineDB.ID] = vlineDB
		BackRepoVLineid_atBckpTime_newID[vlineDB_ID_atBackupTime] = vlineDB.ID
	}
	return nil
}

// RestorePhaseOne read the file "VLineDB.json" in dirPath that stores an array
// of VLineDB and stores it in the database
// the map BackRepoVLineid_atBckpTime_newID is updated accordingly
func (backRepoVLine *BackRepoVLineStruct) RestorePhaseOne(dirPath string) {

	// resets the map
	BackRepoVLineid_atBckpTime_newID = make(map[uint]uint)

	filename := filepath.Join(dirPath, "VLineDB.json")
	jsonFile, err := os.Open(filename)
	// if we os.Open returns an error then handle it
	if err != nil {
		log.Panic("Cannot restore/open the json VLine file", filename, " ", err.Error())
	}

	// read our opened jsonFile as a byte array.
	byteValue, _ := ioutil.ReadAll(jsonFile)

	var forRestore []*VLineDB

	err = json.Unmarshal(byteValue, &forRestore)

	// fill up Map_VLineDBID_VLineDB
	for _, vlineDB := range forRestore {

		vlineDB_ID_atBackupTime := vlineDB.ID
		vlineDB.ID = 0
		query := backRepoVLine.db.Create(vlineDB)
		if query.Error != nil {
			log.Panic(query.Error)
		}
		(*backRepoVLine.Map_VLineDBID_VLineDB)[vlineDB.ID] = vlineDB
		BackRepoVLineid_atBckpTime_newID[vlineDB_ID_atBackupTime] = vlineDB.ID
	}

	if err != nil {
		log.Panic("Cannot restore/unmarshall json VLine file", err.Error())
	}
}

// RestorePhaseTwo uses all map BackRepo<VLine>id_atBckpTime_newID
// to compute new index
func (backRepoVLine *BackRepoVLineStruct) RestorePhaseTwo() {

	for _, vlineDB := range *backRepoVLine.Map_VLineDBID_VLineDB {

		// next line of code is to avert unused variable compilation error
		_ = vlineDB

		// insertion point for reindexing pointers encoding
		// reindexing LayerGroup field
		if vlineDB.LayerGroupID.Int64 != 0 {
			vlineDB.LayerGroupID.Int64 = int64(BackRepoLayerGroupid_atBckpTime_newID[uint(vlineDB.LayerGroupID.Int64)])
			vlineDB.LayerGroupID.Valid = true
		}

		// update databse with new index encoding
		query := backRepoVLine.db.Model(vlineDB).Updates(*vlineDB)
		if query.Error != nil {
			log.Panic(query.Error)
		}
	}

}

// this field is used during the restauration process.
// it stores the ID at the backup time and is used for renumbering
var BackRepoVLineid_atBckpTime_newID map[uint]uint
