// generated by stacks/gong/go/models/orm_file_per_struct_back_repo.go
package orm

import (
	"database/sql"
	"encoding/json"
	"errors"
	"fmt"
	"io/ioutil"
	"log"
	"os"
	"path/filepath"
	"sort"
	"time"

	"gorm.io/gorm"

	"github.com/tealeg/xlsx/v3"

	"github.com/fullstack-lang/gongleaflet/go/models"
)

// dummy variable to have the import declaration wihthout compile failure (even if no code needing this import is generated)
var dummy_CheckoutScheduler_sql sql.NullBool
var dummy_CheckoutScheduler_time time.Duration
var dummy_CheckoutScheduler_sort sort.Float64Slice

// CheckoutSchedulerAPI is the input in POST API
//
// for POST, API, one needs the fields of the model as well as the fields
// from associations ("Has One" and "Has Many") that are generated to
// fullfill the ORM requirements for associations
//
// swagger:model checkoutschedulerAPI
type CheckoutSchedulerAPI struct {
	gorm.Model

	models.CheckoutScheduler

	// encoding of pointers
	CheckoutSchedulerPointersEnconding
}

// CheckoutSchedulerPointersEnconding encodes pointers to Struct and
// reverse pointers of slice of poitners to Struct
type CheckoutSchedulerPointersEnconding struct {
	// insertion for pointer fields encoding declaration
}

// CheckoutSchedulerDB describes a checkoutscheduler in the database
//
// It incorporates the GORM ID, basic fields from the model (because they can be serialized),
// the encoded version of pointers
//
// swagger:model checkoutschedulerDB
type CheckoutSchedulerDB struct {
	gorm.Model

	// insertion for basic fields declaration

	// Declation for basic field checkoutschedulerDB.Name {{BasicKind}} (to be completed)
	Name_Data sql.NullString

	// Declation for basic field checkoutschedulerDB.NbUpdatesFromFront {{BasicKind}} (to be completed)
	NbUpdatesFromFront_Data sql.NullInt64
	// encoding of pointers
	CheckoutSchedulerPointersEnconding
}

// CheckoutSchedulerDBs arrays checkoutschedulerDBs
// swagger:response checkoutschedulerDBsResponse
type CheckoutSchedulerDBs []CheckoutSchedulerDB

// CheckoutSchedulerDBResponse provides response
// swagger:response checkoutschedulerDBResponse
type CheckoutSchedulerDBResponse struct {
	CheckoutSchedulerDB
}

// CheckoutSchedulerWOP is a CheckoutScheduler without pointers (WOP is an acronym for "Without Pointers")
// it holds the same basic fields but pointers are encoded into uint
type CheckoutSchedulerWOP struct {
	ID int `xlsx:"0"`

	// insertion for WOP basic fields

	Name string `xlsx:"1"`

	NbUpdatesFromFront int `xlsx:"2"`
	// insertion for WOP pointer fields
}

var CheckoutScheduler_Fields = []string{
	// insertion for WOP basic fields
	"ID",
	"Name",
	"NbUpdatesFromFront",
}

type BackRepoCheckoutSchedulerStruct struct {
	// stores CheckoutSchedulerDB according to their gorm ID
	Map_CheckoutSchedulerDBID_CheckoutSchedulerDB *map[uint]*CheckoutSchedulerDB

	// stores CheckoutSchedulerDB ID according to CheckoutScheduler address
	Map_CheckoutSchedulerPtr_CheckoutSchedulerDBID *map[*models.CheckoutScheduler]uint

	// stores CheckoutScheduler according to their gorm ID
	Map_CheckoutSchedulerDBID_CheckoutSchedulerPtr *map[uint]*models.CheckoutScheduler

	db *gorm.DB
}

func (backRepoCheckoutScheduler *BackRepoCheckoutSchedulerStruct) GetDB() *gorm.DB {
	return backRepoCheckoutScheduler.db
}

// GetCheckoutSchedulerDBFromCheckoutSchedulerPtr is a handy function to access the back repo instance from the stage instance
func (backRepoCheckoutScheduler *BackRepoCheckoutSchedulerStruct) GetCheckoutSchedulerDBFromCheckoutSchedulerPtr(checkoutscheduler *models.CheckoutScheduler) (checkoutschedulerDB *CheckoutSchedulerDB) {
	id := (*backRepoCheckoutScheduler.Map_CheckoutSchedulerPtr_CheckoutSchedulerDBID)[checkoutscheduler]
	checkoutschedulerDB = (*backRepoCheckoutScheduler.Map_CheckoutSchedulerDBID_CheckoutSchedulerDB)[id]
	return
}

// BackRepoCheckoutScheduler.Init set up the BackRepo of the CheckoutScheduler
func (backRepoCheckoutScheduler *BackRepoCheckoutSchedulerStruct) Init(db *gorm.DB) (Error error) {

	if backRepoCheckoutScheduler.Map_CheckoutSchedulerDBID_CheckoutSchedulerPtr != nil {
		err := errors.New("In Init, backRepoCheckoutScheduler.Map_CheckoutSchedulerDBID_CheckoutSchedulerPtr should be nil")
		return err
	}

	if backRepoCheckoutScheduler.Map_CheckoutSchedulerDBID_CheckoutSchedulerDB != nil {
		err := errors.New("In Init, backRepoCheckoutScheduler.Map_CheckoutSchedulerDBID_CheckoutSchedulerDB should be nil")
		return err
	}

	if backRepoCheckoutScheduler.Map_CheckoutSchedulerPtr_CheckoutSchedulerDBID != nil {
		err := errors.New("In Init, backRepoCheckoutScheduler.Map_CheckoutSchedulerPtr_CheckoutSchedulerDBID should be nil")
		return err
	}

	tmp := make(map[uint]*models.CheckoutScheduler, 0)
	backRepoCheckoutScheduler.Map_CheckoutSchedulerDBID_CheckoutSchedulerPtr = &tmp

	tmpDB := make(map[uint]*CheckoutSchedulerDB, 0)
	backRepoCheckoutScheduler.Map_CheckoutSchedulerDBID_CheckoutSchedulerDB = &tmpDB

	tmpID := make(map[*models.CheckoutScheduler]uint, 0)
	backRepoCheckoutScheduler.Map_CheckoutSchedulerPtr_CheckoutSchedulerDBID = &tmpID

	backRepoCheckoutScheduler.db = db
	return
}

// BackRepoCheckoutScheduler.CommitPhaseOne commits all staged instances of CheckoutScheduler to the BackRepo
// Phase One is the creation of instance in the database if it is not yet done to get the unique ID for each staged instance
func (backRepoCheckoutScheduler *BackRepoCheckoutSchedulerStruct) CommitPhaseOne(stage *models.StageStruct) (Error error) {

	for checkoutscheduler := range stage.CheckoutSchedulers {
		backRepoCheckoutScheduler.CommitPhaseOneInstance(checkoutscheduler)
	}

	// parse all backRepo instance and checks wether some instance have been unstaged
	// in this case, remove them from the back repo
	for id, checkoutscheduler := range *backRepoCheckoutScheduler.Map_CheckoutSchedulerDBID_CheckoutSchedulerPtr {
		if _, ok := stage.CheckoutSchedulers[checkoutscheduler]; !ok {
			backRepoCheckoutScheduler.CommitDeleteInstance(id)
		}
	}

	return
}

// BackRepoCheckoutScheduler.CommitDeleteInstance commits deletion of CheckoutScheduler to the BackRepo
func (backRepoCheckoutScheduler *BackRepoCheckoutSchedulerStruct) CommitDeleteInstance(id uint) (Error error) {

	checkoutscheduler := (*backRepoCheckoutScheduler.Map_CheckoutSchedulerDBID_CheckoutSchedulerPtr)[id]

	// checkoutscheduler is not staged anymore, remove checkoutschedulerDB
	checkoutschedulerDB := (*backRepoCheckoutScheduler.Map_CheckoutSchedulerDBID_CheckoutSchedulerDB)[id]
	query := backRepoCheckoutScheduler.db.Unscoped().Delete(&checkoutschedulerDB)
	if query.Error != nil {
		return query.Error
	}

	// update stores
	delete((*backRepoCheckoutScheduler.Map_CheckoutSchedulerPtr_CheckoutSchedulerDBID), checkoutscheduler)
	delete((*backRepoCheckoutScheduler.Map_CheckoutSchedulerDBID_CheckoutSchedulerPtr), id)
	delete((*backRepoCheckoutScheduler.Map_CheckoutSchedulerDBID_CheckoutSchedulerDB), id)

	return
}

// BackRepoCheckoutScheduler.CommitPhaseOneInstance commits checkoutscheduler staged instances of CheckoutScheduler to the BackRepo
// Phase One is the creation of instance in the database if it is not yet done to get the unique ID for each staged instance
func (backRepoCheckoutScheduler *BackRepoCheckoutSchedulerStruct) CommitPhaseOneInstance(checkoutscheduler *models.CheckoutScheduler) (Error error) {

	// check if the checkoutscheduler is not commited yet
	if _, ok := (*backRepoCheckoutScheduler.Map_CheckoutSchedulerPtr_CheckoutSchedulerDBID)[checkoutscheduler]; ok {
		return
	}

	// initiate checkoutscheduler
	var checkoutschedulerDB CheckoutSchedulerDB
	checkoutschedulerDB.CopyBasicFieldsFromCheckoutScheduler(checkoutscheduler)

	query := backRepoCheckoutScheduler.db.Create(&checkoutschedulerDB)
	if query.Error != nil {
		return query.Error
	}

	// update stores
	(*backRepoCheckoutScheduler.Map_CheckoutSchedulerPtr_CheckoutSchedulerDBID)[checkoutscheduler] = checkoutschedulerDB.ID
	(*backRepoCheckoutScheduler.Map_CheckoutSchedulerDBID_CheckoutSchedulerPtr)[checkoutschedulerDB.ID] = checkoutscheduler
	(*backRepoCheckoutScheduler.Map_CheckoutSchedulerDBID_CheckoutSchedulerDB)[checkoutschedulerDB.ID] = &checkoutschedulerDB

	return
}

// BackRepoCheckoutScheduler.CommitPhaseTwo commits all staged instances of CheckoutScheduler to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoCheckoutScheduler *BackRepoCheckoutSchedulerStruct) CommitPhaseTwo(backRepo *BackRepoStruct) (Error error) {

	for idx, checkoutscheduler := range *backRepoCheckoutScheduler.Map_CheckoutSchedulerDBID_CheckoutSchedulerPtr {
		backRepoCheckoutScheduler.CommitPhaseTwoInstance(backRepo, idx, checkoutscheduler)
	}

	return
}

// BackRepoCheckoutScheduler.CommitPhaseTwoInstance commits {{structname }} of models.CheckoutScheduler to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoCheckoutScheduler *BackRepoCheckoutSchedulerStruct) CommitPhaseTwoInstance(backRepo *BackRepoStruct, idx uint, checkoutscheduler *models.CheckoutScheduler) (Error error) {

	// fetch matching checkoutschedulerDB
	if checkoutschedulerDB, ok := (*backRepoCheckoutScheduler.Map_CheckoutSchedulerDBID_CheckoutSchedulerDB)[idx]; ok {

		checkoutschedulerDB.CopyBasicFieldsFromCheckoutScheduler(checkoutscheduler)

		// insertion point for translating pointers encodings into actual pointers
		query := backRepoCheckoutScheduler.db.Save(&checkoutschedulerDB)
		if query.Error != nil {
			return query.Error
		}

	} else {
		err := errors.New(
			fmt.Sprintf("Unkown CheckoutScheduler intance %s", checkoutscheduler.Name))
		return err
	}

	return
}

// BackRepoCheckoutScheduler.CheckoutPhaseOne Checkouts all BackRepo instances to the Stage
//
// Phase One will result in having instances on the stage aligned with the back repo
// pointers are not initialized yet (this is for pahse two)
//
func (backRepoCheckoutScheduler *BackRepoCheckoutSchedulerStruct) CheckoutPhaseOne() (Error error) {

	checkoutschedulerDBArray := make([]CheckoutSchedulerDB, 0)
	query := backRepoCheckoutScheduler.db.Find(&checkoutschedulerDBArray)
	if query.Error != nil {
		return query.Error
	}

	// list of instances to be removed
	// start from the initial map on the stage and remove instances that have been checked out
	checkoutschedulerInstancesToBeRemovedFromTheStage := make(map[*models.CheckoutScheduler]struct{})
	for key, value := range models.Stage.CheckoutSchedulers {
		checkoutschedulerInstancesToBeRemovedFromTheStage[key] = value
	}

	// copy orm objects to the the map
	for _, checkoutschedulerDB := range checkoutschedulerDBArray {
		backRepoCheckoutScheduler.CheckoutPhaseOneInstance(&checkoutschedulerDB)

		// do not remove this instance from the stage, therefore
		// remove instance from the list of instances to be be removed from the stage
		checkoutscheduler, ok := (*backRepoCheckoutScheduler.Map_CheckoutSchedulerDBID_CheckoutSchedulerPtr)[checkoutschedulerDB.ID]
		if ok {
			delete(checkoutschedulerInstancesToBeRemovedFromTheStage, checkoutscheduler)
		}
	}

	// remove from stage and back repo's 3 maps all checkoutschedulers that are not in the checkout
	for checkoutscheduler := range checkoutschedulerInstancesToBeRemovedFromTheStage {
		checkoutscheduler.Unstage()

		// remove instance from the back repo 3 maps
		checkoutschedulerID := (*backRepoCheckoutScheduler.Map_CheckoutSchedulerPtr_CheckoutSchedulerDBID)[checkoutscheduler]
		delete((*backRepoCheckoutScheduler.Map_CheckoutSchedulerPtr_CheckoutSchedulerDBID), checkoutscheduler)
		delete((*backRepoCheckoutScheduler.Map_CheckoutSchedulerDBID_CheckoutSchedulerDB), checkoutschedulerID)
		delete((*backRepoCheckoutScheduler.Map_CheckoutSchedulerDBID_CheckoutSchedulerPtr), checkoutschedulerID)
	}

	return
}

// CheckoutPhaseOneInstance takes a checkoutschedulerDB that has been found in the DB, updates the backRepo and stages the
// models version of the checkoutschedulerDB
func (backRepoCheckoutScheduler *BackRepoCheckoutSchedulerStruct) CheckoutPhaseOneInstance(checkoutschedulerDB *CheckoutSchedulerDB) (Error error) {

	checkoutscheduler, ok := (*backRepoCheckoutScheduler.Map_CheckoutSchedulerDBID_CheckoutSchedulerPtr)[checkoutschedulerDB.ID]
	if !ok {
		checkoutscheduler = new(models.CheckoutScheduler)

		(*backRepoCheckoutScheduler.Map_CheckoutSchedulerDBID_CheckoutSchedulerPtr)[checkoutschedulerDB.ID] = checkoutscheduler
		(*backRepoCheckoutScheduler.Map_CheckoutSchedulerPtr_CheckoutSchedulerDBID)[checkoutscheduler] = checkoutschedulerDB.ID

		// append model store with the new element
		checkoutscheduler.Name = checkoutschedulerDB.Name_Data.String
		checkoutscheduler.Stage()
	}
	checkoutschedulerDB.CopyBasicFieldsToCheckoutScheduler(checkoutscheduler)

	// preserve pointer to checkoutschedulerDB. Otherwise, pointer will is recycled and the map of pointers
	// Map_CheckoutSchedulerDBID_CheckoutSchedulerDB)[checkoutschedulerDB hold variable pointers
	checkoutschedulerDB_Data := *checkoutschedulerDB
	preservedPtrToCheckoutScheduler := &checkoutschedulerDB_Data
	(*backRepoCheckoutScheduler.Map_CheckoutSchedulerDBID_CheckoutSchedulerDB)[checkoutschedulerDB.ID] = preservedPtrToCheckoutScheduler

	return
}

// BackRepoCheckoutScheduler.CheckoutPhaseTwo Checkouts all staged instances of CheckoutScheduler to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoCheckoutScheduler *BackRepoCheckoutSchedulerStruct) CheckoutPhaseTwo(backRepo *BackRepoStruct) (Error error) {

	// parse all DB instance and update all pointer fields of the translated models instance
	for _, checkoutschedulerDB := range *backRepoCheckoutScheduler.Map_CheckoutSchedulerDBID_CheckoutSchedulerDB {
		backRepoCheckoutScheduler.CheckoutPhaseTwoInstance(backRepo, checkoutschedulerDB)
	}
	return
}

// BackRepoCheckoutScheduler.CheckoutPhaseTwoInstance Checkouts staged instances of CheckoutScheduler to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoCheckoutScheduler *BackRepoCheckoutSchedulerStruct) CheckoutPhaseTwoInstance(backRepo *BackRepoStruct, checkoutschedulerDB *CheckoutSchedulerDB) (Error error) {

	checkoutscheduler := (*backRepoCheckoutScheduler.Map_CheckoutSchedulerDBID_CheckoutSchedulerPtr)[checkoutschedulerDB.ID]
	_ = checkoutscheduler // sometimes, there is no code generated. This lines voids the "unused variable" compilation error

	// insertion point for checkout of pointer encoding
	return
}

// CommitCheckoutScheduler allows commit of a single checkoutscheduler (if already staged)
func (backRepo *BackRepoStruct) CommitCheckoutScheduler(checkoutscheduler *models.CheckoutScheduler) {
	backRepo.BackRepoCheckoutScheduler.CommitPhaseOneInstance(checkoutscheduler)
	if id, ok := (*backRepo.BackRepoCheckoutScheduler.Map_CheckoutSchedulerPtr_CheckoutSchedulerDBID)[checkoutscheduler]; ok {
		backRepo.BackRepoCheckoutScheduler.CommitPhaseTwoInstance(backRepo, id, checkoutscheduler)
	}
}

// CommitCheckoutScheduler allows checkout of a single checkoutscheduler (if already staged and with a BackRepo id)
func (backRepo *BackRepoStruct) CheckoutCheckoutScheduler(checkoutscheduler *models.CheckoutScheduler) {
	// check if the checkoutscheduler is staged
	if _, ok := (*backRepo.BackRepoCheckoutScheduler.Map_CheckoutSchedulerPtr_CheckoutSchedulerDBID)[checkoutscheduler]; ok {

		if id, ok := (*backRepo.BackRepoCheckoutScheduler.Map_CheckoutSchedulerPtr_CheckoutSchedulerDBID)[checkoutscheduler]; ok {
			var checkoutschedulerDB CheckoutSchedulerDB
			checkoutschedulerDB.ID = id

			if err := backRepo.BackRepoCheckoutScheduler.db.First(&checkoutschedulerDB, id).Error; err != nil {
				log.Panicln("CheckoutCheckoutScheduler : Problem with getting object with id:", id)
			}
			backRepo.BackRepoCheckoutScheduler.CheckoutPhaseOneInstance(&checkoutschedulerDB)
			backRepo.BackRepoCheckoutScheduler.CheckoutPhaseTwoInstance(backRepo, &checkoutschedulerDB)
		}
	}
}

// CopyBasicFieldsFromCheckoutScheduler
func (checkoutschedulerDB *CheckoutSchedulerDB) CopyBasicFieldsFromCheckoutScheduler(checkoutscheduler *models.CheckoutScheduler) {
	// insertion point for fields commit

	checkoutschedulerDB.Name_Data.String = checkoutscheduler.Name
	checkoutschedulerDB.Name_Data.Valid = true

	checkoutschedulerDB.NbUpdatesFromFront_Data.Int64 = int64(checkoutscheduler.NbUpdatesFromFront)
	checkoutschedulerDB.NbUpdatesFromFront_Data.Valid = true
}

// CopyBasicFieldsFromCheckoutSchedulerWOP
func (checkoutschedulerDB *CheckoutSchedulerDB) CopyBasicFieldsFromCheckoutSchedulerWOP(checkoutscheduler *CheckoutSchedulerWOP) {
	// insertion point for fields commit

	checkoutschedulerDB.Name_Data.String = checkoutscheduler.Name
	checkoutschedulerDB.Name_Data.Valid = true

	checkoutschedulerDB.NbUpdatesFromFront_Data.Int64 = int64(checkoutscheduler.NbUpdatesFromFront)
	checkoutschedulerDB.NbUpdatesFromFront_Data.Valid = true
}

// CopyBasicFieldsToCheckoutScheduler
func (checkoutschedulerDB *CheckoutSchedulerDB) CopyBasicFieldsToCheckoutScheduler(checkoutscheduler *models.CheckoutScheduler) {
	// insertion point for checkout of basic fields (back repo to stage)
	checkoutscheduler.Name = checkoutschedulerDB.Name_Data.String
	checkoutscheduler.NbUpdatesFromFront = int(checkoutschedulerDB.NbUpdatesFromFront_Data.Int64)
}

// CopyBasicFieldsToCheckoutSchedulerWOP
func (checkoutschedulerDB *CheckoutSchedulerDB) CopyBasicFieldsToCheckoutSchedulerWOP(checkoutscheduler *CheckoutSchedulerWOP) {
	checkoutscheduler.ID = int(checkoutschedulerDB.ID)
	// insertion point for checkout of basic fields (back repo to stage)
	checkoutscheduler.Name = checkoutschedulerDB.Name_Data.String
	checkoutscheduler.NbUpdatesFromFront = int(checkoutschedulerDB.NbUpdatesFromFront_Data.Int64)
}

// Backup generates a json file from a slice of all CheckoutSchedulerDB instances in the backrepo
func (backRepoCheckoutScheduler *BackRepoCheckoutSchedulerStruct) Backup(dirPath string) {

	filename := filepath.Join(dirPath, "CheckoutSchedulerDB.json")

	// organize the map into an array with increasing IDs, in order to have repoductible
	// backup file
	forBackup := make([]*CheckoutSchedulerDB, 0)
	for _, checkoutschedulerDB := range *backRepoCheckoutScheduler.Map_CheckoutSchedulerDBID_CheckoutSchedulerDB {
		forBackup = append(forBackup, checkoutschedulerDB)
	}

	sort.Slice(forBackup[:], func(i, j int) bool {
		return forBackup[i].ID < forBackup[j].ID
	})

	file, err := json.MarshalIndent(forBackup, "", " ")

	if err != nil {
		log.Panic("Cannot json CheckoutScheduler ", filename, " ", err.Error())
	}

	err = ioutil.WriteFile(filename, file, 0644)
	if err != nil {
		log.Panic("Cannot write the json CheckoutScheduler file", err.Error())
	}
}

// Backup generates a json file from a slice of all CheckoutSchedulerDB instances in the backrepo
func (backRepoCheckoutScheduler *BackRepoCheckoutSchedulerStruct) BackupXL(file *xlsx.File) {

	// organize the map into an array with increasing IDs, in order to have repoductible
	// backup file
	forBackup := make([]*CheckoutSchedulerDB, 0)
	for _, checkoutschedulerDB := range *backRepoCheckoutScheduler.Map_CheckoutSchedulerDBID_CheckoutSchedulerDB {
		forBackup = append(forBackup, checkoutschedulerDB)
	}

	sort.Slice(forBackup[:], func(i, j int) bool {
		return forBackup[i].ID < forBackup[j].ID
	})

	sh, err := file.AddSheet("CheckoutScheduler")
	if err != nil {
		log.Panic("Cannot add XL file", err.Error())
	}
	_ = sh

	row := sh.AddRow()
	row.WriteSlice(&CheckoutScheduler_Fields, -1)
	for _, checkoutschedulerDB := range forBackup {

		var checkoutschedulerWOP CheckoutSchedulerWOP
		checkoutschedulerDB.CopyBasicFieldsToCheckoutSchedulerWOP(&checkoutschedulerWOP)

		row := sh.AddRow()
		row.WriteStruct(&checkoutschedulerWOP, -1)
	}
}

// RestoreXL from the "CheckoutScheduler" sheet all CheckoutSchedulerDB instances
func (backRepoCheckoutScheduler *BackRepoCheckoutSchedulerStruct) RestoreXLPhaseOne(file *xlsx.File) {

	// resets the map
	BackRepoCheckoutSchedulerid_atBckpTime_newID = make(map[uint]uint)

	sh, ok := file.Sheet["CheckoutScheduler"]
	_ = sh
	if !ok {
		log.Panic(errors.New("sheet not found"))
	}

	// log.Println("Max row is", sh.MaxRow)
	err := sh.ForEachRow(backRepoCheckoutScheduler.rowVisitorCheckoutScheduler)
	if err != nil {
		log.Panic("Err=", err)
	}
}

func (backRepoCheckoutScheduler *BackRepoCheckoutSchedulerStruct) rowVisitorCheckoutScheduler(row *xlsx.Row) error {

	log.Printf("row line %d\n", row.GetCoordinate())
	log.Println(row)

	// skip first line
	if row.GetCoordinate() > 0 {
		var checkoutschedulerWOP CheckoutSchedulerWOP
		row.ReadStruct(&checkoutschedulerWOP)

		// add the unmarshalled struct to the stage
		checkoutschedulerDB := new(CheckoutSchedulerDB)
		checkoutschedulerDB.CopyBasicFieldsFromCheckoutSchedulerWOP(&checkoutschedulerWOP)

		checkoutschedulerDB_ID_atBackupTime := checkoutschedulerDB.ID
		checkoutschedulerDB.ID = 0
		query := backRepoCheckoutScheduler.db.Create(checkoutschedulerDB)
		if query.Error != nil {
			log.Panic(query.Error)
		}
		(*backRepoCheckoutScheduler.Map_CheckoutSchedulerDBID_CheckoutSchedulerDB)[checkoutschedulerDB.ID] = checkoutschedulerDB
		BackRepoCheckoutSchedulerid_atBckpTime_newID[checkoutschedulerDB_ID_atBackupTime] = checkoutschedulerDB.ID
	}
	return nil
}

// RestorePhaseOne read the file "CheckoutSchedulerDB.json" in dirPath that stores an array
// of CheckoutSchedulerDB and stores it in the database
// the map BackRepoCheckoutSchedulerid_atBckpTime_newID is updated accordingly
func (backRepoCheckoutScheduler *BackRepoCheckoutSchedulerStruct) RestorePhaseOne(dirPath string) {

	// resets the map
	BackRepoCheckoutSchedulerid_atBckpTime_newID = make(map[uint]uint)

	filename := filepath.Join(dirPath, "CheckoutSchedulerDB.json")
	jsonFile, err := os.Open(filename)
	// if we os.Open returns an error then handle it
	if err != nil {
		log.Panic("Cannot restore/open the json CheckoutScheduler file", filename, " ", err.Error())
	}

	// read our opened jsonFile as a byte array.
	byteValue, _ := ioutil.ReadAll(jsonFile)

	var forRestore []*CheckoutSchedulerDB

	err = json.Unmarshal(byteValue, &forRestore)

	// fill up Map_CheckoutSchedulerDBID_CheckoutSchedulerDB
	for _, checkoutschedulerDB := range forRestore {

		checkoutschedulerDB_ID_atBackupTime := checkoutschedulerDB.ID
		checkoutschedulerDB.ID = 0
		query := backRepoCheckoutScheduler.db.Create(checkoutschedulerDB)
		if query.Error != nil {
			log.Panic(query.Error)
		}
		(*backRepoCheckoutScheduler.Map_CheckoutSchedulerDBID_CheckoutSchedulerDB)[checkoutschedulerDB.ID] = checkoutschedulerDB
		BackRepoCheckoutSchedulerid_atBckpTime_newID[checkoutschedulerDB_ID_atBackupTime] = checkoutschedulerDB.ID
	}

	if err != nil {
		log.Panic("Cannot restore/unmarshall json CheckoutScheduler file", err.Error())
	}
}

// RestorePhaseTwo uses all map BackRepo<CheckoutScheduler>id_atBckpTime_newID
// to compute new index
func (backRepoCheckoutScheduler *BackRepoCheckoutSchedulerStruct) RestorePhaseTwo() {

	for _, checkoutschedulerDB := range *backRepoCheckoutScheduler.Map_CheckoutSchedulerDBID_CheckoutSchedulerDB {

		// next line of code is to avert unused variable compilation error
		_ = checkoutschedulerDB

		// insertion point for reindexing pointers encoding
		// update databse with new index encoding
		query := backRepoCheckoutScheduler.db.Model(checkoutschedulerDB).Updates(*checkoutschedulerDB)
		if query.Error != nil {
			log.Panic(query.Error)
		}
	}

}

// this field is used during the restauration process.
// it stores the ID at the backup time and is used for renumbering
var BackRepoCheckoutSchedulerid_atBckpTime_newID map[uint]uint
