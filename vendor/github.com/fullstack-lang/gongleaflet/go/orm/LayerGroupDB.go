// generated by stacks/gong/go/models/orm_file_per_struct_back_repo.go
package orm

import (
	"database/sql"
	"encoding/json"
	"errors"
	"fmt"
	"io/ioutil"
	"log"
	"os"
	"path/filepath"
	"sort"
	"time"

	"gorm.io/gorm"

	"github.com/tealeg/xlsx/v3"

	"github.com/fullstack-lang/gongleaflet/go/models"
)

// dummy variable to have the import declaration wihthout compile failure (even if no code needing this import is generated)
var dummy_LayerGroup_sql sql.NullBool
var dummy_LayerGroup_time time.Duration
var dummy_LayerGroup_sort sort.Float64Slice

// LayerGroupAPI is the input in POST API
//
// for POST, API, one needs the fields of the model as well as the fields
// from associations ("Has One" and "Has Many") that are generated to
// fullfill the ORM requirements for associations
//
// swagger:model layergroupAPI
type LayerGroupAPI struct {
	gorm.Model

	models.LayerGroup

	// encoding of pointers
	LayerGroupPointersEnconding
}

// LayerGroupPointersEnconding encodes pointers to Struct and
// reverse pointers of slice of poitners to Struct
type LayerGroupPointersEnconding struct {
	// insertion for pointer fields encoding declaration
}

// LayerGroupDB describes a layergroup in the database
//
// It incorporates the GORM ID, basic fields from the model (because they can be serialized),
// the encoded version of pointers
//
// swagger:model layergroupDB
type LayerGroupDB struct {
	gorm.Model

	// insertion for basic fields declaration

	// Declation for basic field layergroupDB.Name {{BasicKind}} (to be completed)
	Name_Data sql.NullString

	// Declation for basic field layergroupDB.DisplayName {{BasicKind}} (to be completed)
	DisplayName_Data sql.NullString
	// encoding of pointers
	LayerGroupPointersEnconding
}

// LayerGroupDBs arrays layergroupDBs
// swagger:response layergroupDBsResponse
type LayerGroupDBs []LayerGroupDB

// LayerGroupDBResponse provides response
// swagger:response layergroupDBResponse
type LayerGroupDBResponse struct {
	LayerGroupDB
}

// LayerGroupWOP is a LayerGroup without pointers (WOP is an acronym for "Without Pointers")
// it holds the same basic fields but pointers are encoded into uint
type LayerGroupWOP struct {
	ID int `xlsx:"0"`

	// insertion for WOP basic fields

	Name string `xlsx:"1"`

	DisplayName string `xlsx:"2"`
	// insertion for WOP pointer fields
}

var LayerGroup_Fields = []string{
	// insertion for WOP basic fields
	"ID",
	"Name",
	"DisplayName",
}

type BackRepoLayerGroupStruct struct {
	// stores LayerGroupDB according to their gorm ID
	Map_LayerGroupDBID_LayerGroupDB *map[uint]*LayerGroupDB

	// stores LayerGroupDB ID according to LayerGroup address
	Map_LayerGroupPtr_LayerGroupDBID *map[*models.LayerGroup]uint

	// stores LayerGroup according to their gorm ID
	Map_LayerGroupDBID_LayerGroupPtr *map[uint]*models.LayerGroup

	db *gorm.DB
}

func (backRepoLayerGroup *BackRepoLayerGroupStruct) GetDB() *gorm.DB {
	return backRepoLayerGroup.db
}

// GetLayerGroupDBFromLayerGroupPtr is a handy function to access the back repo instance from the stage instance
func (backRepoLayerGroup *BackRepoLayerGroupStruct) GetLayerGroupDBFromLayerGroupPtr(layergroup *models.LayerGroup) (layergroupDB *LayerGroupDB) {
	id := (*backRepoLayerGroup.Map_LayerGroupPtr_LayerGroupDBID)[layergroup]
	layergroupDB = (*backRepoLayerGroup.Map_LayerGroupDBID_LayerGroupDB)[id]
	return
}

// BackRepoLayerGroup.Init set up the BackRepo of the LayerGroup
func (backRepoLayerGroup *BackRepoLayerGroupStruct) Init(db *gorm.DB) (Error error) {

	if backRepoLayerGroup.Map_LayerGroupDBID_LayerGroupPtr != nil {
		err := errors.New("In Init, backRepoLayerGroup.Map_LayerGroupDBID_LayerGroupPtr should be nil")
		return err
	}

	if backRepoLayerGroup.Map_LayerGroupDBID_LayerGroupDB != nil {
		err := errors.New("In Init, backRepoLayerGroup.Map_LayerGroupDBID_LayerGroupDB should be nil")
		return err
	}

	if backRepoLayerGroup.Map_LayerGroupPtr_LayerGroupDBID != nil {
		err := errors.New("In Init, backRepoLayerGroup.Map_LayerGroupPtr_LayerGroupDBID should be nil")
		return err
	}

	tmp := make(map[uint]*models.LayerGroup, 0)
	backRepoLayerGroup.Map_LayerGroupDBID_LayerGroupPtr = &tmp

	tmpDB := make(map[uint]*LayerGroupDB, 0)
	backRepoLayerGroup.Map_LayerGroupDBID_LayerGroupDB = &tmpDB

	tmpID := make(map[*models.LayerGroup]uint, 0)
	backRepoLayerGroup.Map_LayerGroupPtr_LayerGroupDBID = &tmpID

	backRepoLayerGroup.db = db
	return
}

// BackRepoLayerGroup.CommitPhaseOne commits all staged instances of LayerGroup to the BackRepo
// Phase One is the creation of instance in the database if it is not yet done to get the unique ID for each staged instance
func (backRepoLayerGroup *BackRepoLayerGroupStruct) CommitPhaseOne(stage *models.StageStruct) (Error error) {

	for layergroup := range stage.LayerGroups {
		backRepoLayerGroup.CommitPhaseOneInstance(layergroup)
	}

	// parse all backRepo instance and checks wether some instance have been unstaged
	// in this case, remove them from the back repo
	for id, layergroup := range *backRepoLayerGroup.Map_LayerGroupDBID_LayerGroupPtr {
		if _, ok := stage.LayerGroups[layergroup]; !ok {
			backRepoLayerGroup.CommitDeleteInstance(id)
		}
	}

	return
}

// BackRepoLayerGroup.CommitDeleteInstance commits deletion of LayerGroup to the BackRepo
func (backRepoLayerGroup *BackRepoLayerGroupStruct) CommitDeleteInstance(id uint) (Error error) {

	layergroup := (*backRepoLayerGroup.Map_LayerGroupDBID_LayerGroupPtr)[id]

	// layergroup is not staged anymore, remove layergroupDB
	layergroupDB := (*backRepoLayerGroup.Map_LayerGroupDBID_LayerGroupDB)[id]
	query := backRepoLayerGroup.db.Unscoped().Delete(&layergroupDB)
	if query.Error != nil {
		return query.Error
	}

	// update stores
	delete((*backRepoLayerGroup.Map_LayerGroupPtr_LayerGroupDBID), layergroup)
	delete((*backRepoLayerGroup.Map_LayerGroupDBID_LayerGroupPtr), id)
	delete((*backRepoLayerGroup.Map_LayerGroupDBID_LayerGroupDB), id)

	return
}

// BackRepoLayerGroup.CommitPhaseOneInstance commits layergroup staged instances of LayerGroup to the BackRepo
// Phase One is the creation of instance in the database if it is not yet done to get the unique ID for each staged instance
func (backRepoLayerGroup *BackRepoLayerGroupStruct) CommitPhaseOneInstance(layergroup *models.LayerGroup) (Error error) {

	// check if the layergroup is not commited yet
	if _, ok := (*backRepoLayerGroup.Map_LayerGroupPtr_LayerGroupDBID)[layergroup]; ok {
		return
	}

	// initiate layergroup
	var layergroupDB LayerGroupDB
	layergroupDB.CopyBasicFieldsFromLayerGroup(layergroup)

	query := backRepoLayerGroup.db.Create(&layergroupDB)
	if query.Error != nil {
		return query.Error
	}

	// update stores
	(*backRepoLayerGroup.Map_LayerGroupPtr_LayerGroupDBID)[layergroup] = layergroupDB.ID
	(*backRepoLayerGroup.Map_LayerGroupDBID_LayerGroupPtr)[layergroupDB.ID] = layergroup
	(*backRepoLayerGroup.Map_LayerGroupDBID_LayerGroupDB)[layergroupDB.ID] = &layergroupDB

	return
}

// BackRepoLayerGroup.CommitPhaseTwo commits all staged instances of LayerGroup to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoLayerGroup *BackRepoLayerGroupStruct) CommitPhaseTwo(backRepo *BackRepoStruct) (Error error) {

	for idx, layergroup := range *backRepoLayerGroup.Map_LayerGroupDBID_LayerGroupPtr {
		backRepoLayerGroup.CommitPhaseTwoInstance(backRepo, idx, layergroup)
	}

	return
}

// BackRepoLayerGroup.CommitPhaseTwoInstance commits {{structname }} of models.LayerGroup to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoLayerGroup *BackRepoLayerGroupStruct) CommitPhaseTwoInstance(backRepo *BackRepoStruct, idx uint, layergroup *models.LayerGroup) (Error error) {

	// fetch matching layergroupDB
	if layergroupDB, ok := (*backRepoLayerGroup.Map_LayerGroupDBID_LayerGroupDB)[idx]; ok {

		layergroupDB.CopyBasicFieldsFromLayerGroup(layergroup)

		// insertion point for translating pointers encodings into actual pointers
		query := backRepoLayerGroup.db.Save(&layergroupDB)
		if query.Error != nil {
			return query.Error
		}

	} else {
		err := errors.New(
			fmt.Sprintf("Unkown LayerGroup intance %s", layergroup.Name))
		return err
	}

	return
}

// BackRepoLayerGroup.CheckoutPhaseOne Checkouts all BackRepo instances to the Stage
//
// Phase One will result in having instances on the stage aligned with the back repo
// pointers are not initialized yet (this is for pahse two)
//
func (backRepoLayerGroup *BackRepoLayerGroupStruct) CheckoutPhaseOne() (Error error) {

	layergroupDBArray := make([]LayerGroupDB, 0)
	query := backRepoLayerGroup.db.Find(&layergroupDBArray)
	if query.Error != nil {
		return query.Error
	}

	// list of instances to be removed
	// start from the initial map on the stage and remove instances that have been checked out
	layergroupInstancesToBeRemovedFromTheStage := make(map[*models.LayerGroup]struct{})
	for key, value := range models.Stage.LayerGroups {
		layergroupInstancesToBeRemovedFromTheStage[key] = value
	}

	// copy orm objects to the the map
	for _, layergroupDB := range layergroupDBArray {
		backRepoLayerGroup.CheckoutPhaseOneInstance(&layergroupDB)

		// do not remove this instance from the stage, therefore
		// remove instance from the list of instances to be be removed from the stage
		layergroup, ok := (*backRepoLayerGroup.Map_LayerGroupDBID_LayerGroupPtr)[layergroupDB.ID]
		if ok {
			delete(layergroupInstancesToBeRemovedFromTheStage, layergroup)
		}
	}

	// remove from stage and back repo's 3 maps all layergroups that are not in the checkout
	for layergroup := range layergroupInstancesToBeRemovedFromTheStage {
		layergroup.Unstage()

		// remove instance from the back repo 3 maps
		layergroupID := (*backRepoLayerGroup.Map_LayerGroupPtr_LayerGroupDBID)[layergroup]
		delete((*backRepoLayerGroup.Map_LayerGroupPtr_LayerGroupDBID), layergroup)
		delete((*backRepoLayerGroup.Map_LayerGroupDBID_LayerGroupDB), layergroupID)
		delete((*backRepoLayerGroup.Map_LayerGroupDBID_LayerGroupPtr), layergroupID)
	}

	return
}

// CheckoutPhaseOneInstance takes a layergroupDB that has been found in the DB, updates the backRepo and stages the
// models version of the layergroupDB
func (backRepoLayerGroup *BackRepoLayerGroupStruct) CheckoutPhaseOneInstance(layergroupDB *LayerGroupDB) (Error error) {

	layergroup, ok := (*backRepoLayerGroup.Map_LayerGroupDBID_LayerGroupPtr)[layergroupDB.ID]
	if !ok {
		layergroup = new(models.LayerGroup)

		(*backRepoLayerGroup.Map_LayerGroupDBID_LayerGroupPtr)[layergroupDB.ID] = layergroup
		(*backRepoLayerGroup.Map_LayerGroupPtr_LayerGroupDBID)[layergroup] = layergroupDB.ID

		// append model store with the new element
		layergroup.Name = layergroupDB.Name_Data.String
		layergroup.Stage()
	}
	layergroupDB.CopyBasicFieldsToLayerGroup(layergroup)

	// preserve pointer to layergroupDB. Otherwise, pointer will is recycled and the map of pointers
	// Map_LayerGroupDBID_LayerGroupDB)[layergroupDB hold variable pointers
	layergroupDB_Data := *layergroupDB
	preservedPtrToLayerGroup := &layergroupDB_Data
	(*backRepoLayerGroup.Map_LayerGroupDBID_LayerGroupDB)[layergroupDB.ID] = preservedPtrToLayerGroup

	return
}

// BackRepoLayerGroup.CheckoutPhaseTwo Checkouts all staged instances of LayerGroup to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoLayerGroup *BackRepoLayerGroupStruct) CheckoutPhaseTwo(backRepo *BackRepoStruct) (Error error) {

	// parse all DB instance and update all pointer fields of the translated models instance
	for _, layergroupDB := range *backRepoLayerGroup.Map_LayerGroupDBID_LayerGroupDB {
		backRepoLayerGroup.CheckoutPhaseTwoInstance(backRepo, layergroupDB)
	}
	return
}

// BackRepoLayerGroup.CheckoutPhaseTwoInstance Checkouts staged instances of LayerGroup to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoLayerGroup *BackRepoLayerGroupStruct) CheckoutPhaseTwoInstance(backRepo *BackRepoStruct, layergroupDB *LayerGroupDB) (Error error) {

	layergroup := (*backRepoLayerGroup.Map_LayerGroupDBID_LayerGroupPtr)[layergroupDB.ID]
	_ = layergroup // sometimes, there is no code generated. This lines voids the "unused variable" compilation error

	// insertion point for checkout of pointer encoding
	return
}

// CommitLayerGroup allows commit of a single layergroup (if already staged)
func (backRepo *BackRepoStruct) CommitLayerGroup(layergroup *models.LayerGroup) {
	backRepo.BackRepoLayerGroup.CommitPhaseOneInstance(layergroup)
	if id, ok := (*backRepo.BackRepoLayerGroup.Map_LayerGroupPtr_LayerGroupDBID)[layergroup]; ok {
		backRepo.BackRepoLayerGroup.CommitPhaseTwoInstance(backRepo, id, layergroup)
	}
}

// CommitLayerGroup allows checkout of a single layergroup (if already staged and with a BackRepo id)
func (backRepo *BackRepoStruct) CheckoutLayerGroup(layergroup *models.LayerGroup) {
	// check if the layergroup is staged
	if _, ok := (*backRepo.BackRepoLayerGroup.Map_LayerGroupPtr_LayerGroupDBID)[layergroup]; ok {

		if id, ok := (*backRepo.BackRepoLayerGroup.Map_LayerGroupPtr_LayerGroupDBID)[layergroup]; ok {
			var layergroupDB LayerGroupDB
			layergroupDB.ID = id

			if err := backRepo.BackRepoLayerGroup.db.First(&layergroupDB, id).Error; err != nil {
				log.Panicln("CheckoutLayerGroup : Problem with getting object with id:", id)
			}
			backRepo.BackRepoLayerGroup.CheckoutPhaseOneInstance(&layergroupDB)
			backRepo.BackRepoLayerGroup.CheckoutPhaseTwoInstance(backRepo, &layergroupDB)
		}
	}
}

// CopyBasicFieldsFromLayerGroup
func (layergroupDB *LayerGroupDB) CopyBasicFieldsFromLayerGroup(layergroup *models.LayerGroup) {
	// insertion point for fields commit

	layergroupDB.Name_Data.String = layergroup.Name
	layergroupDB.Name_Data.Valid = true

	layergroupDB.DisplayName_Data.String = layergroup.DisplayName
	layergroupDB.DisplayName_Data.Valid = true
}

// CopyBasicFieldsFromLayerGroupWOP
func (layergroupDB *LayerGroupDB) CopyBasicFieldsFromLayerGroupWOP(layergroup *LayerGroupWOP) {
	// insertion point for fields commit

	layergroupDB.Name_Data.String = layergroup.Name
	layergroupDB.Name_Data.Valid = true

	layergroupDB.DisplayName_Data.String = layergroup.DisplayName
	layergroupDB.DisplayName_Data.Valid = true
}

// CopyBasicFieldsToLayerGroup
func (layergroupDB *LayerGroupDB) CopyBasicFieldsToLayerGroup(layergroup *models.LayerGroup) {
	// insertion point for checkout of basic fields (back repo to stage)
	layergroup.Name = layergroupDB.Name_Data.String
	layergroup.DisplayName = layergroupDB.DisplayName_Data.String
}

// CopyBasicFieldsToLayerGroupWOP
func (layergroupDB *LayerGroupDB) CopyBasicFieldsToLayerGroupWOP(layergroup *LayerGroupWOP) {
	layergroup.ID = int(layergroupDB.ID)
	// insertion point for checkout of basic fields (back repo to stage)
	layergroup.Name = layergroupDB.Name_Data.String
	layergroup.DisplayName = layergroupDB.DisplayName_Data.String
}

// Backup generates a json file from a slice of all LayerGroupDB instances in the backrepo
func (backRepoLayerGroup *BackRepoLayerGroupStruct) Backup(dirPath string) {

	filename := filepath.Join(dirPath, "LayerGroupDB.json")

	// organize the map into an array with increasing IDs, in order to have repoductible
	// backup file
	forBackup := make([]*LayerGroupDB, 0)
	for _, layergroupDB := range *backRepoLayerGroup.Map_LayerGroupDBID_LayerGroupDB {
		forBackup = append(forBackup, layergroupDB)
	}

	sort.Slice(forBackup[:], func(i, j int) bool {
		return forBackup[i].ID < forBackup[j].ID
	})

	file, err := json.MarshalIndent(forBackup, "", " ")

	if err != nil {
		log.Panic("Cannot json LayerGroup ", filename, " ", err.Error())
	}

	err = ioutil.WriteFile(filename, file, 0644)
	if err != nil {
		log.Panic("Cannot write the json LayerGroup file", err.Error())
	}
}

// Backup generates a json file from a slice of all LayerGroupDB instances in the backrepo
func (backRepoLayerGroup *BackRepoLayerGroupStruct) BackupXL(file *xlsx.File) {

	// organize the map into an array with increasing IDs, in order to have repoductible
	// backup file
	forBackup := make([]*LayerGroupDB, 0)
	for _, layergroupDB := range *backRepoLayerGroup.Map_LayerGroupDBID_LayerGroupDB {
		forBackup = append(forBackup, layergroupDB)
	}

	sort.Slice(forBackup[:], func(i, j int) bool {
		return forBackup[i].ID < forBackup[j].ID
	})

	sh, err := file.AddSheet("LayerGroup")
	if err != nil {
		log.Panic("Cannot add XL file", err.Error())
	}
	_ = sh

	row := sh.AddRow()
	row.WriteSlice(&LayerGroup_Fields, -1)
	for _, layergroupDB := range forBackup {

		var layergroupWOP LayerGroupWOP
		layergroupDB.CopyBasicFieldsToLayerGroupWOP(&layergroupWOP)

		row := sh.AddRow()
		row.WriteStruct(&layergroupWOP, -1)
	}
}

// RestoreXL from the "LayerGroup" sheet all LayerGroupDB instances
func (backRepoLayerGroup *BackRepoLayerGroupStruct) RestoreXLPhaseOne(file *xlsx.File) {

	// resets the map
	BackRepoLayerGroupid_atBckpTime_newID = make(map[uint]uint)

	sh, ok := file.Sheet["LayerGroup"]
	_ = sh
	if !ok {
		log.Panic(errors.New("sheet not found"))
	}

	// log.Println("Max row is", sh.MaxRow)
	err := sh.ForEachRow(backRepoLayerGroup.rowVisitorLayerGroup)
	if err != nil {
		log.Panic("Err=", err)
	}
}

func (backRepoLayerGroup *BackRepoLayerGroupStruct) rowVisitorLayerGroup(row *xlsx.Row) error {

	log.Printf("row line %d\n", row.GetCoordinate())
	log.Println(row)

	// skip first line
	if row.GetCoordinate() > 0 {
		var layergroupWOP LayerGroupWOP
		row.ReadStruct(&layergroupWOP)

		// add the unmarshalled struct to the stage
		layergroupDB := new(LayerGroupDB)
		layergroupDB.CopyBasicFieldsFromLayerGroupWOP(&layergroupWOP)

		layergroupDB_ID_atBackupTime := layergroupDB.ID
		layergroupDB.ID = 0
		query := backRepoLayerGroup.db.Create(layergroupDB)
		if query.Error != nil {
			log.Panic(query.Error)
		}
		(*backRepoLayerGroup.Map_LayerGroupDBID_LayerGroupDB)[layergroupDB.ID] = layergroupDB
		BackRepoLayerGroupid_atBckpTime_newID[layergroupDB_ID_atBackupTime] = layergroupDB.ID
	}
	return nil
}

// RestorePhaseOne read the file "LayerGroupDB.json" in dirPath that stores an array
// of LayerGroupDB and stores it in the database
// the map BackRepoLayerGroupid_atBckpTime_newID is updated accordingly
func (backRepoLayerGroup *BackRepoLayerGroupStruct) RestorePhaseOne(dirPath string) {

	// resets the map
	BackRepoLayerGroupid_atBckpTime_newID = make(map[uint]uint)

	filename := filepath.Join(dirPath, "LayerGroupDB.json")
	jsonFile, err := os.Open(filename)
	// if we os.Open returns an error then handle it
	if err != nil {
		log.Panic("Cannot restore/open the json LayerGroup file", filename, " ", err.Error())
	}

	// read our opened jsonFile as a byte array.
	byteValue, _ := ioutil.ReadAll(jsonFile)

	var forRestore []*LayerGroupDB

	err = json.Unmarshal(byteValue, &forRestore)

	// fill up Map_LayerGroupDBID_LayerGroupDB
	for _, layergroupDB := range forRestore {

		layergroupDB_ID_atBackupTime := layergroupDB.ID
		layergroupDB.ID = 0
		query := backRepoLayerGroup.db.Create(layergroupDB)
		if query.Error != nil {
			log.Panic(query.Error)
		}
		(*backRepoLayerGroup.Map_LayerGroupDBID_LayerGroupDB)[layergroupDB.ID] = layergroupDB
		BackRepoLayerGroupid_atBckpTime_newID[layergroupDB_ID_atBackupTime] = layergroupDB.ID
	}

	if err != nil {
		log.Panic("Cannot restore/unmarshall json LayerGroup file", err.Error())
	}
}

// RestorePhaseTwo uses all map BackRepo<LayerGroup>id_atBckpTime_newID
// to compute new index
func (backRepoLayerGroup *BackRepoLayerGroupStruct) RestorePhaseTwo() {

	for _, layergroupDB := range *backRepoLayerGroup.Map_LayerGroupDBID_LayerGroupDB {

		// next line of code is to avert unused variable compilation error
		_ = layergroupDB

		// insertion point for reindexing pointers encoding
		// update databse with new index encoding
		query := backRepoLayerGroup.db.Model(layergroupDB).Updates(*layergroupDB)
		if query.Error != nil {
			log.Panic(query.Error)
		}
	}

}

// this field is used during the restauration process.
// it stores the ID at the backup time and is used for renumbering
var BackRepoLayerGroupid_atBckpTime_newID map[uint]uint
