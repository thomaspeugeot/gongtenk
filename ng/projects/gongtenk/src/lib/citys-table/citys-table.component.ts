// generated by gong
import { Component, OnInit, AfterViewInit, ViewChild, Inject, Optional } from '@angular/core';
import { BehaviorSubject } from 'rxjs'
import { MatSort } from '@angular/material/sort';
import { MatPaginator } from '@angular/material/paginator';
import { MatTableDataSource } from '@angular/material/table';
import { MatButton } from '@angular/material/button'

import { MatDialogRef, MAT_DIALOG_DATA, MatDialog } from '@angular/material/dialog'
import { DialogData, FrontRepoService, FrontRepo, SelectionMode } from '../front-repo.service'
import { NullInt64 } from '../null-int64'
import { SelectionModel } from '@angular/cdk/collections';

const allowMultiSelect = true;

import { Router, RouterState } from '@angular/router';
import { CityDB } from '../city-db'
import { CityService } from '../city.service'

// TableComponent is initilizaed from different routes
// TableComponentMode detail different cases 
enum TableComponentMode {
  DISPLAY_MODE,
  ONE_MANY_ASSOCIATION_MODE,
  MANY_MANY_ASSOCIATION_MODE,
}

// generated table component
@Component({
  selector: 'app-citystable',
  templateUrl: './citys-table.component.html',
  styleUrls: ['./citys-table.component.css'],
})
export class CitysTableComponent implements OnInit {

  // mode at invocation
  mode: TableComponentMode = TableComponentMode.DISPLAY_MODE

  // used if the component is called as a selection component of City instances
  selection: SelectionModel<CityDB> = new (SelectionModel)
  initialSelection = new Array<CityDB>()

  // the data source for the table
  citys: CityDB[] = []
  matTableDataSource: MatTableDataSource<CityDB> = new (MatTableDataSource)

  // front repo, that will be referenced by this.citys
  frontRepo: FrontRepo = new (FrontRepo)

  // displayedColumns is referenced by the MatTable component for specify what columns
  // have to be displayed and in what order
  displayedColumns: string[];

  // for sorting & pagination
  @ViewChild(MatSort)
  sort: MatSort | undefined
  @ViewChild(MatPaginator)
  paginator: MatPaginator | undefined;

  ngAfterViewInit() {

    // enable sorting on all fields (including pointers and reverse pointer)
    this.matTableDataSource.sortingDataAccessor = (cityDB: CityDB, property: string) => {
      switch (property) {
        case 'ID':
          return cityDB.ID

        // insertion point for specific sorting accessor
        case 'Name':
          return cityDB.Name;

        case 'Lat':
          return cityDB.Lat;

        case 'Lng':
          return cityDB.Lng;

        case 'Population':
          return cityDB.Population;

        case 'Country':
          return (cityDB.Country ? cityDB.Country.Name : '');

        default:
          console.assert(false, "Unknown field")
          return "";
      }
    };

    // enable filtering on all fields (including pointers and reverse pointer, which is not done by default)
    this.matTableDataSource.filterPredicate = (cityDB: CityDB, filter: string) => {

      // filtering is based on finding a lower case filter into a concatenated string
      // the cityDB properties
      let mergedContent = ""

      // insertion point for merging of fields
      mergedContent += cityDB.Name.toLowerCase()
      mergedContent += cityDB.Lat.toString()
      mergedContent += cityDB.Lng.toString()
      mergedContent += cityDB.Population.toString()
      if (cityDB.Country) {
        mergedContent += cityDB.Country.Name.toLowerCase()
      }

      let isSelected = mergedContent.includes(filter.toLowerCase())
      return isSelected
    };

    this.matTableDataSource.sort = this.sort!
    this.matTableDataSource.paginator = this.paginator!
  }

  applyFilter(event: Event) {
    const filterValue = (event.target as HTMLInputElement).value;
    this.matTableDataSource.filter = filterValue.trim().toLowerCase();
  }

  constructor(
    private cityService: CityService,
    private frontRepoService: FrontRepoService,

    // not null if the component is called as a selection component of city instances
    public dialogRef: MatDialogRef<CitysTableComponent>,
    @Optional() @Inject(MAT_DIALOG_DATA) public dialogData: DialogData,

    private router: Router,
  ) {

    // compute mode
    if (dialogData == undefined) {
      this.mode = TableComponentMode.DISPLAY_MODE
    } else {
      switch (dialogData.SelectionMode) {
        case SelectionMode.ONE_MANY_ASSOCIATION_MODE:
          this.mode = TableComponentMode.ONE_MANY_ASSOCIATION_MODE
          break
        case SelectionMode.MANY_MANY_ASSOCIATION_MODE:
          this.mode = TableComponentMode.MANY_MANY_ASSOCIATION_MODE
          break
        default:
      }
    }

    // observable for changes in structs
    this.cityService.CityServiceChanged.subscribe(
      message => {
        if (message == "post" || message == "update" || message == "delete") {
          this.getCitys()
        }
      }
    )
    if (this.mode == TableComponentMode.DISPLAY_MODE) {
      this.displayedColumns = ['ID', 'Edit', 'Delete', // insertion point for columns to display
        "Name",
        "Lat",
        "Lng",
        "Population",
        "Country",
      ]
    } else {
      this.displayedColumns = ['select', 'ID', // insertion point for columns to display
        "Name",
        "Lat",
        "Lng",
        "Population",
        "Country",
      ]
      this.selection = new SelectionModel<CityDB>(allowMultiSelect, this.initialSelection);
    }

  }

  ngOnInit(): void {
    this.getCitys()
    this.matTableDataSource = new MatTableDataSource(this.citys)
  }

  getCitys(): void {
    this.frontRepoService.pull().subscribe(
      frontRepo => {
        this.frontRepo = frontRepo

        this.citys = this.frontRepo.Citys_array;

        // insertion point for variables Recoveries

        // in case the component is called as a selection component
        if (this.mode == TableComponentMode.ONE_MANY_ASSOCIATION_MODE) {
          for (let city of this.citys) {
            let ID = this.dialogData.ID
            let revPointer = city[this.dialogData.ReversePointer as keyof CityDB] as unknown as NullInt64
            if (revPointer.Int64 == ID) {
              this.initialSelection.push(city)
            }
            this.selection = new SelectionModel<CityDB>(allowMultiSelect, this.initialSelection);
          }
        }

        if (this.mode == TableComponentMode.MANY_MANY_ASSOCIATION_MODE) {

          let mapOfSourceInstances = this.frontRepo[this.dialogData.SourceStruct + "s" as keyof FrontRepo] as Map<number, CityDB>
          let sourceInstance = mapOfSourceInstances.get(this.dialogData.ID)!

          let sourceField = sourceInstance[this.dialogData.SourceField as keyof typeof sourceInstance]! as unknown as CityDB[]
          for (let associationInstance of sourceField) {
            let city = associationInstance[this.dialogData.IntermediateStructField as keyof typeof associationInstance] as unknown as CityDB
            this.initialSelection.push(city)
          }

          this.selection = new SelectionModel<CityDB>(allowMultiSelect, this.initialSelection);
        }

        // update the mat table data source
        this.matTableDataSource.data = this.citys
      }
    )
  }

  // newCity initiate a new city
  // create a new City objet
  newCity() {
  }

  deleteCity(cityID: number, city: CityDB) {
    // list of citys is truncated of city before the delete
    this.citys = this.citys.filter(h => h !== city);

    this.cityService.deleteCity(cityID).subscribe(
      city => {
        this.cityService.CityServiceChanged.next("delete")
      }
    );
  }

  editCity(cityID: number, city: CityDB) {

  }

  // display city in router
  displayCityInRouter(cityID: number) {
    this.router.navigate(["gongtenk_go-" + "city-display", cityID])
  }

  // set editor outlet
  setEditorRouterOutlet(cityID: number) {
    this.router.navigate([{
      outlets: {
        gongtenk_go_editor: ["gongtenk_go-" + "city-detail", cityID]
      }
    }]);
  }

  // set presentation outlet
  setPresentationRouterOutlet(cityID: number) {
    this.router.navigate([{
      outlets: {
        gongtenk_go_presentation: ["gongtenk_go-" + "city-presentation", cityID]
      }
    }]);
  }

  /** Whether the number of selected elements matches the total number of rows. */
  isAllSelected() {
    const numSelected = this.selection.selected.length;
    const numRows = this.citys.length;
    return numSelected === numRows;
  }

  /** Selects all rows if they are not all selected; otherwise clear selection. */
  masterToggle() {
    this.isAllSelected() ?
      this.selection.clear() :
      this.citys.forEach(row => this.selection.select(row));
  }

  save() {

    if (this.mode == TableComponentMode.ONE_MANY_ASSOCIATION_MODE) {

      let toUpdate = new Set<CityDB>()

      // reset all initial selection of city that belong to city
      for (let city of this.initialSelection) {
        let index = city[this.dialogData.ReversePointer as keyof CityDB] as unknown as NullInt64
        index.Int64 = 0
        index.Valid = true
        toUpdate.add(city)

      }

      // from selection, set city that belong to city
      for (let city of this.selection.selected) {
        let ID = this.dialogData.ID as number
        let reversePointer = city[this.dialogData.ReversePointer as keyof CityDB] as unknown as NullInt64
        reversePointer.Int64 = ID
        reversePointer.Valid = true
        toUpdate.add(city)
      }


      // update all city (only update selection & initial selection)
      for (let city of toUpdate) {
        this.cityService.updateCity(city)
          .subscribe(city => {
            this.cityService.CityServiceChanged.next("update")
          });
      }
    }

    if (this.mode == TableComponentMode.MANY_MANY_ASSOCIATION_MODE) {

      // get the source instance via the map of instances in the front repo
      let mapOfSourceInstances = this.frontRepo[this.dialogData.SourceStruct + "s" as keyof FrontRepo] as Map<number, CityDB>
      let sourceInstance = mapOfSourceInstances.get(this.dialogData.ID)!

      // First, parse all instance of the association struct and remove the instance
      // that have unselect
      let unselectedCity = new Set<number>()
      for (let city of this.initialSelection) {
        if (this.selection.selected.includes(city)) {
          // console.log("city " + city.Name + " is still selected")
        } else {
          console.log("city " + city.Name + " has been unselected")
          unselectedCity.add(city.ID)
          console.log("is unselected " + unselectedCity.has(city.ID))
        }
      }

      // delete the association instance
      let associationInstance = sourceInstance[this.dialogData.SourceField as keyof typeof sourceInstance]
      let city = associationInstance![this.dialogData.IntermediateStructField as keyof typeof associationInstance] as unknown as CityDB
      if (unselectedCity.has(city.ID)) {
        this.frontRepoService.deleteService(this.dialogData.IntermediateStruct, associationInstance)


      }

      // is the source array is empty create it
      if (sourceInstance[this.dialogData.SourceField as keyof typeof sourceInstance] == undefined) {
        (sourceInstance[this.dialogData.SourceField as keyof typeof sourceInstance] as unknown as Array<CityDB>) = new Array<CityDB>()
      }

      // second, parse all instance of the selected
      if (sourceInstance[this.dialogData.SourceField as keyof typeof sourceInstance]) {
        this.selection.selected.forEach(
          city => {
            if (!this.initialSelection.includes(city)) {
              // console.log("city " + city.Name + " has been added to the selection")

              let associationInstance = {
                Name: sourceInstance["Name"] + "-" + city.Name,
              }

              let index = associationInstance[this.dialogData.IntermediateStructField + "ID" as keyof typeof associationInstance] as unknown as NullInt64
              index.Int64 = city.ID
              index.Valid = true

              let indexDB = associationInstance[this.dialogData.IntermediateStructField + "DBID" as keyof typeof associationInstance] as unknown as NullInt64
              indexDB.Int64 = city.ID
              index.Valid = true

              this.frontRepoService.postService(this.dialogData.IntermediateStruct, associationInstance)

            } else {
              // console.log("city " + city.Name + " is still selected")
            }
          }
        )
      }

      // this.selection = new SelectionModel<CityDB>(allowMultiSelect, this.initialSelection);
    }

    // why pizza ?
    this.dialogRef.close('Pizza!');
  }
}
