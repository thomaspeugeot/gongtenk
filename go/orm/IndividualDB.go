// generated by stacks/gong/go/models/orm_file_per_struct_back_repo.go
package orm

import (
	"database/sql"
	"encoding/json"
	"errors"
	"fmt"
	"io/ioutil"
	"log"
	"os"
	"path/filepath"
	"sort"
	"time"

	"gorm.io/gorm"

	"github.com/tealeg/xlsx/v3"

	"github.com/thomaspeugeot/gongtenk/go/models"
)

// dummy variable to have the import declaration wihthout compile failure (even if no code needing this import is generated)
var dummy_Individual_sql sql.NullBool
var dummy_Individual_time time.Duration
var dummy_Individual_sort sort.Float64Slice

// IndividualAPI is the input in POST API
//
// for POST, API, one needs the fields of the model as well as the fields
// from associations ("Has One" and "Has Many") that are generated to
// fullfill the ORM requirements for associations
//
// swagger:model individualAPI
type IndividualAPI struct {
	gorm.Model

	models.Individual

	// encoding of pointers
	IndividualPointersEnconding
}

// IndividualPointersEnconding encodes pointers to Struct and
// reverse pointers of slice of poitners to Struct
type IndividualPointersEnconding struct {
	// insertion for pointer fields encoding declaration
}

// IndividualDB describes a individual in the database
//
// It incorporates the GORM ID, basic fields from the model (because they can be serialized),
// the encoded version of pointers
//
// swagger:model individualDB
type IndividualDB struct {
	gorm.Model

	// insertion for basic fields declaration

	// Declation for basic field individualDB.Name {{BasicKind}} (to be completed)
	Name_Data sql.NullString
	// encoding of pointers
	IndividualPointersEnconding
}

// IndividualDBs arrays individualDBs
// swagger:response individualDBsResponse
type IndividualDBs []IndividualDB

// IndividualDBResponse provides response
// swagger:response individualDBResponse
type IndividualDBResponse struct {
	IndividualDB
}

// IndividualWOP is a Individual without pointers (WOP is an acronym for "Without Pointers")
// it holds the same basic fields but pointers are encoded into uint
type IndividualWOP struct {
	ID int `xlsx:"0"`

	// insertion for WOP basic fields

	Name string `xlsx:"1"`
	// insertion for WOP pointer fields
}

var Individual_Fields = []string{
	// insertion for WOP basic fields
	"ID",
	"Name",
}

type BackRepoIndividualStruct struct {
	// stores IndividualDB according to their gorm ID
	Map_IndividualDBID_IndividualDB *map[uint]*IndividualDB

	// stores IndividualDB ID according to Individual address
	Map_IndividualPtr_IndividualDBID *map[*models.Individual]uint

	// stores Individual according to their gorm ID
	Map_IndividualDBID_IndividualPtr *map[uint]*models.Individual

	db *gorm.DB
}

func (backRepoIndividual *BackRepoIndividualStruct) GetDB() *gorm.DB {
	return backRepoIndividual.db
}

// GetIndividualDBFromIndividualPtr is a handy function to access the back repo instance from the stage instance
func (backRepoIndividual *BackRepoIndividualStruct) GetIndividualDBFromIndividualPtr(individual *models.Individual) (individualDB *IndividualDB) {
	id := (*backRepoIndividual.Map_IndividualPtr_IndividualDBID)[individual]
	individualDB = (*backRepoIndividual.Map_IndividualDBID_IndividualDB)[id]
	return
}

// BackRepoIndividual.Init set up the BackRepo of the Individual
func (backRepoIndividual *BackRepoIndividualStruct) Init(db *gorm.DB) (Error error) {

	if backRepoIndividual.Map_IndividualDBID_IndividualPtr != nil {
		err := errors.New("In Init, backRepoIndividual.Map_IndividualDBID_IndividualPtr should be nil")
		return err
	}

	if backRepoIndividual.Map_IndividualDBID_IndividualDB != nil {
		err := errors.New("In Init, backRepoIndividual.Map_IndividualDBID_IndividualDB should be nil")
		return err
	}

	if backRepoIndividual.Map_IndividualPtr_IndividualDBID != nil {
		err := errors.New("In Init, backRepoIndividual.Map_IndividualPtr_IndividualDBID should be nil")
		return err
	}

	tmp := make(map[uint]*models.Individual, 0)
	backRepoIndividual.Map_IndividualDBID_IndividualPtr = &tmp

	tmpDB := make(map[uint]*IndividualDB, 0)
	backRepoIndividual.Map_IndividualDBID_IndividualDB = &tmpDB

	tmpID := make(map[*models.Individual]uint, 0)
	backRepoIndividual.Map_IndividualPtr_IndividualDBID = &tmpID

	backRepoIndividual.db = db
	return
}

// BackRepoIndividual.CommitPhaseOne commits all staged instances of Individual to the BackRepo
// Phase One is the creation of instance in the database if it is not yet done to get the unique ID for each staged instance
func (backRepoIndividual *BackRepoIndividualStruct) CommitPhaseOne(stage *models.StageStruct) (Error error) {

	for individual := range stage.Individuals {
		backRepoIndividual.CommitPhaseOneInstance(individual)
	}

	// parse all backRepo instance and checks wether some instance have been unstaged
	// in this case, remove them from the back repo
	for id, individual := range *backRepoIndividual.Map_IndividualDBID_IndividualPtr {
		if _, ok := stage.Individuals[individual]; !ok {
			backRepoIndividual.CommitDeleteInstance(id)
		}
	}

	return
}

// BackRepoIndividual.CommitDeleteInstance commits deletion of Individual to the BackRepo
func (backRepoIndividual *BackRepoIndividualStruct) CommitDeleteInstance(id uint) (Error error) {

	individual := (*backRepoIndividual.Map_IndividualDBID_IndividualPtr)[id]

	// individual is not staged anymore, remove individualDB
	individualDB := (*backRepoIndividual.Map_IndividualDBID_IndividualDB)[id]
	query := backRepoIndividual.db.Unscoped().Delete(&individualDB)
	if query.Error != nil {
		return query.Error
	}

	// update stores
	delete((*backRepoIndividual.Map_IndividualPtr_IndividualDBID), individual)
	delete((*backRepoIndividual.Map_IndividualDBID_IndividualPtr), id)
	delete((*backRepoIndividual.Map_IndividualDBID_IndividualDB), id)

	return
}

// BackRepoIndividual.CommitPhaseOneInstance commits individual staged instances of Individual to the BackRepo
// Phase One is the creation of instance in the database if it is not yet done to get the unique ID for each staged instance
func (backRepoIndividual *BackRepoIndividualStruct) CommitPhaseOneInstance(individual *models.Individual) (Error error) {

	// check if the individual is not commited yet
	if _, ok := (*backRepoIndividual.Map_IndividualPtr_IndividualDBID)[individual]; ok {
		return
	}

	// initiate individual
	var individualDB IndividualDB
	individualDB.CopyBasicFieldsFromIndividual(individual)

	query := backRepoIndividual.db.Create(&individualDB)
	if query.Error != nil {
		return query.Error
	}

	// update stores
	(*backRepoIndividual.Map_IndividualPtr_IndividualDBID)[individual] = individualDB.ID
	(*backRepoIndividual.Map_IndividualDBID_IndividualPtr)[individualDB.ID] = individual
	(*backRepoIndividual.Map_IndividualDBID_IndividualDB)[individualDB.ID] = &individualDB

	return
}

// BackRepoIndividual.CommitPhaseTwo commits all staged instances of Individual to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoIndividual *BackRepoIndividualStruct) CommitPhaseTwo(backRepo *BackRepoStruct) (Error error) {

	for idx, individual := range *backRepoIndividual.Map_IndividualDBID_IndividualPtr {
		backRepoIndividual.CommitPhaseTwoInstance(backRepo, idx, individual)
	}

	return
}

// BackRepoIndividual.CommitPhaseTwoInstance commits {{structname }} of models.Individual to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoIndividual *BackRepoIndividualStruct) CommitPhaseTwoInstance(backRepo *BackRepoStruct, idx uint, individual *models.Individual) (Error error) {

	// fetch matching individualDB
	if individualDB, ok := (*backRepoIndividual.Map_IndividualDBID_IndividualDB)[idx]; ok {

		individualDB.CopyBasicFieldsFromIndividual(individual)

		// insertion point for translating pointers encodings into actual pointers
		query := backRepoIndividual.db.Save(&individualDB)
		if query.Error != nil {
			return query.Error
		}

	} else {
		err := errors.New(
			fmt.Sprintf("Unkown Individual intance %s", individual.Name))
		return err
	}

	return
}

// BackRepoIndividual.CheckoutPhaseOne Checkouts all BackRepo instances to the Stage
//
// Phase One will result in having instances on the stage aligned with the back repo
// pointers are not initialized yet (this is for pahse two)
//
func (backRepoIndividual *BackRepoIndividualStruct) CheckoutPhaseOne() (Error error) {

	individualDBArray := make([]IndividualDB, 0)
	query := backRepoIndividual.db.Find(&individualDBArray)
	if query.Error != nil {
		return query.Error
	}

	// list of instances to be removed
	// start from the initial map on the stage and remove instances that have been checked out
	individualInstancesToBeRemovedFromTheStage := make(map[*models.Individual]struct{})
	for key, value := range models.Stage.Individuals {
		individualInstancesToBeRemovedFromTheStage[key] = value
	}

	// copy orm objects to the the map
	for _, individualDB := range individualDBArray {
		backRepoIndividual.CheckoutPhaseOneInstance(&individualDB)

		// do not remove this instance from the stage, therefore
		// remove instance from the list of instances to be be removed from the stage
		individual, ok := (*backRepoIndividual.Map_IndividualDBID_IndividualPtr)[individualDB.ID]
		if ok {
			delete(individualInstancesToBeRemovedFromTheStage, individual)
		}
	}

	// remove from stage and back repo's 3 maps all individuals that are not in the checkout
	for individual := range individualInstancesToBeRemovedFromTheStage {
		individual.Unstage()

		// remove instance from the back repo 3 maps
		individualID := (*backRepoIndividual.Map_IndividualPtr_IndividualDBID)[individual]
		delete((*backRepoIndividual.Map_IndividualPtr_IndividualDBID), individual)
		delete((*backRepoIndividual.Map_IndividualDBID_IndividualDB), individualID)
		delete((*backRepoIndividual.Map_IndividualDBID_IndividualPtr), individualID)
	}

	return
}

// CheckoutPhaseOneInstance takes a individualDB that has been found in the DB, updates the backRepo and stages the
// models version of the individualDB
func (backRepoIndividual *BackRepoIndividualStruct) CheckoutPhaseOneInstance(individualDB *IndividualDB) (Error error) {

	individual, ok := (*backRepoIndividual.Map_IndividualDBID_IndividualPtr)[individualDB.ID]
	if !ok {
		individual = new(models.Individual)

		(*backRepoIndividual.Map_IndividualDBID_IndividualPtr)[individualDB.ID] = individual
		(*backRepoIndividual.Map_IndividualPtr_IndividualDBID)[individual] = individualDB.ID

		// append model store with the new element
		individual.Name = individualDB.Name_Data.String
		individual.Stage()
	}
	individualDB.CopyBasicFieldsToIndividual(individual)

	// preserve pointer to individualDB. Otherwise, pointer will is recycled and the map of pointers
	// Map_IndividualDBID_IndividualDB)[individualDB hold variable pointers
	individualDB_Data := *individualDB
	preservedPtrToIndividual := &individualDB_Data
	(*backRepoIndividual.Map_IndividualDBID_IndividualDB)[individualDB.ID] = preservedPtrToIndividual

	return
}

// BackRepoIndividual.CheckoutPhaseTwo Checkouts all staged instances of Individual to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoIndividual *BackRepoIndividualStruct) CheckoutPhaseTwo(backRepo *BackRepoStruct) (Error error) {

	// parse all DB instance and update all pointer fields of the translated models instance
	for _, individualDB := range *backRepoIndividual.Map_IndividualDBID_IndividualDB {
		backRepoIndividual.CheckoutPhaseTwoInstance(backRepo, individualDB)
	}
	return
}

// BackRepoIndividual.CheckoutPhaseTwoInstance Checkouts staged instances of Individual to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoIndividual *BackRepoIndividualStruct) CheckoutPhaseTwoInstance(backRepo *BackRepoStruct, individualDB *IndividualDB) (Error error) {

	individual := (*backRepoIndividual.Map_IndividualDBID_IndividualPtr)[individualDB.ID]
	_ = individual // sometimes, there is no code generated. This lines voids the "unused variable" compilation error

	// insertion point for checkout of pointer encoding
	return
}

// CommitIndividual allows commit of a single individual (if already staged)
func (backRepo *BackRepoStruct) CommitIndividual(individual *models.Individual) {
	backRepo.BackRepoIndividual.CommitPhaseOneInstance(individual)
	if id, ok := (*backRepo.BackRepoIndividual.Map_IndividualPtr_IndividualDBID)[individual]; ok {
		backRepo.BackRepoIndividual.CommitPhaseTwoInstance(backRepo, id, individual)
	}
}

// CommitIndividual allows checkout of a single individual (if already staged and with a BackRepo id)
func (backRepo *BackRepoStruct) CheckoutIndividual(individual *models.Individual) {
	// check if the individual is staged
	if _, ok := (*backRepo.BackRepoIndividual.Map_IndividualPtr_IndividualDBID)[individual]; ok {

		if id, ok := (*backRepo.BackRepoIndividual.Map_IndividualPtr_IndividualDBID)[individual]; ok {
			var individualDB IndividualDB
			individualDB.ID = id

			if err := backRepo.BackRepoIndividual.db.First(&individualDB, id).Error; err != nil {
				log.Panicln("CheckoutIndividual : Problem with getting object with id:", id)
			}
			backRepo.BackRepoIndividual.CheckoutPhaseOneInstance(&individualDB)
			backRepo.BackRepoIndividual.CheckoutPhaseTwoInstance(backRepo, &individualDB)
		}
	}
}

// CopyBasicFieldsFromIndividual
func (individualDB *IndividualDB) CopyBasicFieldsFromIndividual(individual *models.Individual) {
	// insertion point for fields commit

	individualDB.Name_Data.String = individual.Name
	individualDB.Name_Data.Valid = true
}

// CopyBasicFieldsFromIndividualWOP
func (individualDB *IndividualDB) CopyBasicFieldsFromIndividualWOP(individual *IndividualWOP) {
	// insertion point for fields commit

	individualDB.Name_Data.String = individual.Name
	individualDB.Name_Data.Valid = true
}

// CopyBasicFieldsToIndividual
func (individualDB *IndividualDB) CopyBasicFieldsToIndividual(individual *models.Individual) {
	// insertion point for checkout of basic fields (back repo to stage)
	individual.Name = individualDB.Name_Data.String
}

// CopyBasicFieldsToIndividualWOP
func (individualDB *IndividualDB) CopyBasicFieldsToIndividualWOP(individual *IndividualWOP) {
	individual.ID = int(individualDB.ID)
	// insertion point for checkout of basic fields (back repo to stage)
	individual.Name = individualDB.Name_Data.String
}

// Backup generates a json file from a slice of all IndividualDB instances in the backrepo
func (backRepoIndividual *BackRepoIndividualStruct) Backup(dirPath string) {

	filename := filepath.Join(dirPath, "IndividualDB.json")

	// organize the map into an array with increasing IDs, in order to have repoductible
	// backup file
	forBackup := make([]*IndividualDB, 0)
	for _, individualDB := range *backRepoIndividual.Map_IndividualDBID_IndividualDB {
		forBackup = append(forBackup, individualDB)
	}

	sort.Slice(forBackup[:], func(i, j int) bool {
		return forBackup[i].ID < forBackup[j].ID
	})

	file, err := json.MarshalIndent(forBackup, "", " ")

	if err != nil {
		log.Panic("Cannot json Individual ", filename, " ", err.Error())
	}

	err = ioutil.WriteFile(filename, file, 0644)
	if err != nil {
		log.Panic("Cannot write the json Individual file", err.Error())
	}
}

// Backup generates a json file from a slice of all IndividualDB instances in the backrepo
func (backRepoIndividual *BackRepoIndividualStruct) BackupXL(file *xlsx.File) {

	// organize the map into an array with increasing IDs, in order to have repoductible
	// backup file
	forBackup := make([]*IndividualDB, 0)
	for _, individualDB := range *backRepoIndividual.Map_IndividualDBID_IndividualDB {
		forBackup = append(forBackup, individualDB)
	}

	sort.Slice(forBackup[:], func(i, j int) bool {
		return forBackup[i].ID < forBackup[j].ID
	})

	sh, err := file.AddSheet("Individual")
	if err != nil {
		log.Panic("Cannot add XL file", err.Error())
	}
	_ = sh

	row := sh.AddRow()
	row.WriteSlice(&Individual_Fields, -1)
	for _, individualDB := range forBackup {

		var individualWOP IndividualWOP
		individualDB.CopyBasicFieldsToIndividualWOP(&individualWOP)

		row := sh.AddRow()
		row.WriteStruct(&individualWOP, -1)
	}
}

// RestoreXL from the "Individual" sheet all IndividualDB instances
func (backRepoIndividual *BackRepoIndividualStruct) RestoreXLPhaseOne(file *xlsx.File) {

	// resets the map
	BackRepoIndividualid_atBckpTime_newID = make(map[uint]uint)

	sh, ok := file.Sheet["Individual"]
	_ = sh
	if !ok {
		log.Panic(errors.New("sheet not found"))
	}

	// log.Println("Max row is", sh.MaxRow)
	err := sh.ForEachRow(backRepoIndividual.rowVisitorIndividual)
	if err != nil {
		log.Panic("Err=", err)
	}
}

func (backRepoIndividual *BackRepoIndividualStruct) rowVisitorIndividual(row *xlsx.Row) error {

	log.Printf("row line %d\n", row.GetCoordinate())
	log.Println(row)

	// skip first line
	if row.GetCoordinate() > 0 {
		var individualWOP IndividualWOP
		row.ReadStruct(&individualWOP)

		// add the unmarshalled struct to the stage
		individualDB := new(IndividualDB)
		individualDB.CopyBasicFieldsFromIndividualWOP(&individualWOP)

		individualDB_ID_atBackupTime := individualDB.ID
		individualDB.ID = 0
		query := backRepoIndividual.db.Create(individualDB)
		if query.Error != nil {
			log.Panic(query.Error)
		}
		(*backRepoIndividual.Map_IndividualDBID_IndividualDB)[individualDB.ID] = individualDB
		BackRepoIndividualid_atBckpTime_newID[individualDB_ID_atBackupTime] = individualDB.ID
	}
	return nil
}

// RestorePhaseOne read the file "IndividualDB.json" in dirPath that stores an array
// of IndividualDB and stores it in the database
// the map BackRepoIndividualid_atBckpTime_newID is updated accordingly
func (backRepoIndividual *BackRepoIndividualStruct) RestorePhaseOne(dirPath string) {

	// resets the map
	BackRepoIndividualid_atBckpTime_newID = make(map[uint]uint)

	filename := filepath.Join(dirPath, "IndividualDB.json")
	jsonFile, err := os.Open(filename)
	// if we os.Open returns an error then handle it
	if err != nil {
		log.Panic("Cannot restore/open the json Individual file", filename, " ", err.Error())
	}

	// read our opened jsonFile as a byte array.
	byteValue, _ := ioutil.ReadAll(jsonFile)

	var forRestore []*IndividualDB

	err = json.Unmarshal(byteValue, &forRestore)

	// fill up Map_IndividualDBID_IndividualDB
	for _, individualDB := range forRestore {

		individualDB_ID_atBackupTime := individualDB.ID
		individualDB.ID = 0
		query := backRepoIndividual.db.Create(individualDB)
		if query.Error != nil {
			log.Panic(query.Error)
		}
		(*backRepoIndividual.Map_IndividualDBID_IndividualDB)[individualDB.ID] = individualDB
		BackRepoIndividualid_atBckpTime_newID[individualDB_ID_atBackupTime] = individualDB.ID
	}

	if err != nil {
		log.Panic("Cannot restore/unmarshall json Individual file", err.Error())
	}
}

// RestorePhaseTwo uses all map BackRepo<Individual>id_atBckpTime_newID
// to compute new index
func (backRepoIndividual *BackRepoIndividualStruct) RestorePhaseTwo() {

	for _, individualDB := range *backRepoIndividual.Map_IndividualDBID_IndividualDB {

		// next line of code is to avert unused variable compilation error
		_ = individualDB

		// insertion point for reindexing pointers encoding
		// update databse with new index encoding
		query := backRepoIndividual.db.Model(individualDB).Updates(*individualDB)
		if query.Error != nil {
			log.Panic(query.Error)
		}
	}

}

// this field is used during the restauration process.
// it stores the ID at the backup time and is used for renumbering
var BackRepoIndividualid_atBckpTime_newID map[uint]uint
