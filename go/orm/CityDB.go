// generated by stacks/gong/go/models/orm_file_per_struct_back_repo.go
package orm

import (
	"database/sql"
	"encoding/json"
	"errors"
	"fmt"
	"io/ioutil"
	"log"
	"os"
	"path/filepath"
	"sort"
	"time"

	"gorm.io/gorm"

	"github.com/tealeg/xlsx/v3"

	"gongtenk/go/models"
)

// dummy variable to have the import declaration wihthout compile failure (even if no code needing this import is generated)
var dummy_City_sql sql.NullBool
var dummy_City_time time.Duration
var dummy_City_sort sort.Float64Slice

// CityAPI is the input in POST API
//
// for POST, API, one needs the fields of the model as well as the fields
// from associations ("Has One" and "Has Many") that are generated to
// fullfill the ORM requirements for associations
//
// swagger:model cityAPI
type CityAPI struct {
	gorm.Model

	models.City

	// encoding of pointers
	CityPointersEnconding
}

// CityPointersEnconding encodes pointers to Struct and
// reverse pointers of slice of poitners to Struct
type CityPointersEnconding struct {
	// insertion for pointer fields encoding declaration

	// field Country is a pointer to another Struct (optional or 0..1)
	// This field is generated into another field to enable AS ONE association
	CountryID sql.NullInt64
}

// CityDB describes a city in the database
//
// It incorporates the GORM ID, basic fields from the model (because they can be serialized),
// the encoded version of pointers
//
// swagger:model cityDB
type CityDB struct {
	gorm.Model

	// insertion for basic fields declaration

	// Declation for basic field cityDB.Name {{BasicKind}} (to be completed)
	Name_Data sql.NullString

	// Declation for basic field cityDB.Lat {{BasicKind}} (to be completed)
	Lat_Data sql.NullFloat64

	// Declation for basic field cityDB.Lng {{BasicKind}} (to be completed)
	Lng_Data sql.NullFloat64

	// Declation for basic field cityDB.Population {{BasicKind}} (to be completed)
	Population_Data sql.NullInt64
	// encoding of pointers
	CityPointersEnconding
}

// CityDBs arrays cityDBs
// swagger:response cityDBsResponse
type CityDBs []CityDB

// CityDBResponse provides response
// swagger:response cityDBResponse
type CityDBResponse struct {
	CityDB
}

// CityWOP is a City without pointers (WOP is an acronym for "Without Pointers")
// it holds the same basic fields but pointers are encoded into uint
type CityWOP struct {
	ID int `xlsx:"0"`

	// insertion for WOP basic fields

	Name string `xlsx:"1"`

	Lat float64 `xlsx:"2"`

	Lng float64 `xlsx:"3"`

	Population int `xlsx:"4"`
	// insertion for WOP pointer fields
}

var City_Fields = []string{
	// insertion for WOP basic fields
	"ID",
	"Name",
	"Lat",
	"Lng",
	"Population",
}

type BackRepoCityStruct struct {
	// stores CityDB according to their gorm ID
	Map_CityDBID_CityDB *map[uint]*CityDB

	// stores CityDB ID according to City address
	Map_CityPtr_CityDBID *map[*models.City]uint

	// stores City according to their gorm ID
	Map_CityDBID_CityPtr *map[uint]*models.City

	db *gorm.DB
}

func (backRepoCity *BackRepoCityStruct) GetDB() *gorm.DB {
	return backRepoCity.db
}

// GetCityDBFromCityPtr is a handy function to access the back repo instance from the stage instance
func (backRepoCity *BackRepoCityStruct) GetCityDBFromCityPtr(city *models.City) (cityDB *CityDB) {
	id := (*backRepoCity.Map_CityPtr_CityDBID)[city]
	cityDB = (*backRepoCity.Map_CityDBID_CityDB)[id]
	return
}

// BackRepoCity.Init set up the BackRepo of the City
func (backRepoCity *BackRepoCityStruct) Init(db *gorm.DB) (Error error) {

	if backRepoCity.Map_CityDBID_CityPtr != nil {
		err := errors.New("In Init, backRepoCity.Map_CityDBID_CityPtr should be nil")
		return err
	}

	if backRepoCity.Map_CityDBID_CityDB != nil {
		err := errors.New("In Init, backRepoCity.Map_CityDBID_CityDB should be nil")
		return err
	}

	if backRepoCity.Map_CityPtr_CityDBID != nil {
		err := errors.New("In Init, backRepoCity.Map_CityPtr_CityDBID should be nil")
		return err
	}

	tmp := make(map[uint]*models.City, 0)
	backRepoCity.Map_CityDBID_CityPtr = &tmp

	tmpDB := make(map[uint]*CityDB, 0)
	backRepoCity.Map_CityDBID_CityDB = &tmpDB

	tmpID := make(map[*models.City]uint, 0)
	backRepoCity.Map_CityPtr_CityDBID = &tmpID

	backRepoCity.db = db
	return
}

// BackRepoCity.CommitPhaseOne commits all staged instances of City to the BackRepo
// Phase One is the creation of instance in the database if it is not yet done to get the unique ID for each staged instance
func (backRepoCity *BackRepoCityStruct) CommitPhaseOne(stage *models.StageStruct) (Error error) {

	for city := range stage.Citys {
		backRepoCity.CommitPhaseOneInstance(city)
	}

	// parse all backRepo instance and checks wether some instance have been unstaged
	// in this case, remove them from the back repo
	for id, city := range *backRepoCity.Map_CityDBID_CityPtr {
		if _, ok := stage.Citys[city]; !ok {
			backRepoCity.CommitDeleteInstance(id)
		}
	}

	return
}

// BackRepoCity.CommitDeleteInstance commits deletion of City to the BackRepo
func (backRepoCity *BackRepoCityStruct) CommitDeleteInstance(id uint) (Error error) {

	city := (*backRepoCity.Map_CityDBID_CityPtr)[id]

	// city is not staged anymore, remove cityDB
	cityDB := (*backRepoCity.Map_CityDBID_CityDB)[id]
	query := backRepoCity.db.Unscoped().Delete(&cityDB)
	if query.Error != nil {
		return query.Error
	}

	// update stores
	delete((*backRepoCity.Map_CityPtr_CityDBID), city)
	delete((*backRepoCity.Map_CityDBID_CityPtr), id)
	delete((*backRepoCity.Map_CityDBID_CityDB), id)

	return
}

// BackRepoCity.CommitPhaseOneInstance commits city staged instances of City to the BackRepo
// Phase One is the creation of instance in the database if it is not yet done to get the unique ID for each staged instance
func (backRepoCity *BackRepoCityStruct) CommitPhaseOneInstance(city *models.City) (Error error) {

	// check if the city is not commited yet
	if _, ok := (*backRepoCity.Map_CityPtr_CityDBID)[city]; ok {
		return
	}

	// initiate city
	var cityDB CityDB
	cityDB.CopyBasicFieldsFromCity(city)

	query := backRepoCity.db.Create(&cityDB)
	if query.Error != nil {
		return query.Error
	}

	// update stores
	(*backRepoCity.Map_CityPtr_CityDBID)[city] = cityDB.ID
	(*backRepoCity.Map_CityDBID_CityPtr)[cityDB.ID] = city
	(*backRepoCity.Map_CityDBID_CityDB)[cityDB.ID] = &cityDB

	return
}

// BackRepoCity.CommitPhaseTwo commits all staged instances of City to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoCity *BackRepoCityStruct) CommitPhaseTwo(backRepo *BackRepoStruct) (Error error) {

	for idx, city := range *backRepoCity.Map_CityDBID_CityPtr {
		backRepoCity.CommitPhaseTwoInstance(backRepo, idx, city)
	}

	return
}

// BackRepoCity.CommitPhaseTwoInstance commits {{structname }} of models.City to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoCity *BackRepoCityStruct) CommitPhaseTwoInstance(backRepo *BackRepoStruct, idx uint, city *models.City) (Error error) {

	// fetch matching cityDB
	if cityDB, ok := (*backRepoCity.Map_CityDBID_CityDB)[idx]; ok {

		cityDB.CopyBasicFieldsFromCity(city)

		// insertion point for translating pointers encodings into actual pointers
		// commit pointer value city.Country translates to updating the city.CountryID
		cityDB.CountryID.Valid = true // allow for a 0 value (nil association)
		if city.Country != nil {
			if CountryId, ok := (*backRepo.BackRepoCountry.Map_CountryPtr_CountryDBID)[city.Country]; ok {
				cityDB.CountryID.Int64 = int64(CountryId)
				cityDB.CountryID.Valid = true
			}
		}

		query := backRepoCity.db.Save(&cityDB)
		if query.Error != nil {
			return query.Error
		}

	} else {
		err := errors.New(
			fmt.Sprintf("Unkown City intance %s", city.Name))
		return err
	}

	return
}

// BackRepoCity.CheckoutPhaseOne Checkouts all BackRepo instances to the Stage
//
// Phase One will result in having instances on the stage aligned with the back repo
// pointers are not initialized yet (this is for pahse two)
//
func (backRepoCity *BackRepoCityStruct) CheckoutPhaseOne() (Error error) {

	cityDBArray := make([]CityDB, 0)
	query := backRepoCity.db.Find(&cityDBArray)
	if query.Error != nil {
		return query.Error
	}

	// list of instances to be removed
	// start from the initial map on the stage and remove instances that have been checked out
	cityInstancesToBeRemovedFromTheStage := make(map[*models.City]struct{})
	for key, value := range models.Stage.Citys {
		cityInstancesToBeRemovedFromTheStage[key] = value
	}

	// copy orm objects to the the map
	for _, cityDB := range cityDBArray {
		backRepoCity.CheckoutPhaseOneInstance(&cityDB)

		// do not remove this instance from the stage, therefore
		// remove instance from the list of instances to be be removed from the stage
		city, ok := (*backRepoCity.Map_CityDBID_CityPtr)[cityDB.ID]
		if ok {
			delete(cityInstancesToBeRemovedFromTheStage, city)
		}
	}

	// remove from stage and back repo's 3 maps all citys that are not in the checkout
	for city := range cityInstancesToBeRemovedFromTheStage {
		city.Unstage()

		// remove instance from the back repo 3 maps
		cityID := (*backRepoCity.Map_CityPtr_CityDBID)[city]
		delete((*backRepoCity.Map_CityPtr_CityDBID), city)
		delete((*backRepoCity.Map_CityDBID_CityDB), cityID)
		delete((*backRepoCity.Map_CityDBID_CityPtr), cityID)
	}

	return
}

// CheckoutPhaseOneInstance takes a cityDB that has been found in the DB, updates the backRepo and stages the
// models version of the cityDB
func (backRepoCity *BackRepoCityStruct) CheckoutPhaseOneInstance(cityDB *CityDB) (Error error) {

	city, ok := (*backRepoCity.Map_CityDBID_CityPtr)[cityDB.ID]
	if !ok {
		city = new(models.City)

		(*backRepoCity.Map_CityDBID_CityPtr)[cityDB.ID] = city
		(*backRepoCity.Map_CityPtr_CityDBID)[city] = cityDB.ID

		// append model store with the new element
		city.Name = cityDB.Name_Data.String
		city.Stage()
	}
	cityDB.CopyBasicFieldsToCity(city)

	// preserve pointer to cityDB. Otherwise, pointer will is recycled and the map of pointers
	// Map_CityDBID_CityDB)[cityDB hold variable pointers
	cityDB_Data := *cityDB
	preservedPtrToCity := &cityDB_Data
	(*backRepoCity.Map_CityDBID_CityDB)[cityDB.ID] = preservedPtrToCity

	return
}

// BackRepoCity.CheckoutPhaseTwo Checkouts all staged instances of City to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoCity *BackRepoCityStruct) CheckoutPhaseTwo(backRepo *BackRepoStruct) (Error error) {

	// parse all DB instance and update all pointer fields of the translated models instance
	for _, cityDB := range *backRepoCity.Map_CityDBID_CityDB {
		backRepoCity.CheckoutPhaseTwoInstance(backRepo, cityDB)
	}
	return
}

// BackRepoCity.CheckoutPhaseTwoInstance Checkouts staged instances of City to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoCity *BackRepoCityStruct) CheckoutPhaseTwoInstance(backRepo *BackRepoStruct, cityDB *CityDB) (Error error) {

	city := (*backRepoCity.Map_CityDBID_CityPtr)[cityDB.ID]
	_ = city // sometimes, there is no code generated. This lines voids the "unused variable" compilation error

	// insertion point for checkout of pointer encoding
	// Country field
	if cityDB.CountryID.Int64 != 0 {
		city.Country = (*backRepo.BackRepoCountry.Map_CountryDBID_CountryPtr)[uint(cityDB.CountryID.Int64)]
	}
	return
}

// CommitCity allows commit of a single city (if already staged)
func (backRepo *BackRepoStruct) CommitCity(city *models.City) {
	backRepo.BackRepoCity.CommitPhaseOneInstance(city)
	if id, ok := (*backRepo.BackRepoCity.Map_CityPtr_CityDBID)[city]; ok {
		backRepo.BackRepoCity.CommitPhaseTwoInstance(backRepo, id, city)
	}
}

// CommitCity allows checkout of a single city (if already staged and with a BackRepo id)
func (backRepo *BackRepoStruct) CheckoutCity(city *models.City) {
	// check if the city is staged
	if _, ok := (*backRepo.BackRepoCity.Map_CityPtr_CityDBID)[city]; ok {

		if id, ok := (*backRepo.BackRepoCity.Map_CityPtr_CityDBID)[city]; ok {
			var cityDB CityDB
			cityDB.ID = id

			if err := backRepo.BackRepoCity.db.First(&cityDB, id).Error; err != nil {
				log.Panicln("CheckoutCity : Problem with getting object with id:", id)
			}
			backRepo.BackRepoCity.CheckoutPhaseOneInstance(&cityDB)
			backRepo.BackRepoCity.CheckoutPhaseTwoInstance(backRepo, &cityDB)
		}
	}
}

// CopyBasicFieldsFromCity
func (cityDB *CityDB) CopyBasicFieldsFromCity(city *models.City) {
	// insertion point for fields commit

	cityDB.Name_Data.String = city.Name
	cityDB.Name_Data.Valid = true

	cityDB.Lat_Data.Float64 = city.Lat
	cityDB.Lat_Data.Valid = true

	cityDB.Lng_Data.Float64 = city.Lng
	cityDB.Lng_Data.Valid = true

	cityDB.Population_Data.Int64 = int64(city.Population)
	cityDB.Population_Data.Valid = true
}

// CopyBasicFieldsFromCityWOP
func (cityDB *CityDB) CopyBasicFieldsFromCityWOP(city *CityWOP) {
	// insertion point for fields commit

	cityDB.Name_Data.String = city.Name
	cityDB.Name_Data.Valid = true

	cityDB.Lat_Data.Float64 = city.Lat
	cityDB.Lat_Data.Valid = true

	cityDB.Lng_Data.Float64 = city.Lng
	cityDB.Lng_Data.Valid = true

	cityDB.Population_Data.Int64 = int64(city.Population)
	cityDB.Population_Data.Valid = true
}

// CopyBasicFieldsToCity
func (cityDB *CityDB) CopyBasicFieldsToCity(city *models.City) {
	// insertion point for checkout of basic fields (back repo to stage)
	city.Name = cityDB.Name_Data.String
	city.Lat = cityDB.Lat_Data.Float64
	city.Lng = cityDB.Lng_Data.Float64
	city.Population = int(cityDB.Population_Data.Int64)
}

// CopyBasicFieldsToCityWOP
func (cityDB *CityDB) CopyBasicFieldsToCityWOP(city *CityWOP) {
	city.ID = int(cityDB.ID)
	// insertion point for checkout of basic fields (back repo to stage)
	city.Name = cityDB.Name_Data.String
	city.Lat = cityDB.Lat_Data.Float64
	city.Lng = cityDB.Lng_Data.Float64
	city.Population = int(cityDB.Population_Data.Int64)
}

// Backup generates a json file from a slice of all CityDB instances in the backrepo
func (backRepoCity *BackRepoCityStruct) Backup(dirPath string) {

	filename := filepath.Join(dirPath, "CityDB.json")

	// organize the map into an array with increasing IDs, in order to have repoductible
	// backup file
	forBackup := make([]*CityDB, 0)
	for _, cityDB := range *backRepoCity.Map_CityDBID_CityDB {
		forBackup = append(forBackup, cityDB)
	}

	sort.Slice(forBackup[:], func(i, j int) bool {
		return forBackup[i].ID < forBackup[j].ID
	})

	file, err := json.MarshalIndent(forBackup, "", " ")

	if err != nil {
		log.Panic("Cannot json City ", filename, " ", err.Error())
	}

	err = ioutil.WriteFile(filename, file, 0644)
	if err != nil {
		log.Panic("Cannot write the json City file", err.Error())
	}
}

// Backup generates a json file from a slice of all CityDB instances in the backrepo
func (backRepoCity *BackRepoCityStruct) BackupXL(file *xlsx.File) {

	// organize the map into an array with increasing IDs, in order to have repoductible
	// backup file
	forBackup := make([]*CityDB, 0)
	for _, cityDB := range *backRepoCity.Map_CityDBID_CityDB {
		forBackup = append(forBackup, cityDB)
	}

	sort.Slice(forBackup[:], func(i, j int) bool {
		return forBackup[i].ID < forBackup[j].ID
	})

	sh, err := file.AddSheet("City")
	if err != nil {
		log.Panic("Cannot add XL file", err.Error())
	}
	_ = sh

	row := sh.AddRow()
	row.WriteSlice(&City_Fields, -1)
	for _, cityDB := range forBackup {

		var cityWOP CityWOP
		cityDB.CopyBasicFieldsToCityWOP(&cityWOP)

		row := sh.AddRow()
		row.WriteStruct(&cityWOP, -1)
	}
}

// RestoreXL from the "City" sheet all CityDB instances
func (backRepoCity *BackRepoCityStruct) RestoreXLPhaseOne(file *xlsx.File) {

	// resets the map
	BackRepoCityid_atBckpTime_newID = make(map[uint]uint)

	sh, ok := file.Sheet["City"]
	_ = sh
	if !ok {
		log.Panic(errors.New("sheet not found"))
	}

	// log.Println("Max row is", sh.MaxRow)
	err := sh.ForEachRow(backRepoCity.rowVisitorCity)
	if err != nil {
		log.Panic("Err=", err)
	}
}

func (backRepoCity *BackRepoCityStruct) rowVisitorCity(row *xlsx.Row) error {

	log.Printf("row line %d\n", row.GetCoordinate())
	log.Println(row)

	// skip first line
	if row.GetCoordinate() > 0 {
		var cityWOP CityWOP
		row.ReadStruct(&cityWOP)

		// add the unmarshalled struct to the stage
		cityDB := new(CityDB)
		cityDB.CopyBasicFieldsFromCityWOP(&cityWOP)

		cityDB_ID_atBackupTime := cityDB.ID
		cityDB.ID = 0
		query := backRepoCity.db.Create(cityDB)
		if query.Error != nil {
			log.Panic(query.Error)
		}
		(*backRepoCity.Map_CityDBID_CityDB)[cityDB.ID] = cityDB
		BackRepoCityid_atBckpTime_newID[cityDB_ID_atBackupTime] = cityDB.ID
	}
	return nil
}

// RestorePhaseOne read the file "CityDB.json" in dirPath that stores an array
// of CityDB and stores it in the database
// the map BackRepoCityid_atBckpTime_newID is updated accordingly
func (backRepoCity *BackRepoCityStruct) RestorePhaseOne(dirPath string) {

	// resets the map
	BackRepoCityid_atBckpTime_newID = make(map[uint]uint)

	filename := filepath.Join(dirPath, "CityDB.json")
	jsonFile, err := os.Open(filename)
	// if we os.Open returns an error then handle it
	if err != nil {
		log.Panic("Cannot restore/open the json City file", filename, " ", err.Error())
	}

	// read our opened jsonFile as a byte array.
	byteValue, _ := ioutil.ReadAll(jsonFile)

	var forRestore []*CityDB

	err = json.Unmarshal(byteValue, &forRestore)

	// fill up Map_CityDBID_CityDB
	for _, cityDB := range forRestore {

		cityDB_ID_atBackupTime := cityDB.ID
		cityDB.ID = 0
		query := backRepoCity.db.Create(cityDB)
		if query.Error != nil {
			log.Panic(query.Error)
		}
		(*backRepoCity.Map_CityDBID_CityDB)[cityDB.ID] = cityDB
		BackRepoCityid_atBckpTime_newID[cityDB_ID_atBackupTime] = cityDB.ID
	}

	if err != nil {
		log.Panic("Cannot restore/unmarshall json City file", err.Error())
	}
}

// RestorePhaseTwo uses all map BackRepo<City>id_atBckpTime_newID
// to compute new index
func (backRepoCity *BackRepoCityStruct) RestorePhaseTwo() {

	for _, cityDB := range *backRepoCity.Map_CityDBID_CityDB {

		// next line of code is to avert unused variable compilation error
		_ = cityDB

		// insertion point for reindexing pointers encoding
		// reindexing Country field
		if cityDB.CountryID.Int64 != 0 {
			cityDB.CountryID.Int64 = int64(BackRepoCountryid_atBckpTime_newID[uint(cityDB.CountryID.Int64)])
			cityDB.CountryID.Valid = true
		}

		// update databse with new index encoding
		query := backRepoCity.db.Model(cityDB).Updates(*cityDB)
		if query.Error != nil {
			log.Panic(query.Error)
		}
	}

}

// this field is used during the restauration process.
// it stores the ID at the backup time and is used for renumbering
var BackRepoCityid_atBckpTime_newID map[uint]uint
