// generated by ModelGongFileTemplate
package models

import "sort"

// swagger:ignore
type __void struct{}

// needed for creating set of instances in the stage
var __member __void

// StageStruct enables storage of staged instances
// swagger:ignore
type StageStruct struct { // insertion point for definition of arrays registering instances
	Citys           map[*City]struct{}
	Citys_mapString map[string]*City

	Configurations           map[*Configuration]struct{}
	Configurations_mapString map[string]*Configuration

	Countrys           map[*Country]struct{}
	Countrys_mapString map[string]*Country

	Individuals           map[*Individual]struct{}
	Individuals_mapString map[string]*Individual

	AllModelsStructCreateCallback AllModelsStructCreateInterface

	AllModelsStructDeleteCallback AllModelsStructDeleteInterface

	BackRepo BackRepoInterface

	// if set will be called before each commit to the back repo
	OnInitCommitCallback OnInitCommitInterface
}

type OnInitCommitInterface interface {
	BeforeCommit(stage *StageStruct)
}

type BackRepoInterface interface {
	Commit(stage *StageStruct)
	Checkout(stage *StageStruct)
	Backup(stage *StageStruct, dirPath string)
	Restore(stage *StageStruct, dirPath string)
	BackupXL(stage *StageStruct, dirPath string)
	RestoreXL(stage *StageStruct, dirPath string)
	// insertion point for Commit and Checkout signatures
	CommitCity(city *City)
	CheckoutCity(city *City)
	CommitConfiguration(configuration *Configuration)
	CheckoutConfiguration(configuration *Configuration)
	CommitCountry(country *Country)
	CheckoutCountry(country *Country)
	CommitIndividual(individual *Individual)
	CheckoutIndividual(individual *Individual)
	GetLastCommitNb() uint
	GetLastPushFromFrontNb() uint
}

// swagger:ignore instructs the gong compiler (gongc) to avoid this particular struct
var Stage StageStruct = StageStruct{ // insertion point for array initiatialisation
	Citys:           make(map[*City]struct{}),
	Citys_mapString: make(map[string]*City),

	Configurations:           make(map[*Configuration]struct{}),
	Configurations_mapString: make(map[string]*Configuration),

	Countrys:           make(map[*Country]struct{}),
	Countrys_mapString: make(map[string]*Country),

	Individuals:           make(map[*Individual]struct{}),
	Individuals_mapString: make(map[string]*Individual),

	// end of insertion point
}

func (stage *StageStruct) Commit() {
	if stage.BackRepo != nil {
		stage.BackRepo.Commit(stage)
	}
}

func (stage *StageStruct) Checkout() {
	if stage.BackRepo != nil {
		stage.BackRepo.Checkout(stage)
	}
}

// backup generates backup files in the dirPath
func (stage *StageStruct) Backup(dirPath string) {
	if stage.BackRepo != nil {
		stage.BackRepo.Backup(stage, dirPath)
	}
}

// Restore resets Stage & BackRepo and restores their content from the restore files in dirPath
func (stage *StageStruct) Restore(dirPath string) {
	if stage.BackRepo != nil {
		stage.BackRepo.Restore(stage, dirPath)
	}
}

// backup generates backup files in the dirPath
func (stage *StageStruct) BackupXL(dirPath string) {
	if stage.BackRepo != nil {
		stage.BackRepo.BackupXL(stage, dirPath)
	}
}

// Restore resets Stage & BackRepo and restores their content from the restore files in dirPath
func (stage *StageStruct) RestoreXL(dirPath string) {
	if stage.BackRepo != nil {
		stage.BackRepo.RestoreXL(stage, dirPath)
	}
}

// insertion point for cumulative sub template with model space calls
func (stage *StageStruct) getCityOrderedStructWithNameField() []*City {
	// have alphabetical order generation
	cityOrdered := []*City{}
	for city := range stage.Citys {
		cityOrdered = append(cityOrdered, city)
	}
	sort.Slice(cityOrdered[:], func(i, j int) bool {
		return cityOrdered[i].Name < cityOrdered[j].Name
	})
	return cityOrdered
}

// Stage puts city to the model stage
func (city *City) Stage() *City {
	Stage.Citys[city] = __member
	Stage.Citys_mapString[city.Name] = city

	return city
}

// Unstage removes city off the model stage
func (city *City) Unstage() *City {
	delete(Stage.Citys, city)
	delete(Stage.Citys_mapString, city.Name)
	return city
}

// commit city to the back repo (if it is already staged)
func (city *City) Commit() *City {
	if _, ok := Stage.Citys[city]; ok {
		if Stage.BackRepo != nil {
			Stage.BackRepo.CommitCity(city)
		}
	}
	return city
}

// Checkout city to the back repo (if it is already staged)
func (city *City) Checkout() *City {
	if _, ok := Stage.Citys[city]; ok {
		if Stage.BackRepo != nil {
			Stage.BackRepo.CheckoutCity(city)
		}
	}
	return city
}

//
// Legacy, to be deleted
//

// StageCopy appends a copy of city to the model stage
func (city *City) StageCopy() *City {
	_city := new(City)
	*_city = *city
	_city.Stage()
	return _city
}

// StageAndCommit appends city to the model stage and commit to the orm repo
func (city *City) StageAndCommit() *City {
	city.Stage()
	if Stage.AllModelsStructCreateCallback != nil {
		Stage.AllModelsStructCreateCallback.CreateORMCity(city)
	}
	return city
}

// DeleteStageAndCommit appends city to the model stage and commit to the orm repo
func (city *City) DeleteStageAndCommit() *City {
	city.Unstage()
	DeleteORMCity(city)
	return city
}

// StageCopyAndCommit appends a copy of city to the model stage and commit to the orm repo
func (city *City) StageCopyAndCommit() *City {
	_city := new(City)
	*_city = *city
	_city.Stage()
	if Stage.AllModelsStructCreateCallback != nil {
		Stage.AllModelsStructCreateCallback.CreateORMCity(city)
	}
	return _city
}

// CreateORMCity enables dynamic staging of a City instance
func CreateORMCity(city *City) {
	city.Stage()
	if Stage.AllModelsStructCreateCallback != nil {
		Stage.AllModelsStructCreateCallback.CreateORMCity(city)
	}
}

// DeleteORMCity enables dynamic staging of a City instance
func DeleteORMCity(city *City) {
	city.Unstage()
	if Stage.AllModelsStructDeleteCallback != nil {
		Stage.AllModelsStructDeleteCallback.DeleteORMCity(city)
	}
}

func (stage *StageStruct) getConfigurationOrderedStructWithNameField() []*Configuration {
	// have alphabetical order generation
	configurationOrdered := []*Configuration{}
	for configuration := range stage.Configurations {
		configurationOrdered = append(configurationOrdered, configuration)
	}
	sort.Slice(configurationOrdered[:], func(i, j int) bool {
		return configurationOrdered[i].Name < configurationOrdered[j].Name
	})
	return configurationOrdered
}

// Stage puts configuration to the model stage
func (configuration *Configuration) Stage() *Configuration {
	Stage.Configurations[configuration] = __member
	Stage.Configurations_mapString[configuration.Name] = configuration

	return configuration
}

// Unstage removes configuration off the model stage
func (configuration *Configuration) Unstage() *Configuration {
	delete(Stage.Configurations, configuration)
	delete(Stage.Configurations_mapString, configuration.Name)
	return configuration
}

// commit configuration to the back repo (if it is already staged)
func (configuration *Configuration) Commit() *Configuration {
	if _, ok := Stage.Configurations[configuration]; ok {
		if Stage.BackRepo != nil {
			Stage.BackRepo.CommitConfiguration(configuration)
		}
	}
	return configuration
}

// Checkout configuration to the back repo (if it is already staged)
func (configuration *Configuration) Checkout() *Configuration {
	if _, ok := Stage.Configurations[configuration]; ok {
		if Stage.BackRepo != nil {
			Stage.BackRepo.CheckoutConfiguration(configuration)
		}
	}
	return configuration
}

//
// Legacy, to be deleted
//

// StageCopy appends a copy of configuration to the model stage
func (configuration *Configuration) StageCopy() *Configuration {
	_configuration := new(Configuration)
	*_configuration = *configuration
	_configuration.Stage()
	return _configuration
}

// StageAndCommit appends configuration to the model stage and commit to the orm repo
func (configuration *Configuration) StageAndCommit() *Configuration {
	configuration.Stage()
	if Stage.AllModelsStructCreateCallback != nil {
		Stage.AllModelsStructCreateCallback.CreateORMConfiguration(configuration)
	}
	return configuration
}

// DeleteStageAndCommit appends configuration to the model stage and commit to the orm repo
func (configuration *Configuration) DeleteStageAndCommit() *Configuration {
	configuration.Unstage()
	DeleteORMConfiguration(configuration)
	return configuration
}

// StageCopyAndCommit appends a copy of configuration to the model stage and commit to the orm repo
func (configuration *Configuration) StageCopyAndCommit() *Configuration {
	_configuration := new(Configuration)
	*_configuration = *configuration
	_configuration.Stage()
	if Stage.AllModelsStructCreateCallback != nil {
		Stage.AllModelsStructCreateCallback.CreateORMConfiguration(configuration)
	}
	return _configuration
}

// CreateORMConfiguration enables dynamic staging of a Configuration instance
func CreateORMConfiguration(configuration *Configuration) {
	configuration.Stage()
	if Stage.AllModelsStructCreateCallback != nil {
		Stage.AllModelsStructCreateCallback.CreateORMConfiguration(configuration)
	}
}

// DeleteORMConfiguration enables dynamic staging of a Configuration instance
func DeleteORMConfiguration(configuration *Configuration) {
	configuration.Unstage()
	if Stage.AllModelsStructDeleteCallback != nil {
		Stage.AllModelsStructDeleteCallback.DeleteORMConfiguration(configuration)
	}
}

func (stage *StageStruct) getCountryOrderedStructWithNameField() []*Country {
	// have alphabetical order generation
	countryOrdered := []*Country{}
	for country := range stage.Countrys {
		countryOrdered = append(countryOrdered, country)
	}
	sort.Slice(countryOrdered[:], func(i, j int) bool {
		return countryOrdered[i].Name < countryOrdered[j].Name
	})
	return countryOrdered
}

// Stage puts country to the model stage
func (country *Country) Stage() *Country {
	Stage.Countrys[country] = __member
	Stage.Countrys_mapString[country.Name] = country

	return country
}

// Unstage removes country off the model stage
func (country *Country) Unstage() *Country {
	delete(Stage.Countrys, country)
	delete(Stage.Countrys_mapString, country.Name)
	return country
}

// commit country to the back repo (if it is already staged)
func (country *Country) Commit() *Country {
	if _, ok := Stage.Countrys[country]; ok {
		if Stage.BackRepo != nil {
			Stage.BackRepo.CommitCountry(country)
		}
	}
	return country
}

// Checkout country to the back repo (if it is already staged)
func (country *Country) Checkout() *Country {
	if _, ok := Stage.Countrys[country]; ok {
		if Stage.BackRepo != nil {
			Stage.BackRepo.CheckoutCountry(country)
		}
	}
	return country
}

//
// Legacy, to be deleted
//

// StageCopy appends a copy of country to the model stage
func (country *Country) StageCopy() *Country {
	_country := new(Country)
	*_country = *country
	_country.Stage()
	return _country
}

// StageAndCommit appends country to the model stage and commit to the orm repo
func (country *Country) StageAndCommit() *Country {
	country.Stage()
	if Stage.AllModelsStructCreateCallback != nil {
		Stage.AllModelsStructCreateCallback.CreateORMCountry(country)
	}
	return country
}

// DeleteStageAndCommit appends country to the model stage and commit to the orm repo
func (country *Country) DeleteStageAndCommit() *Country {
	country.Unstage()
	DeleteORMCountry(country)
	return country
}

// StageCopyAndCommit appends a copy of country to the model stage and commit to the orm repo
func (country *Country) StageCopyAndCommit() *Country {
	_country := new(Country)
	*_country = *country
	_country.Stage()
	if Stage.AllModelsStructCreateCallback != nil {
		Stage.AllModelsStructCreateCallback.CreateORMCountry(country)
	}
	return _country
}

// CreateORMCountry enables dynamic staging of a Country instance
func CreateORMCountry(country *Country) {
	country.Stage()
	if Stage.AllModelsStructCreateCallback != nil {
		Stage.AllModelsStructCreateCallback.CreateORMCountry(country)
	}
}

// DeleteORMCountry enables dynamic staging of a Country instance
func DeleteORMCountry(country *Country) {
	country.Unstage()
	if Stage.AllModelsStructDeleteCallback != nil {
		Stage.AllModelsStructDeleteCallback.DeleteORMCountry(country)
	}
}

func (stage *StageStruct) getIndividualOrderedStructWithNameField() []*Individual {
	// have alphabetical order generation
	individualOrdered := []*Individual{}
	for individual := range stage.Individuals {
		individualOrdered = append(individualOrdered, individual)
	}
	sort.Slice(individualOrdered[:], func(i, j int) bool {
		return individualOrdered[i].Name < individualOrdered[j].Name
	})
	return individualOrdered
}

// Stage puts individual to the model stage
func (individual *Individual) Stage() *Individual {
	Stage.Individuals[individual] = __member
	Stage.Individuals_mapString[individual.Name] = individual

	return individual
}

// Unstage removes individual off the model stage
func (individual *Individual) Unstage() *Individual {
	delete(Stage.Individuals, individual)
	delete(Stage.Individuals_mapString, individual.Name)
	return individual
}

// commit individual to the back repo (if it is already staged)
func (individual *Individual) Commit() *Individual {
	if _, ok := Stage.Individuals[individual]; ok {
		if Stage.BackRepo != nil {
			Stage.BackRepo.CommitIndividual(individual)
		}
	}
	return individual
}

// Checkout individual to the back repo (if it is already staged)
func (individual *Individual) Checkout() *Individual {
	if _, ok := Stage.Individuals[individual]; ok {
		if Stage.BackRepo != nil {
			Stage.BackRepo.CheckoutIndividual(individual)
		}
	}
	return individual
}

//
// Legacy, to be deleted
//

// StageCopy appends a copy of individual to the model stage
func (individual *Individual) StageCopy() *Individual {
	_individual := new(Individual)
	*_individual = *individual
	_individual.Stage()
	return _individual
}

// StageAndCommit appends individual to the model stage and commit to the orm repo
func (individual *Individual) StageAndCommit() *Individual {
	individual.Stage()
	if Stage.AllModelsStructCreateCallback != nil {
		Stage.AllModelsStructCreateCallback.CreateORMIndividual(individual)
	}
	return individual
}

// DeleteStageAndCommit appends individual to the model stage and commit to the orm repo
func (individual *Individual) DeleteStageAndCommit() *Individual {
	individual.Unstage()
	DeleteORMIndividual(individual)
	return individual
}

// StageCopyAndCommit appends a copy of individual to the model stage and commit to the orm repo
func (individual *Individual) StageCopyAndCommit() *Individual {
	_individual := new(Individual)
	*_individual = *individual
	_individual.Stage()
	if Stage.AllModelsStructCreateCallback != nil {
		Stage.AllModelsStructCreateCallback.CreateORMIndividual(individual)
	}
	return _individual
}

// CreateORMIndividual enables dynamic staging of a Individual instance
func CreateORMIndividual(individual *Individual) {
	individual.Stage()
	if Stage.AllModelsStructCreateCallback != nil {
		Stage.AllModelsStructCreateCallback.CreateORMIndividual(individual)
	}
}

// DeleteORMIndividual enables dynamic staging of a Individual instance
func DeleteORMIndividual(individual *Individual) {
	individual.Unstage()
	if Stage.AllModelsStructDeleteCallback != nil {
		Stage.AllModelsStructDeleteCallback.DeleteORMIndividual(individual)
	}
}

// swagger:ignore
type AllModelsStructCreateInterface interface { // insertion point for Callbacks on creation
	CreateORMCity(City *City)
	CreateORMConfiguration(Configuration *Configuration)
	CreateORMCountry(Country *Country)
	CreateORMIndividual(Individual *Individual)
}

type AllModelsStructDeleteInterface interface { // insertion point for Callbacks on deletion
	DeleteORMCity(City *City)
	DeleteORMConfiguration(Configuration *Configuration)
	DeleteORMCountry(Country *Country)
	DeleteORMIndividual(Individual *Individual)
}

func (stage *StageStruct) Reset() { // insertion point for array reset
	stage.Citys = make(map[*City]struct{})
	stage.Citys_mapString = make(map[string]*City)

	stage.Configurations = make(map[*Configuration]struct{})
	stage.Configurations_mapString = make(map[string]*Configuration)

	stage.Countrys = make(map[*Country]struct{})
	stage.Countrys_mapString = make(map[string]*Country)

	stage.Individuals = make(map[*Individual]struct{})
	stage.Individuals_mapString = make(map[string]*Individual)

}

func (stage *StageStruct) Nil() { // insertion point for array nil
	stage.Citys = nil
	stage.Citys_mapString = nil

	stage.Configurations = nil
	stage.Configurations_mapString = nil

	stage.Countrys = nil
	stage.Countrys_mapString = nil

	stage.Individuals = nil
	stage.Individuals_mapString = nil

}
