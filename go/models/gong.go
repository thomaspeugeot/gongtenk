// generated by ModelGongFileTemplate
package models

import "sort"

// swagger:ignore
type __void struct{}

// needed for creating set of instances in the stage
var __member __void

// StageStruct enables storage of staged instances
// swagger:ignore
type StageStruct struct { // insertion point for definition of arrays registering instances
	Individuals           map[*Individual]struct{}
	Individuals_mapString map[string]*Individual

	AllModelsStructCreateCallback AllModelsStructCreateInterface

	AllModelsStructDeleteCallback AllModelsStructDeleteInterface

	BackRepo BackRepoInterface

	// if set will be called before each commit to the back repo
	OnInitCommitCallback OnInitCommitInterface
}

type OnInitCommitInterface interface {
	BeforeCommit(stage *StageStruct)
}

type BackRepoInterface interface {
	Commit(stage *StageStruct)
	Checkout(stage *StageStruct)
	Backup(stage *StageStruct, dirPath string)
	Restore(stage *StageStruct, dirPath string)
	BackupXL(stage *StageStruct, dirPath string)
	RestoreXL(stage *StageStruct, dirPath string)
	// insertion point for Commit and Checkout signatures
	CommitIndividual(individual *Individual)
	CheckoutIndividual(individual *Individual)
	GetLastCommitNb() uint
	GetLastPushFromFrontNb() uint
}

// swagger:ignore instructs the gong compiler (gongc) to avoid this particular struct
var Stage StageStruct = StageStruct{ // insertion point for array initiatialisation
	Individuals:           make(map[*Individual]struct{}),
	Individuals_mapString: make(map[string]*Individual),

	// end of insertion point
}

func (stage *StageStruct) Commit() {
	if stage.BackRepo != nil {
		stage.BackRepo.Commit(stage)
	}
}

func (stage *StageStruct) Checkout() {
	if stage.BackRepo != nil {
		stage.BackRepo.Checkout(stage)
	}
}

// backup generates backup files in the dirPath
func (stage *StageStruct) Backup(dirPath string) {
	if stage.BackRepo != nil {
		stage.BackRepo.Backup(stage, dirPath)
	}
}

// Restore resets Stage & BackRepo and restores their content from the restore files in dirPath
func (stage *StageStruct) Restore(dirPath string) {
	if stage.BackRepo != nil {
		stage.BackRepo.Restore(stage, dirPath)
	}
}

// backup generates backup files in the dirPath
func (stage *StageStruct) BackupXL(dirPath string) {
	if stage.BackRepo != nil {
		stage.BackRepo.BackupXL(stage, dirPath)
	}
}

// Restore resets Stage & BackRepo and restores their content from the restore files in dirPath
func (stage *StageStruct) RestoreXL(dirPath string) {
	if stage.BackRepo != nil {
		stage.BackRepo.RestoreXL(stage, dirPath)
	}
}

// insertion point for cumulative sub template with model space calls
func (stage *StageStruct) getIndividualOrderedStructWithNameField() []*Individual {
	// have alphabetical order generation
	individualOrdered := []*Individual{}
	for individual := range stage.Individuals {
		individualOrdered = append(individualOrdered, individual)
	}
	sort.Slice(individualOrdered[:], func(i, j int) bool {
		return individualOrdered[i].Name < individualOrdered[j].Name
	})
	return individualOrdered
}

// Stage puts individual to the model stage
func (individual *Individual) Stage() *Individual {
	Stage.Individuals[individual] = __member
	Stage.Individuals_mapString[individual.Name] = individual

	return individual
}

// Unstage removes individual off the model stage
func (individual *Individual) Unstage() *Individual {
	delete(Stage.Individuals, individual)
	delete(Stage.Individuals_mapString, individual.Name)
	return individual
}

// commit individual to the back repo (if it is already staged)
func (individual *Individual) Commit() *Individual {
	if _, ok := Stage.Individuals[individual]; ok {
		if Stage.BackRepo != nil {
			Stage.BackRepo.CommitIndividual(individual)
		}
	}
	return individual
}

// Checkout individual to the back repo (if it is already staged)
func (individual *Individual) Checkout() *Individual {
	if _, ok := Stage.Individuals[individual]; ok {
		if Stage.BackRepo != nil {
			Stage.BackRepo.CheckoutIndividual(individual)
		}
	}
	return individual
}

//
// Legacy, to be deleted
//

// StageCopy appends a copy of individual to the model stage
func (individual *Individual) StageCopy() *Individual {
	_individual := new(Individual)
	*_individual = *individual
	_individual.Stage()
	return _individual
}

// StageAndCommit appends individual to the model stage and commit to the orm repo
func (individual *Individual) StageAndCommit() *Individual {
	individual.Stage()
	if Stage.AllModelsStructCreateCallback != nil {
		Stage.AllModelsStructCreateCallback.CreateORMIndividual(individual)
	}
	return individual
}

// DeleteStageAndCommit appends individual to the model stage and commit to the orm repo
func (individual *Individual) DeleteStageAndCommit() *Individual {
	individual.Unstage()
	DeleteORMIndividual(individual)
	return individual
}

// StageCopyAndCommit appends a copy of individual to the model stage and commit to the orm repo
func (individual *Individual) StageCopyAndCommit() *Individual {
	_individual := new(Individual)
	*_individual = *individual
	_individual.Stage()
	if Stage.AllModelsStructCreateCallback != nil {
		Stage.AllModelsStructCreateCallback.CreateORMIndividual(individual)
	}
	return _individual
}

// CreateORMIndividual enables dynamic staging of a Individual instance
func CreateORMIndividual(individual *Individual) {
	individual.Stage()
	if Stage.AllModelsStructCreateCallback != nil {
		Stage.AllModelsStructCreateCallback.CreateORMIndividual(individual)
	}
}

// DeleteORMIndividual enables dynamic staging of a Individual instance
func DeleteORMIndividual(individual *Individual) {
	individual.Unstage()
	if Stage.AllModelsStructDeleteCallback != nil {
		Stage.AllModelsStructDeleteCallback.DeleteORMIndividual(individual)
	}
}

// swagger:ignore
type AllModelsStructCreateInterface interface { // insertion point for Callbacks on creation
	CreateORMIndividual(Individual *Individual)
}

type AllModelsStructDeleteInterface interface { // insertion point for Callbacks on deletion
	DeleteORMIndividual(Individual *Individual)
}

func (stage *StageStruct) Reset() { // insertion point for array reset
	stage.Individuals = make(map[*Individual]struct{})
	stage.Individuals_mapString = make(map[string]*Individual)

}

func (stage *StageStruct) Nil() { // insertion point for array nil
	stage.Individuals = nil
	stage.Individuals_mapString = nil

}
