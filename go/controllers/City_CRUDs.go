// generated by stacks/gong/go/models/controller_file.go
package controllers

import (
	"log"
	"net/http"
	"time"

	"github.com/thomaspeugeot/gongtenk/go/models"
	"github.com/thomaspeugeot/gongtenk/go/orm"

	"github.com/gin-gonic/gin"
)

// declaration in order to justify use of the models import
var __City__dummysDeclaration__ models.City
var __City_time__dummyDeclaration time.Duration

// An CityID parameter model.
//
// This is used for operations that want the ID of an order in the path
// swagger:parameters getCity updateCity deleteCity
type CityID struct {
	// The ID of the order
	//
	// in: path
	// required: true
	ID int64
}

// CityInput is a schema that can validate the userâ€™s
// input to prevent us from getting invalid data
// swagger:parameters postCity updateCity
type CityInput struct {
	// The City to submit or modify
	// in: body
	City *orm.CityAPI
}

// GetCitys
//
// swagger:route GET /citys citys getCitys
//
// Get all citys
//
// Responses:
//    default: genericError
//        200: cityDBsResponse
func GetCitys(c *gin.Context) {
	db := orm.BackRepo.BackRepoCity.GetDB()

	// source slice
	var cityDBs []orm.CityDB
	query := db.Find(&cityDBs)
	if query.Error != nil {
		var returnError GenericError
		returnError.Body.Code = http.StatusBadRequest
		returnError.Body.Message = query.Error.Error()
		log.Println(query.Error.Error())
		c.JSON(http.StatusBadRequest, returnError.Body)
		return
	}

	// slice that will be transmitted to the front
	cityAPIs := make([]orm.CityAPI, 0)

	// for each city, update fields from the database nullable fields
	for idx := range cityDBs {
		cityDB := &cityDBs[idx]
		_ = cityDB
		var cityAPI orm.CityAPI

		// insertion point for updating fields
		cityAPI.ID = cityDB.ID
		cityDB.CopyBasicFieldsToCity(&cityAPI.City)
		cityAPI.CityPointersEnconding = cityDB.CityPointersEnconding
		cityAPIs = append(cityAPIs, cityAPI)
	}

	c.JSON(http.StatusOK, cityAPIs)
}

// PostCity
//
// swagger:route POST /citys citys postCity
//
// Creates a city
//     Consumes:
//     - application/json
//
//     Produces:
//     - application/json
//
//     Responses:
//       200: cityDBResponse
func PostCity(c *gin.Context) {
	db := orm.BackRepo.BackRepoCity.GetDB()

	// Validate input
	var input orm.CityAPI

	err := c.ShouldBindJSON(&input)
	if err != nil {
		var returnError GenericError
		returnError.Body.Code = http.StatusBadRequest
		returnError.Body.Message = err.Error()
		log.Println(err.Error())
		c.JSON(http.StatusBadRequest, returnError.Body)
		return
	}

	// Create city
	cityDB := orm.CityDB{}
	cityDB.CityPointersEnconding = input.CityPointersEnconding
	cityDB.CopyBasicFieldsFromCity(&input.City)

	query := db.Create(&cityDB)
	if query.Error != nil {
		var returnError GenericError
		returnError.Body.Code = http.StatusBadRequest
		returnError.Body.Message = query.Error.Error()
		log.Println(query.Error.Error())
		c.JSON(http.StatusBadRequest, returnError.Body)
		return
	}

	// a POST is equivalent to a back repo commit increase
	// (this will be improved with implementation of unit of work design pattern)
	orm.BackRepo.IncrementPushFromFrontNb()

	c.JSON(http.StatusOK, cityDB)
}

// GetCity
//
// swagger:route GET /citys/{ID} citys getCity
//
// Gets the details for a city.
//
// Responses:
//    default: genericError
//        200: cityDBResponse
func GetCity(c *gin.Context) {
	db := orm.BackRepo.BackRepoCity.GetDB()

	// Get cityDB in DB
	var cityDB orm.CityDB
	if err := db.First(&cityDB, c.Param("id")).Error; err != nil {
		var returnError GenericError
		returnError.Body.Code = http.StatusBadRequest
		returnError.Body.Message = err.Error()
		log.Println(err.Error())
		c.JSON(http.StatusBadRequest, returnError.Body)
		return
	}

	var cityAPI orm.CityAPI
	cityAPI.ID = cityDB.ID
	cityAPI.CityPointersEnconding = cityDB.CityPointersEnconding
	cityDB.CopyBasicFieldsToCity(&cityAPI.City)

	c.JSON(http.StatusOK, cityAPI)
}

// UpdateCity
//
// swagger:route PATCH /citys/{ID} citys updateCity
//
// Update a city
//
// Responses:
//    default: genericError
//        200: cityDBResponse
func UpdateCity(c *gin.Context) {
	db := orm.BackRepo.BackRepoCity.GetDB()

	// Get model if exist
	var cityDB orm.CityDB

	// fetch the city
	query := db.First(&cityDB, c.Param("id"))

	if query.Error != nil {
		var returnError GenericError
		returnError.Body.Code = http.StatusBadRequest
		returnError.Body.Message = query.Error.Error()
		log.Println(query.Error.Error())
		c.JSON(http.StatusBadRequest, returnError.Body)
		return
	}

	// Validate input
	var input orm.CityAPI
	if err := c.ShouldBindJSON(&input); err != nil {
		log.Println(err.Error())
		c.JSON(http.StatusBadRequest, gin.H{"error": err.Error()})
		return
	}

	// update
	cityDB.CopyBasicFieldsFromCity(&input.City)
	cityDB.CityPointersEnconding = input.CityPointersEnconding

	query = db.Model(&cityDB).Updates(cityDB)
	if query.Error != nil {
		var returnError GenericError
		returnError.Body.Code = http.StatusBadRequest
		returnError.Body.Message = query.Error.Error()
		log.Println(query.Error.Error())
		c.JSON(http.StatusBadRequest, returnError.Body)
		return
	}

	// an UPDATE generates a back repo commit increase
	// (this will be improved with implementation of unit of work design pattern)
	orm.BackRepo.IncrementPushFromFrontNb()

	// return status OK with the marshalling of the the cityDB
	c.JSON(http.StatusOK, cityDB)
}

// DeleteCity
//
// swagger:route DELETE /citys/{ID} citys deleteCity
//
// Delete a city
//
// Responses:
//    default: genericError
func DeleteCity(c *gin.Context) {
	db := orm.BackRepo.BackRepoCity.GetDB()

	// Get model if exist
	var cityDB orm.CityDB
	if err := db.First(&cityDB, c.Param("id")).Error; err != nil {
		var returnError GenericError
		returnError.Body.Code = http.StatusBadRequest
		returnError.Body.Message = err.Error()
		log.Println(err.Error())
		c.JSON(http.StatusBadRequest, returnError.Body)
		return
	}

	// with gorm.Model field, default delete is a soft delete. Unscoped() force delete
	db.Unscoped().Delete(&cityDB)

	// a DELETE generates a back repo commit increase
	// (this will be improved with implementation of unit of work design pattern)
	orm.BackRepo.IncrementPushFromFrontNb()

	c.JSON(http.StatusOK, gin.H{"data": true})
}
