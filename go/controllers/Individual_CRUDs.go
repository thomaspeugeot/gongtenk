// generated by stacks/gong/go/models/controller_file.go
package controllers

import (
	"log"
	"net/http"
	"time"

	"github.com/thomaspeugeot/gongtenk/go/models"
	"github.com/thomaspeugeot/gongtenk/go/orm"

	"github.com/gin-gonic/gin"
)

// declaration in order to justify use of the models import
var __Individual__dummysDeclaration__ models.Individual
var __Individual_time__dummyDeclaration time.Duration

// An IndividualID parameter model.
//
// This is used for operations that want the ID of an order in the path
// swagger:parameters getIndividual updateIndividual deleteIndividual
type IndividualID struct {
	// The ID of the order
	//
	// in: path
	// required: true
	ID int64
}

// IndividualInput is a schema that can validate the userâ€™s
// input to prevent us from getting invalid data
// swagger:parameters postIndividual updateIndividual
type IndividualInput struct {
	// The Individual to submit or modify
	// in: body
	Individual *orm.IndividualAPI
}

// GetIndividuals
//
// swagger:route GET /individuals individuals getIndividuals
//
// Get all individuals
//
// Responses:
//    default: genericError
//        200: individualDBsResponse
func GetIndividuals(c *gin.Context) {
	db := orm.BackRepo.BackRepoIndividual.GetDB()

	// source slice
	var individualDBs []orm.IndividualDB
	query := db.Find(&individualDBs)
	if query.Error != nil {
		var returnError GenericError
		returnError.Body.Code = http.StatusBadRequest
		returnError.Body.Message = query.Error.Error()
		log.Println(query.Error.Error())
		c.JSON(http.StatusBadRequest, returnError.Body)
		return
	}

	// slice that will be transmitted to the front
	individualAPIs := make([]orm.IndividualAPI, 0)

	// for each individual, update fields from the database nullable fields
	for idx := range individualDBs {
		individualDB := &individualDBs[idx]
		_ = individualDB
		var individualAPI orm.IndividualAPI

		// insertion point for updating fields
		individualAPI.ID = individualDB.ID
		individualDB.CopyBasicFieldsToIndividual(&individualAPI.Individual)
		individualAPI.IndividualPointersEnconding = individualDB.IndividualPointersEnconding
		individualAPIs = append(individualAPIs, individualAPI)
	}

	c.JSON(http.StatusOK, individualAPIs)
}

// PostIndividual
//
// swagger:route POST /individuals individuals postIndividual
//
// Creates a individual
//     Consumes:
//     - application/json
//
//     Produces:
//     - application/json
//
//     Responses:
//       200: individualDBResponse
func PostIndividual(c *gin.Context) {
	db := orm.BackRepo.BackRepoIndividual.GetDB()

	// Validate input
	var input orm.IndividualAPI

	err := c.ShouldBindJSON(&input)
	if err != nil {
		var returnError GenericError
		returnError.Body.Code = http.StatusBadRequest
		returnError.Body.Message = err.Error()
		log.Println(err.Error())
		c.JSON(http.StatusBadRequest, returnError.Body)
		return
	}

	// Create individual
	individualDB := orm.IndividualDB{}
	individualDB.IndividualPointersEnconding = input.IndividualPointersEnconding
	individualDB.CopyBasicFieldsFromIndividual(&input.Individual)

	query := db.Create(&individualDB)
	if query.Error != nil {
		var returnError GenericError
		returnError.Body.Code = http.StatusBadRequest
		returnError.Body.Message = query.Error.Error()
		log.Println(query.Error.Error())
		c.JSON(http.StatusBadRequest, returnError.Body)
		return
	}

	// a POST is equivalent to a back repo commit increase
	// (this will be improved with implementation of unit of work design pattern)
	orm.BackRepo.IncrementPushFromFrontNb()

	c.JSON(http.StatusOK, individualDB)
}

// GetIndividual
//
// swagger:route GET /individuals/{ID} individuals getIndividual
//
// Gets the details for a individual.
//
// Responses:
//    default: genericError
//        200: individualDBResponse
func GetIndividual(c *gin.Context) {
	db := orm.BackRepo.BackRepoIndividual.GetDB()

	// Get individualDB in DB
	var individualDB orm.IndividualDB
	if err := db.First(&individualDB, c.Param("id")).Error; err != nil {
		var returnError GenericError
		returnError.Body.Code = http.StatusBadRequest
		returnError.Body.Message = err.Error()
		log.Println(err.Error())
		c.JSON(http.StatusBadRequest, returnError.Body)
		return
	}

	var individualAPI orm.IndividualAPI
	individualAPI.ID = individualDB.ID
	individualAPI.IndividualPointersEnconding = individualDB.IndividualPointersEnconding
	individualDB.CopyBasicFieldsToIndividual(&individualAPI.Individual)

	c.JSON(http.StatusOK, individualAPI)
}

// UpdateIndividual
//
// swagger:route PATCH /individuals/{ID} individuals updateIndividual
//
// Update a individual
//
// Responses:
//    default: genericError
//        200: individualDBResponse
func UpdateIndividual(c *gin.Context) {
	db := orm.BackRepo.BackRepoIndividual.GetDB()

	// Get model if exist
	var individualDB orm.IndividualDB

	// fetch the individual
	query := db.First(&individualDB, c.Param("id"))

	if query.Error != nil {
		var returnError GenericError
		returnError.Body.Code = http.StatusBadRequest
		returnError.Body.Message = query.Error.Error()
		log.Println(query.Error.Error())
		c.JSON(http.StatusBadRequest, returnError.Body)
		return
	}

	// Validate input
	var input orm.IndividualAPI
	if err := c.ShouldBindJSON(&input); err != nil {
		log.Println(err.Error())
		c.JSON(http.StatusBadRequest, gin.H{"error": err.Error()})
		return
	}

	// update
	individualDB.CopyBasicFieldsFromIndividual(&input.Individual)
	individualDB.IndividualPointersEnconding = input.IndividualPointersEnconding

	query = db.Model(&individualDB).Updates(individualDB)
	if query.Error != nil {
		var returnError GenericError
		returnError.Body.Code = http.StatusBadRequest
		returnError.Body.Message = query.Error.Error()
		log.Println(query.Error.Error())
		c.JSON(http.StatusBadRequest, returnError.Body)
		return
	}

	// an UPDATE generates a back repo commit increase
	// (this will be improved with implementation of unit of work design pattern)
	orm.BackRepo.IncrementPushFromFrontNb()

	// return status OK with the marshalling of the the individualDB
	c.JSON(http.StatusOK, individualDB)
}

// DeleteIndividual
//
// swagger:route DELETE /individuals/{ID} individuals deleteIndividual
//
// Delete a individual
//
// Responses:
//    default: genericError
func DeleteIndividual(c *gin.Context) {
	db := orm.BackRepo.BackRepoIndividual.GetDB()

	// Get model if exist
	var individualDB orm.IndividualDB
	if err := db.First(&individualDB, c.Param("id")).Error; err != nil {
		var returnError GenericError
		returnError.Body.Code = http.StatusBadRequest
		returnError.Body.Message = err.Error()
		log.Println(err.Error())
		c.JSON(http.StatusBadRequest, returnError.Body)
		return
	}

	// with gorm.Model field, default delete is a soft delete. Unscoped() force delete
	db.Unscoped().Delete(&individualDB)

	// a DELETE generates a back repo commit increase
	// (this will be improved with implementation of unit of work design pattern)
	orm.BackRepo.IncrementPushFromFrontNb()

	c.JSON(http.StatusOK, gin.H{"data": true})
}
